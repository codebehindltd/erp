//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace HotelManagement.Presentation.Website.Actatek {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ACTAtek", Namespace="http://www.hectrix.com/ACTAtek.service")]
    public partial class ACTAtek : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback loginOperationCompleted;
        
        private System.Threading.SendOrPostCallback logoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback getRegisteredAgentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback pollLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLogsOperationCompleted;
        
        private System.Threading.SendOrPostCallback addLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback addUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMyselfOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateMyselfOperationCompleted;
        
        private System.Threading.SendOrPostCallback activateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback deactivateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateUserMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteUserMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback addDepartmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateDepartmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDepartmentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteDepartmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback addGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback getGroupsOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTriggersOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateTriggerOperationCompleted;
        
        private System.Threading.SendOrPostCallback clearTriggerOperationCompleted;
        
        private System.Threading.SendOrPostCallback openDoorOperationCompleted;
        
        private System.Threading.SendOrPostCallback openRelayOperationCompleted;
        
        private System.Threading.SendOrPostCallback closeRelayOperationCompleted;
        
        private System.Threading.SendOrPostCallback registerAgentOperationCompleted;
        
        private System.Threading.SendOrPostCallback unregisterAgentOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAPIVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTerminalStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTerminalListOperationCompleted;
        
        private System.Threading.SendOrPostCallback nopOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLogPhotoOperationCompleted;
        
        private System.Threading.SendOrPostCallback registerFPUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFullLogsOperationCompleted;
        
        private System.Threading.SendOrPostCallback resetLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFpSecurityLevelOperationCompleted;
        
        private System.Threading.SendOrPostCallback setFpSecurityLevelOperationCompleted;
        
        private System.Threading.SendOrPostCallback getRelayDelayOperationCompleted;
        
        private System.Threading.SendOrPostCallback setRelayDelayOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAutoInOutOperationCompleted;
        
        private System.Threading.SendOrPostCallback setAutoInOutOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLogUnauthorizedEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback setLogUnauthorizedEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback setRelayOptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getRelayOptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback setSNTPOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSNTPOperationCompleted;
        
        private System.Threading.SendOrPostCallback setSNTPServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSNTPServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTerminalDateTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback setTerminalDateTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTimeZoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback setTimeZoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCaptureFingerprintOperationCompleted;
        
        private System.Threading.SendOrPostCallback initCaptureFPOperationCompleted;
        
        private System.Threading.SendOrPostCallback lockOperationCompleted;
        
        private System.Threading.SendOrPostCallback unlockOperationCompleted;
        
        private System.Threading.SendOrPostCallback systemBackupOperationCompleted;
        
        private System.Threading.SendOrPostCallback systemRestoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUsersDbOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteLogsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoteBackupStartOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetChunkOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoteBackupEndOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoteRestoreCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoteRestoreStartOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendChunkOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoteRestoreEndOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelRestoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback addUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback getJobCodeSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateJobCodeSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback addJobCodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateJobCodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteJobCodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getJobCodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserBatchOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ACTAtek() {
            this.Url = global::HotelManagement.Presentation.Website.Properties.Settings.Default.HotelManagement_Presentation_Website_Actatek_ACTAtek;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event loginCompletedEventHandler loginCompleted;
        
        /// <remarks/>
        public event logoutCompletedEventHandler logoutCompleted;
        
        /// <remarks/>
        public event getRegisteredAgentsCompletedEventHandler getRegisteredAgentsCompleted;
        
        /// <remarks/>
        public event pollLogCompletedEventHandler pollLogCompleted;
        
        /// <remarks/>
        public event getLogsCompletedEventHandler getLogsCompleted;
        
        /// <remarks/>
        public event addLogCompletedEventHandler addLogCompleted;
        
        /// <remarks/>
        public event addUserCompletedEventHandler addUserCompleted;
        
        /// <remarks/>
        public event getUsersCompletedEventHandler getUsersCompleted;
        
        /// <remarks/>
        public event updateUserCompletedEventHandler updateUserCompleted;
        
        /// <remarks/>
        public event deleteUserCompletedEventHandler deleteUserCompleted;
        
        /// <remarks/>
        public event getMyselfCompletedEventHandler getMyselfCompleted;
        
        /// <remarks/>
        public event updateMyselfCompletedEventHandler updateMyselfCompleted;
        
        /// <remarks/>
        public event activateUserCompletedEventHandler activateUserCompleted;
        
        /// <remarks/>
        public event deactivateUserCompletedEventHandler deactivateUserCompleted;
        
        /// <remarks/>
        public event getUserMessageCompletedEventHandler getUserMessageCompleted;
        
        /// <remarks/>
        public event updateUserMessageCompletedEventHandler updateUserMessageCompleted;
        
        /// <remarks/>
        public event deleteUserMessageCompletedEventHandler deleteUserMessageCompleted;
        
        /// <remarks/>
        public event addDepartmentCompletedEventHandler addDepartmentCompleted;
        
        /// <remarks/>
        public event updateDepartmentCompletedEventHandler updateDepartmentCompleted;
        
        /// <remarks/>
        public event getDepartmentsCompletedEventHandler getDepartmentsCompleted;
        
        /// <remarks/>
        public event deleteDepartmentCompletedEventHandler deleteDepartmentCompleted;
        
        /// <remarks/>
        public event addGroupCompletedEventHandler addGroupCompleted;
        
        /// <remarks/>
        public event getGroupsCompletedEventHandler getGroupsCompleted;
        
        /// <remarks/>
        public event updateGroupCompletedEventHandler updateGroupCompleted;
        
        /// <remarks/>
        public event deleteGroupCompletedEventHandler deleteGroupCompleted;
        
        /// <remarks/>
        public event getTriggersCompletedEventHandler getTriggersCompleted;
        
        /// <remarks/>
        public event updateTriggerCompletedEventHandler updateTriggerCompleted;
        
        /// <remarks/>
        public event clearTriggerCompletedEventHandler clearTriggerCompleted;
        
        /// <remarks/>
        public event openDoorCompletedEventHandler openDoorCompleted;
        
        /// <remarks/>
        public event openRelayCompletedEventHandler openRelayCompleted;
        
        /// <remarks/>
        public event closeRelayCompletedEventHandler closeRelayCompleted;
        
        /// <remarks/>
        public event registerAgentCompletedEventHandler registerAgentCompleted;
        
        /// <remarks/>
        public event unregisterAgentCompletedEventHandler unregisterAgentCompleted;
        
        /// <remarks/>
        public event getAPIVersionCompletedEventHandler getAPIVersionCompleted;
        
        /// <remarks/>
        public event getTerminalStatusCompletedEventHandler getTerminalStatusCompleted;
        
        /// <remarks/>
        public event getTerminalListCompletedEventHandler getTerminalListCompleted;
        
        /// <remarks/>
        public event nopCompletedEventHandler nopCompleted;
        
        /// <remarks/>
        public event getLogPhotoCompletedEventHandler getLogPhotoCompleted;
        
        /// <remarks/>
        public event registerFPUserCompletedEventHandler registerFPUserCompleted;
        
        /// <remarks/>
        public event getFullLogsCompletedEventHandler getFullLogsCompleted;
        
        /// <remarks/>
        public event resetLogCompletedEventHandler resetLogCompleted;
        
        /// <remarks/>
        public event getFpSecurityLevelCompletedEventHandler getFpSecurityLevelCompleted;
        
        /// <remarks/>
        public event setFpSecurityLevelCompletedEventHandler setFpSecurityLevelCompleted;
        
        /// <remarks/>
        public event getRelayDelayCompletedEventHandler getRelayDelayCompleted;
        
        /// <remarks/>
        public event setRelayDelayCompletedEventHandler setRelayDelayCompleted;
        
        /// <remarks/>
        public event getAutoInOutCompletedEventHandler getAutoInOutCompleted;
        
        /// <remarks/>
        public event setAutoInOutCompletedEventHandler setAutoInOutCompleted;
        
        /// <remarks/>
        public event getLogUnauthorizedEventCompletedEventHandler getLogUnauthorizedEventCompleted;
        
        /// <remarks/>
        public event setLogUnauthorizedEventCompletedEventHandler setLogUnauthorizedEventCompleted;
        
        /// <remarks/>
        public event setRelayOptionCompletedEventHandler setRelayOptionCompleted;
        
        /// <remarks/>
        public event getRelayOptionCompletedEventHandler getRelayOptionCompleted;
        
        /// <remarks/>
        public event setSNTPCompletedEventHandler setSNTPCompleted;
        
        /// <remarks/>
        public event getSNTPCompletedEventHandler getSNTPCompleted;
        
        /// <remarks/>
        public event setSNTPServerCompletedEventHandler setSNTPServerCompleted;
        
        /// <remarks/>
        public event getSNTPServerCompletedEventHandler getSNTPServerCompleted;
        
        /// <remarks/>
        public event getTerminalDateTimeCompletedEventHandler getTerminalDateTimeCompleted;
        
        /// <remarks/>
        public event setTerminalDateTimeCompletedEventHandler setTerminalDateTimeCompleted;
        
        /// <remarks/>
        public event getTimeZoneCompletedEventHandler getTimeZoneCompleted;
        
        /// <remarks/>
        public event setTimeZoneCompletedEventHandler setTimeZoneCompleted;
        
        /// <remarks/>
        public event getCaptureFingerprintCompletedEventHandler getCaptureFingerprintCompleted;
        
        /// <remarks/>
        public event initCaptureFPCompletedEventHandler initCaptureFPCompleted;
        
        /// <remarks/>
        public event lockCompletedEventHandler lockCompleted;
        
        /// <remarks/>
        public event unlockCompletedEventHandler unlockCompleted;
        
        /// <remarks/>
        public event systemBackupCompletedEventHandler systemBackupCompleted;
        
        /// <remarks/>
        public event systemRestoreCompletedEventHandler systemRestoreCompleted;
        
        /// <remarks/>
        public event getUsersDbCompletedEventHandler getUsersDbCompleted;
        
        /// <remarks/>
        public event deleteLogsCompletedEventHandler deleteLogsCompleted;
        
        /// <remarks/>
        public event RemoteBackupStartCompletedEventHandler RemoteBackupStartCompleted;
        
        /// <remarks/>
        public event GetChunkCompletedEventHandler GetChunkCompleted;
        
        /// <remarks/>
        public event RemoteBackupEndCompletedEventHandler RemoteBackupEndCompleted;
        
        /// <remarks/>
        public event RemoteRestoreCheckCompletedEventHandler RemoteRestoreCheckCompleted;
        
        /// <remarks/>
        public event RemoteRestoreStartCompletedEventHandler RemoteRestoreStartCompleted;
        
        /// <remarks/>
        public event SendChunkCompletedEventHandler SendChunkCompleted;
        
        /// <remarks/>
        public event RemoteRestoreEndCompletedEventHandler RemoteRestoreEndCompleted;
        
        /// <remarks/>
        public event CancelRestoreCompletedEventHandler CancelRestoreCompleted;
        
        /// <remarks/>
        public event addUsersCompletedEventHandler addUsersCompleted;
        
        /// <remarks/>
        public event updateUsersCompletedEventHandler updateUsersCompleted;
        
        /// <remarks/>
        public event getJobCodeSettingsCompletedEventHandler getJobCodeSettingsCompleted;
        
        /// <remarks/>
        public event updateJobCodeSettingsCompletedEventHandler updateJobCodeSettingsCompleted;
        
        /// <remarks/>
        public event addJobCodesCompletedEventHandler addJobCodesCompleted;
        
        /// <remarks/>
        public event updateJobCodesCompletedEventHandler updateJobCodesCompleted;
        
        /// <remarks/>
        public event deleteJobCodesCompletedEventHandler deleteJobCodesCompleted;
        
        /// <remarks/>
        public event getJobCodesCompletedEventHandler getJobCodesCompleted;
        
        /// <remarks/>
        public event getUserCountCompletedEventHandler getUserCountCompleted;
        
        /// <remarks/>
        public event getUserBatchCompletedEventHandler getUserBatchCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("sessionID")]
        public long login([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] string username, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] string password) {
            object[] results = this.Invoke("login", new object[] {
                        username,
                        password});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void loginAsync(string username, string password) {
            this.loginAsync(username, password, null);
        }
        
        /// <remarks/>
        public void loginAsync(string username, string password, object userState) {
            if ((this.loginOperationCompleted == null)) {
                this.loginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnloginOperationCompleted);
            }
            this.InvokeAsync("login", new object[] {
                        username,
                        password}, this.loginOperationCompleted, userState);
        }
        
        private void OnloginOperationCompleted(object arg) {
            if ((this.loginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.loginCompleted(this, new loginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string logout([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID) {
            object[] results = this.Invoke("logout", new object[] {
                        sessionID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void logoutAsync(long sessionID) {
            this.logoutAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void logoutAsync(long sessionID, object userState) {
            if ((this.logoutOperationCompleted == null)) {
                this.logoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlogoutOperationCompleted);
            }
            this.InvokeAsync("logout", new object[] {
                        sessionID}, this.logoutOperationCompleted, userState);
        }
        
        private void OnlogoutOperationCompleted(object arg) {
            if ((this.logoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.logoutCompleted(this, new logoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("agents")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("agents", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Agent[] getRegisteredAgents([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID) {
            object[] results = this.Invoke("getRegisteredAgents", new object[] {
                        sessionID});
            return ((Agent[])(results[0]));
        }
        
        /// <remarks/>
        public void getRegisteredAgentsAsync(long sessionID) {
            this.getRegisteredAgentsAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void getRegisteredAgentsAsync(long sessionID, object userState) {
            if ((this.getRegisteredAgentsOperationCompleted == null)) {
                this.getRegisteredAgentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetRegisteredAgentsOperationCompleted);
            }
            this.InvokeAsync("getRegisteredAgents", new object[] {
                        sessionID}, this.getRegisteredAgentsOperationCompleted, userState);
        }
        
        private void OngetRegisteredAgentsOperationCompleted(object arg) {
            if ((this.getRegisteredAgentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getRegisteredAgentsCompleted(this, new getRegisteredAgentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("updatedAgent")]
        public Agent pollLog([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] Agent agent) {
            object[] results = this.Invoke("pollLog", new object[] {
                        sessionID,
                        agent});
            return ((Agent)(results[0]));
        }
        
        /// <remarks/>
        public void pollLogAsync(long sessionID, Agent agent) {
            this.pollLogAsync(sessionID, agent, null);
        }
        
        /// <remarks/>
        public void pollLogAsync(long sessionID, Agent agent, object userState) {
            if ((this.pollLogOperationCompleted == null)) {
                this.pollLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpollLogOperationCompleted);
            }
            this.InvokeAsync("pollLog", new object[] {
                        sessionID,
                        agent}, this.pollLogOperationCompleted, userState);
        }
        
        private void OnpollLogOperationCompleted(object arg) {
            if ((this.pollLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.pollLogCompleted(this, new pollLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("logs")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("log", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Log[] getLogs([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] getLogsCriteria getLogsCriteria) {
            object[] results = this.Invoke("getLogs", new object[] {
                        sessionID,
                        getLogsCriteria});
            return ((Log[])(results[0]));
        }
        
        /// <remarks/>
        public void getLogsAsync(long sessionID, getLogsCriteria getLogsCriteria) {
            this.getLogsAsync(sessionID, getLogsCriteria, null);
        }
        
        /// <remarks/>
        public void getLogsAsync(long sessionID, getLogsCriteria getLogsCriteria, object userState) {
            if ((this.getLogsOperationCompleted == null)) {
                this.getLogsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLogsOperationCompleted);
            }
            this.InvokeAsync("getLogs", new object[] {
                        sessionID,
                        getLogsCriteria}, this.getLogsOperationCompleted, userState);
        }
        
        private void OngetLogsOperationCompleted(object arg) {
            if ((this.getLogsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLogsCompleted(this, new getLogsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string addLog([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime timestamp, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] string employeeID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] eventType @event, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] string terminalSN) {
            object[] results = this.Invoke("addLog", new object[] {
                        sessionID,
                        timestamp,
                        employeeID,
                        @event,
                        terminalSN});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addLogAsync(long sessionID, System.DateTime timestamp, string employeeID, eventType @event, string terminalSN) {
            this.addLogAsync(sessionID, timestamp, employeeID, @event, terminalSN, null);
        }
        
        /// <remarks/>
        public void addLogAsync(long sessionID, System.DateTime timestamp, string employeeID, eventType @event, string terminalSN, object userState) {
            if ((this.addLogOperationCompleted == null)) {
                this.addLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddLogOperationCompleted);
            }
            this.InvokeAsync("addLog", new object[] {
                        sessionID,
                        timestamp,
                        employeeID,
                        @event,
                        terminalSN}, this.addLogOperationCompleted, userState);
        }
        
        private void OnaddLogOperationCompleted(object arg) {
            if ((this.addLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addLogCompleted(this, new addLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("userID")]
        public string addUser([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] User user) {
            object[] results = this.Invoke("addUser", new object[] {
                        sessionID,
                        user});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addUserAsync(long sessionID, User user) {
            this.addUserAsync(sessionID, user, null);
        }
        
        /// <remarks/>
        public void addUserAsync(long sessionID, User user, object userState) {
            if ((this.addUserOperationCompleted == null)) {
                this.addUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddUserOperationCompleted);
            }
            this.InvokeAsync("addUser", new object[] {
                        sessionID,
                        user}, this.addUserOperationCompleted, userState);
        }
        
        private void OnaddUserOperationCompleted(object arg) {
            if ((this.addUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addUserCompleted(this, new addUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("users")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("user", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public User[] getUsers([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] getUsersCriteria getUsersCriteria) {
            object[] results = this.Invoke("getUsers", new object[] {
                        sessionID,
                        getUsersCriteria});
            return ((User[])(results[0]));
        }
        
        /// <remarks/>
        public void getUsersAsync(long sessionID, getUsersCriteria getUsersCriteria) {
            this.getUsersAsync(sessionID, getUsersCriteria, null);
        }
        
        /// <remarks/>
        public void getUsersAsync(long sessionID, getUsersCriteria getUsersCriteria, object userState) {
            if ((this.getUsersOperationCompleted == null)) {
                this.getUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUsersOperationCompleted);
            }
            this.InvokeAsync("getUsers", new object[] {
                        sessionID,
                        getUsersCriteria}, this.getUsersOperationCompleted, userState);
        }
        
        private void OngetUsersOperationCompleted(object arg) {
            if ((this.getUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUsersCompleted(this, new getUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string updateUser([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] string userID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] User user) {
            object[] results = this.Invoke("updateUser", new object[] {
                        sessionID,
                        userID,
                        user});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void updateUserAsync(long sessionID, string userID, User user) {
            this.updateUserAsync(sessionID, userID, user, null);
        }
        
        /// <remarks/>
        public void updateUserAsync(long sessionID, string userID, User user, object userState) {
            if ((this.updateUserOperationCompleted == null)) {
                this.updateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateUserOperationCompleted);
            }
            this.InvokeAsync("updateUser", new object[] {
                        sessionID,
                        userID,
                        user}, this.updateUserOperationCompleted, userState);
        }
        
        private void OnupdateUserOperationCompleted(object arg) {
            if ((this.updateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateUserCompleted(this, new updateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string deleteUser([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] string userID) {
            object[] results = this.Invoke("deleteUser", new object[] {
                        sessionID,
                        userID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void deleteUserAsync(long sessionID, string userID) {
            this.deleteUserAsync(sessionID, userID, null);
        }
        
        /// <remarks/>
        public void deleteUserAsync(long sessionID, string userID, object userState) {
            if ((this.deleteUserOperationCompleted == null)) {
                this.deleteUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteUserOperationCompleted);
            }
            this.InvokeAsync("deleteUser", new object[] {
                        sessionID,
                        userID}, this.deleteUserOperationCompleted, userState);
        }
        
        private void OndeleteUserOperationCompleted(object arg) {
            if ((this.deleteUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteUserCompleted(this, new deleteUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("user")]
        public User getMyself([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID) {
            object[] results = this.Invoke("getMyself", new object[] {
                        sessionID});
            return ((User)(results[0]));
        }
        
        /// <remarks/>
        public void getMyselfAsync(long sessionID) {
            this.getMyselfAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void getMyselfAsync(long sessionID, object userState) {
            if ((this.getMyselfOperationCompleted == null)) {
                this.getMyselfOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMyselfOperationCompleted);
            }
            this.InvokeAsync("getMyself", new object[] {
                        sessionID}, this.getMyselfOperationCompleted, userState);
        }
        
        private void OngetMyselfOperationCompleted(object arg) {
            if ((this.getMyselfCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMyselfCompleted(this, new getMyselfCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string updateMyself([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] User user) {
            object[] results = this.Invoke("updateMyself", new object[] {
                        sessionID,
                        user});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void updateMyselfAsync(long sessionID, User user) {
            this.updateMyselfAsync(sessionID, user, null);
        }
        
        /// <remarks/>
        public void updateMyselfAsync(long sessionID, User user, object userState) {
            if ((this.updateMyselfOperationCompleted == null)) {
                this.updateMyselfOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateMyselfOperationCompleted);
            }
            this.InvokeAsync("updateMyself", new object[] {
                        sessionID,
                        user}, this.updateMyselfOperationCompleted, userState);
        }
        
        private void OnupdateMyselfOperationCompleted(object arg) {
            if ((this.updateMyselfCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateMyselfCompleted(this, new updateMyselfCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string activateUser([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] string userID) {
            object[] results = this.Invoke("activateUser", new object[] {
                        sessionID,
                        userID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void activateUserAsync(long sessionID, string userID) {
            this.activateUserAsync(sessionID, userID, null);
        }
        
        /// <remarks/>
        public void activateUserAsync(long sessionID, string userID, object userState) {
            if ((this.activateUserOperationCompleted == null)) {
                this.activateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnactivateUserOperationCompleted);
            }
            this.InvokeAsync("activateUser", new object[] {
                        sessionID,
                        userID}, this.activateUserOperationCompleted, userState);
        }
        
        private void OnactivateUserOperationCompleted(object arg) {
            if ((this.activateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.activateUserCompleted(this, new activateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string deactivateUser([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] string userID) {
            object[] results = this.Invoke("deactivateUser", new object[] {
                        sessionID,
                        userID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void deactivateUserAsync(long sessionID, string userID) {
            this.deactivateUserAsync(sessionID, userID, null);
        }
        
        /// <remarks/>
        public void deactivateUserAsync(long sessionID, string userID, object userState) {
            if ((this.deactivateUserOperationCompleted == null)) {
                this.deactivateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeactivateUserOperationCompleted);
            }
            this.InvokeAsync("deactivateUser", new object[] {
                        sessionID,
                        userID}, this.deactivateUserOperationCompleted, userState);
        }
        
        private void OndeactivateUserOperationCompleted(object arg) {
            if ((this.deactivateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deactivateUserCompleted(this, new deactivateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("message")]
        public string getUserMessage([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] string userID) {
            object[] results = this.Invoke("getUserMessage", new object[] {
                        sessionID,
                        userID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getUserMessageAsync(long sessionID, string userID) {
            this.getUserMessageAsync(sessionID, userID, null);
        }
        
        /// <remarks/>
        public void getUserMessageAsync(long sessionID, string userID, object userState) {
            if ((this.getUserMessageOperationCompleted == null)) {
                this.getUserMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserMessageOperationCompleted);
            }
            this.InvokeAsync("getUserMessage", new object[] {
                        sessionID,
                        userID}, this.getUserMessageOperationCompleted, userState);
        }
        
        private void OngetUserMessageOperationCompleted(object arg) {
            if ((this.getUserMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserMessageCompleted(this, new getUserMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string updateUserMessage([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] string userID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] string message) {
            object[] results = this.Invoke("updateUserMessage", new object[] {
                        sessionID,
                        userID,
                        message});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void updateUserMessageAsync(long sessionID, string userID, string message) {
            this.updateUserMessageAsync(sessionID, userID, message, null);
        }
        
        /// <remarks/>
        public void updateUserMessageAsync(long sessionID, string userID, string message, object userState) {
            if ((this.updateUserMessageOperationCompleted == null)) {
                this.updateUserMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateUserMessageOperationCompleted);
            }
            this.InvokeAsync("updateUserMessage", new object[] {
                        sessionID,
                        userID,
                        message}, this.updateUserMessageOperationCompleted, userState);
        }
        
        private void OnupdateUserMessageOperationCompleted(object arg) {
            if ((this.updateUserMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateUserMessageCompleted(this, new updateUserMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string deleteUserMessage([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] string userID) {
            object[] results = this.Invoke("deleteUserMessage", new object[] {
                        sessionID,
                        userID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void deleteUserMessageAsync(long sessionID, string userID) {
            this.deleteUserMessageAsync(sessionID, userID, null);
        }
        
        /// <remarks/>
        public void deleteUserMessageAsync(long sessionID, string userID, object userState) {
            if ((this.deleteUserMessageOperationCompleted == null)) {
                this.deleteUserMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteUserMessageOperationCompleted);
            }
            this.InvokeAsync("deleteUserMessage", new object[] {
                        sessionID,
                        userID}, this.deleteUserMessageOperationCompleted, userState);
        }
        
        private void OndeleteUserMessageOperationCompleted(object arg) {
            if ((this.deleteUserMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteUserMessageCompleted(this, new deleteUserMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("departmentID")]
        public int addDepartment([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] Department department) {
            object[] results = this.Invoke("addDepartment", new object[] {
                        sessionID,
                        department});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addDepartmentAsync(long sessionID, Department department) {
            this.addDepartmentAsync(sessionID, department, null);
        }
        
        /// <remarks/>
        public void addDepartmentAsync(long sessionID, Department department, object userState) {
            if ((this.addDepartmentOperationCompleted == null)) {
                this.addDepartmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddDepartmentOperationCompleted);
            }
            this.InvokeAsync("addDepartment", new object[] {
                        sessionID,
                        department}, this.addDepartmentOperationCompleted, userState);
        }
        
        private void OnaddDepartmentOperationCompleted(object arg) {
            if ((this.addDepartmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addDepartmentCompleted(this, new addDepartmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string updateDepartment([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int departmentID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] Department department) {
            object[] results = this.Invoke("updateDepartment", new object[] {
                        sessionID,
                        departmentID,
                        department});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void updateDepartmentAsync(long sessionID, int departmentID, Department department) {
            this.updateDepartmentAsync(sessionID, departmentID, department, null);
        }
        
        /// <remarks/>
        public void updateDepartmentAsync(long sessionID, int departmentID, Department department, object userState) {
            if ((this.updateDepartmentOperationCompleted == null)) {
                this.updateDepartmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateDepartmentOperationCompleted);
            }
            this.InvokeAsync("updateDepartment", new object[] {
                        sessionID,
                        departmentID,
                        department}, this.updateDepartmentOperationCompleted, userState);
        }
        
        private void OnupdateDepartmentOperationCompleted(object arg) {
            if ((this.updateDepartmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateDepartmentCompleted(this, new updateDepartmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("departments")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("department", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Department[] getDepartments([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] System.Nullable<int> departmentID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool departmentIDSpecified) {
            object[] results = this.Invoke("getDepartments", new object[] {
                        sessionID,
                        departmentID,
                        departmentIDSpecified});
            return ((Department[])(results[0]));
        }
        
        /// <remarks/>
        public void getDepartmentsAsync(long sessionID, System.Nullable<int> departmentID, bool departmentIDSpecified) {
            this.getDepartmentsAsync(sessionID, departmentID, departmentIDSpecified, null);
        }
        
        /// <remarks/>
        public void getDepartmentsAsync(long sessionID, System.Nullable<int> departmentID, bool departmentIDSpecified, object userState) {
            if ((this.getDepartmentsOperationCompleted == null)) {
                this.getDepartmentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDepartmentsOperationCompleted);
            }
            this.InvokeAsync("getDepartments", new object[] {
                        sessionID,
                        departmentID,
                        departmentIDSpecified}, this.getDepartmentsOperationCompleted, userState);
        }
        
        private void OngetDepartmentsOperationCompleted(object arg) {
            if ((this.getDepartmentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDepartmentsCompleted(this, new getDepartmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string deleteDepartment([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int departmentID) {
            object[] results = this.Invoke("deleteDepartment", new object[] {
                        sessionID,
                        departmentID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void deleteDepartmentAsync(long sessionID, int departmentID) {
            this.deleteDepartmentAsync(sessionID, departmentID, null);
        }
        
        /// <remarks/>
        public void deleteDepartmentAsync(long sessionID, int departmentID, object userState) {
            if ((this.deleteDepartmentOperationCompleted == null)) {
                this.deleteDepartmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteDepartmentOperationCompleted);
            }
            this.InvokeAsync("deleteDepartment", new object[] {
                        sessionID,
                        departmentID}, this.deleteDepartmentOperationCompleted, userState);
        }
        
        private void OndeleteDepartmentOperationCompleted(object arg) {
            if ((this.deleteDepartmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteDepartmentCompleted(this, new deleteDepartmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("groupID")]
        public int addGroup([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] Group group) {
            object[] results = this.Invoke("addGroup", new object[] {
                        sessionID,
                        group});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addGroupAsync(long sessionID, Group group) {
            this.addGroupAsync(sessionID, group, null);
        }
        
        /// <remarks/>
        public void addGroupAsync(long sessionID, Group group, object userState) {
            if ((this.addGroupOperationCompleted == null)) {
                this.addGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddGroupOperationCompleted);
            }
            this.InvokeAsync("addGroup", new object[] {
                        sessionID,
                        group}, this.addGroupOperationCompleted, userState);
        }
        
        private void OnaddGroupOperationCompleted(object arg) {
            if ((this.addGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addGroupCompleted(this, new addGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("groups")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("group", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Group[] getGroups([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] getGroupsCriteria getGroupsCriteria) {
            object[] results = this.Invoke("getGroups", new object[] {
                        sessionID,
                        getGroupsCriteria});
            return ((Group[])(results[0]));
        }
        
        /// <remarks/>
        public void getGroupsAsync(long sessionID, getGroupsCriteria getGroupsCriteria) {
            this.getGroupsAsync(sessionID, getGroupsCriteria, null);
        }
        
        /// <remarks/>
        public void getGroupsAsync(long sessionID, getGroupsCriteria getGroupsCriteria, object userState) {
            if ((this.getGroupsOperationCompleted == null)) {
                this.getGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetGroupsOperationCompleted);
            }
            this.InvokeAsync("getGroups", new object[] {
                        sessionID,
                        getGroupsCriteria}, this.getGroupsOperationCompleted, userState);
        }
        
        private void OngetGroupsOperationCompleted(object arg) {
            if ((this.getGroupsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getGroupsCompleted(this, new getGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string updateGroup([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int groupID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] Group group) {
            object[] results = this.Invoke("updateGroup", new object[] {
                        sessionID,
                        groupID,
                        group});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void updateGroupAsync(long sessionID, int groupID, Group group) {
            this.updateGroupAsync(sessionID, groupID, group, null);
        }
        
        /// <remarks/>
        public void updateGroupAsync(long sessionID, int groupID, Group group, object userState) {
            if ((this.updateGroupOperationCompleted == null)) {
                this.updateGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateGroupOperationCompleted);
            }
            this.InvokeAsync("updateGroup", new object[] {
                        sessionID,
                        groupID,
                        group}, this.updateGroupOperationCompleted, userState);
        }
        
        private void OnupdateGroupOperationCompleted(object arg) {
            if ((this.updateGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateGroupCompleted(this, new updateGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string deleteGroup([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int groupID) {
            object[] results = this.Invoke("deleteGroup", new object[] {
                        sessionID,
                        groupID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void deleteGroupAsync(long sessionID, int groupID) {
            this.deleteGroupAsync(sessionID, groupID, null);
        }
        
        /// <remarks/>
        public void deleteGroupAsync(long sessionID, int groupID, object userState) {
            if ((this.deleteGroupOperationCompleted == null)) {
                this.deleteGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteGroupOperationCompleted);
            }
            this.InvokeAsync("deleteGroup", new object[] {
                        sessionID,
                        groupID}, this.deleteGroupOperationCompleted, userState);
        }
        
        private void OndeleteGroupOperationCompleted(object arg) {
            if ((this.deleteGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteGroupCompleted(this, new deleteGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("triggers")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("trigger", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Trigger[] getTriggers([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] getTriggersCriteria getTriggersCriteria) {
            object[] results = this.Invoke("getTriggers", new object[] {
                        sessionID,
                        getTriggersCriteria});
            return ((Trigger[])(results[0]));
        }
        
        /// <remarks/>
        public void getTriggersAsync(long sessionID, getTriggersCriteria getTriggersCriteria) {
            this.getTriggersAsync(sessionID, getTriggersCriteria, null);
        }
        
        /// <remarks/>
        public void getTriggersAsync(long sessionID, getTriggersCriteria getTriggersCriteria, object userState) {
            if ((this.getTriggersOperationCompleted == null)) {
                this.getTriggersOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTriggersOperationCompleted);
            }
            this.InvokeAsync("getTriggers", new object[] {
                        sessionID,
                        getTriggersCriteria}, this.getTriggersOperationCompleted, userState);
        }
        
        private void OngetTriggersOperationCompleted(object arg) {
            if ((this.getTriggersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTriggersCompleted(this, new getTriggersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string updateTrigger([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] Trigger trigger) {
            object[] results = this.Invoke("updateTrigger", new object[] {
                        sessionID,
                        trigger});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void updateTriggerAsync(long sessionID, Trigger trigger) {
            this.updateTriggerAsync(sessionID, trigger, null);
        }
        
        /// <remarks/>
        public void updateTriggerAsync(long sessionID, Trigger trigger, object userState) {
            if ((this.updateTriggerOperationCompleted == null)) {
                this.updateTriggerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateTriggerOperationCompleted);
            }
            this.InvokeAsync("updateTrigger", new object[] {
                        sessionID,
                        trigger}, this.updateTriggerOperationCompleted, userState);
        }
        
        private void OnupdateTriggerOperationCompleted(object arg) {
            if ((this.updateTriggerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateTriggerCompleted(this, new updateTriggerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string clearTrigger([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] triggerType triggerType) {
            object[] results = this.Invoke("clearTrigger", new object[] {
                        sessionID,
                        triggerType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void clearTriggerAsync(long sessionID, triggerType triggerType) {
            this.clearTriggerAsync(sessionID, triggerType, null);
        }
        
        /// <remarks/>
        public void clearTriggerAsync(long sessionID, triggerType triggerType, object userState) {
            if ((this.clearTriggerOperationCompleted == null)) {
                this.clearTriggerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnclearTriggerOperationCompleted);
            }
            this.InvokeAsync("clearTrigger", new object[] {
                        sessionID,
                        triggerType}, this.clearTriggerOperationCompleted, userState);
        }
        
        private void OnclearTriggerOperationCompleted(object arg) {
            if ((this.clearTriggerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.clearTriggerCompleted(this, new clearTriggerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string openDoor([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int doorID) {
            object[] results = this.Invoke("openDoor", new object[] {
                        sessionID,
                        doorID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void openDoorAsync(long sessionID, int doorID) {
            this.openDoorAsync(sessionID, doorID, null);
        }
        
        /// <remarks/>
        public void openDoorAsync(long sessionID, int doorID, object userState) {
            if ((this.openDoorOperationCompleted == null)) {
                this.openDoorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnopenDoorOperationCompleted);
            }
            this.InvokeAsync("openDoor", new object[] {
                        sessionID,
                        doorID}, this.openDoorOperationCompleted, userState);
        }
        
        private void OnopenDoorOperationCompleted(object arg) {
            if ((this.openDoorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.openDoorCompleted(this, new openDoorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string openRelay([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] RelayID relayID) {
            object[] results = this.Invoke("openRelay", new object[] {
                        sessionID,
                        relayID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void openRelayAsync(long sessionID, RelayID relayID) {
            this.openRelayAsync(sessionID, relayID, null);
        }
        
        /// <remarks/>
        public void openRelayAsync(long sessionID, RelayID relayID, object userState) {
            if ((this.openRelayOperationCompleted == null)) {
                this.openRelayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnopenRelayOperationCompleted);
            }
            this.InvokeAsync("openRelay", new object[] {
                        sessionID,
                        relayID}, this.openRelayOperationCompleted, userState);
        }
        
        private void OnopenRelayOperationCompleted(object arg) {
            if ((this.openRelayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.openRelayCompleted(this, new openRelayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string closeRelay([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] RelayID relayID) {
            object[] results = this.Invoke("closeRelay", new object[] {
                        sessionID,
                        relayID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void closeRelayAsync(long sessionID, RelayID relayID) {
            this.closeRelayAsync(sessionID, relayID, null);
        }
        
        /// <remarks/>
        public void closeRelayAsync(long sessionID, RelayID relayID, object userState) {
            if ((this.closeRelayOperationCompleted == null)) {
                this.closeRelayOperationCompleted = new System.Threading.SendOrPostCallback(this.OncloseRelayOperationCompleted);
            }
            this.InvokeAsync("closeRelay", new object[] {
                        sessionID,
                        relayID}, this.closeRelayOperationCompleted, userState);
        }
        
        private void OncloseRelayOperationCompleted(object arg) {
            if ((this.closeRelayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.closeRelayCompleted(this, new closeRelayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string registerAgent([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] string ip, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int port, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] string agentVersion, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] string magic, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] string registrationID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool initSync) {
            object[] results = this.Invoke("registerAgent", new object[] {
                        sessionID,
                        ip,
                        port,
                        agentVersion,
                        magic,
                        registrationID,
                        initSync});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void registerAgentAsync(long sessionID, string ip, int port, string agentVersion, string magic, string registrationID, bool initSync) {
            this.registerAgentAsync(sessionID, ip, port, agentVersion, magic, registrationID, initSync, null);
        }
        
        /// <remarks/>
        public void registerAgentAsync(long sessionID, string ip, int port, string agentVersion, string magic, string registrationID, bool initSync, object userState) {
            if ((this.registerAgentOperationCompleted == null)) {
                this.registerAgentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnregisterAgentOperationCompleted);
            }
            this.InvokeAsync("registerAgent", new object[] {
                        sessionID,
                        ip,
                        port,
                        agentVersion,
                        magic,
                        registrationID,
                        initSync}, this.registerAgentOperationCompleted, userState);
        }
        
        private void OnregisterAgentOperationCompleted(object arg) {
            if ((this.registerAgentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.registerAgentCompleted(this, new registerAgentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string unregisterAgent([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] string ip, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int port) {
            object[] results = this.Invoke("unregisterAgent", new object[] {
                        sessionID,
                        ip,
                        port});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void unregisterAgentAsync(long sessionID, string ip, int port) {
            this.unregisterAgentAsync(sessionID, ip, port, null);
        }
        
        /// <remarks/>
        public void unregisterAgentAsync(long sessionID, string ip, int port, object userState) {
            if ((this.unregisterAgentOperationCompleted == null)) {
                this.unregisterAgentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnunregisterAgentOperationCompleted);
            }
            this.InvokeAsync("unregisterAgent", new object[] {
                        sessionID,
                        ip,
                        port}, this.unregisterAgentOperationCompleted, userState);
        }
        
        private void OnunregisterAgentOperationCompleted(object arg) {
            if ((this.unregisterAgentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.unregisterAgentCompleted(this, new unregisterAgentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("version")]
        public string getAPIVersion() {
            object[] results = this.Invoke("getAPIVersion", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getAPIVersionAsync() {
            this.getAPIVersionAsync(null);
        }
        
        /// <remarks/>
        public void getAPIVersionAsync(object userState) {
            if ((this.getAPIVersionOperationCompleted == null)) {
                this.getAPIVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAPIVersionOperationCompleted);
            }
            this.InvokeAsync("getAPIVersion", new object[0], this.getAPIVersionOperationCompleted, userState);
        }
        
        private void OngetAPIVersionOperationCompleted(object arg) {
            if ((this.getAPIVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAPIVersionCompleted(this, new getAPIVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("terminalStatus")]
        public TerminalStatus getTerminalStatus([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID) {
            object[] results = this.Invoke("getTerminalStatus", new object[] {
                        sessionID});
            return ((TerminalStatus)(results[0]));
        }
        
        /// <remarks/>
        public void getTerminalStatusAsync(long sessionID) {
            this.getTerminalStatusAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void getTerminalStatusAsync(long sessionID, object userState) {
            if ((this.getTerminalStatusOperationCompleted == null)) {
                this.getTerminalStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTerminalStatusOperationCompleted);
            }
            this.InvokeAsync("getTerminalStatus", new object[] {
                        sessionID}, this.getTerminalStatusOperationCompleted, userState);
        }
        
        private void OngetTerminalStatusOperationCompleted(object arg) {
            if ((this.getTerminalStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTerminalStatusCompleted(this, new getTerminalStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("terminalList")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("terminal", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Terminal[] getTerminalList([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID) {
            object[] results = this.Invoke("getTerminalList", new object[] {
                        sessionID});
            return ((Terminal[])(results[0]));
        }
        
        /// <remarks/>
        public void getTerminalListAsync(long sessionID) {
            this.getTerminalListAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void getTerminalListAsync(long sessionID, object userState) {
            if ((this.getTerminalListOperationCompleted == null)) {
                this.getTerminalListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTerminalListOperationCompleted);
            }
            this.InvokeAsync("getTerminalList", new object[] {
                        sessionID}, this.getTerminalListOperationCompleted, userState);
        }
        
        private void OngetTerminalListOperationCompleted(object arg) {
            if ((this.getTerminalListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTerminalListCompleted(this, new getTerminalListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("nopConstant")]
        public string nop([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID) {
            object[] results = this.Invoke("nop", new object[] {
                        sessionID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void nopAsync(long sessionID) {
            this.nopAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void nopAsync(long sessionID, object userState) {
            if ((this.nopOperationCompleted == null)) {
                this.nopOperationCompleted = new System.Threading.SendOrPostCallback(this.OnnopOperationCompleted);
            }
            this.InvokeAsync("nop", new object[] {
                        sessionID}, this.nopOperationCompleted, userState);
        }
        
        private void OnnopOperationCompleted(object arg) {
            if ((this.nopCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.nopCompleted(this, new nopCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("jpegPhoto", DataType="base64Binary")]
        public byte[] getLogPhoto([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] string terminalSN, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime timestamp) {
            object[] results = this.Invoke("getLogPhoto", new object[] {
                        sessionID,
                        terminalSN,
                        timestamp});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getLogPhotoAsync(long sessionID, string terminalSN, System.DateTime timestamp) {
            this.getLogPhotoAsync(sessionID, terminalSN, timestamp, null);
        }
        
        /// <remarks/>
        public void getLogPhotoAsync(long sessionID, string terminalSN, System.DateTime timestamp, object userState) {
            if ((this.getLogPhotoOperationCompleted == null)) {
                this.getLogPhotoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLogPhotoOperationCompleted);
            }
            this.InvokeAsync("getLogPhoto", new object[] {
                        sessionID,
                        terminalSN,
                        timestamp}, this.getLogPhotoOperationCompleted, userState);
        }
        
        private void OngetLogPhotoOperationCompleted(object arg) {
            if ((this.getLogPhotoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLogPhotoCompleted(this, new getLogPhotoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("fingerprint")]
        public Fingerprint registerFPUser([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] string userID, out string status) {
            object[] results = this.Invoke("registerFPUser", new object[] {
                        sessionID,
                        userID});
            status = ((string)(results[1]));
            return ((Fingerprint)(results[0]));
        }
        
        /// <remarks/>
        public void registerFPUserAsync(long sessionID, string userID) {
            this.registerFPUserAsync(sessionID, userID, null);
        }
        
        /// <remarks/>
        public void registerFPUserAsync(long sessionID, string userID, object userState) {
            if ((this.registerFPUserOperationCompleted == null)) {
                this.registerFPUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnregisterFPUserOperationCompleted);
            }
            this.InvokeAsync("registerFPUser", new object[] {
                        sessionID,
                        userID}, this.registerFPUserOperationCompleted, userState);
        }
        
        private void OnregisterFPUserOperationCompleted(object arg) {
            if ((this.registerFPUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.registerFPUserCompleted(this, new registerFPUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("detailLogs", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("logDetail", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LogDetail[] getFullLogs([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] getLogsCriteria getLogsCriteria, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] System.Nullable<int> limit, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool limitSpecified) {
            object[] results = this.Invoke("getFullLogs", new object[] {
                        sessionID,
                        getLogsCriteria,
                        limit,
                        limitSpecified});
            return ((LogDetail[])(results[0]));
        }
        
        /// <remarks/>
        public void getFullLogsAsync(long sessionID, getLogsCriteria getLogsCriteria, System.Nullable<int> limit, bool limitSpecified) {
            this.getFullLogsAsync(sessionID, getLogsCriteria, limit, limitSpecified, null);
        }
        
        /// <remarks/>
        public void getFullLogsAsync(long sessionID, getLogsCriteria getLogsCriteria, System.Nullable<int> limit, bool limitSpecified, object userState) {
            if ((this.getFullLogsOperationCompleted == null)) {
                this.getFullLogsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFullLogsOperationCompleted);
            }
            this.InvokeAsync("getFullLogs", new object[] {
                        sessionID,
                        getLogsCriteria,
                        limit,
                        limitSpecified}, this.getFullLogsOperationCompleted, userState);
        }
        
        private void OngetFullLogsOperationCompleted(object arg) {
            if ((this.getFullLogsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFullLogsCompleted(this, new getFullLogsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string resetLog([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID) {
            object[] results = this.Invoke("resetLog", new object[] {
                        sessionID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void resetLogAsync(long sessionID) {
            this.resetLogAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void resetLogAsync(long sessionID, object userState) {
            if ((this.resetLogOperationCompleted == null)) {
                this.resetLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnresetLogOperationCompleted);
            }
            this.InvokeAsync("resetLog", new object[] {
                        sessionID}, this.resetLogOperationCompleted, userState);
        }
        
        private void OnresetLogOperationCompleted(object arg) {
            if ((this.resetLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.resetLogCompleted(this, new resetLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("fpSecurityLevel")]
        public FingerprintSecurityLevel getFpSecurityLevel([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID) {
            object[] results = this.Invoke("getFpSecurityLevel", new object[] {
                        sessionID});
            return ((FingerprintSecurityLevel)(results[0]));
        }
        
        /// <remarks/>
        public void getFpSecurityLevelAsync(long sessionID) {
            this.getFpSecurityLevelAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void getFpSecurityLevelAsync(long sessionID, object userState) {
            if ((this.getFpSecurityLevelOperationCompleted == null)) {
                this.getFpSecurityLevelOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFpSecurityLevelOperationCompleted);
            }
            this.InvokeAsync("getFpSecurityLevel", new object[] {
                        sessionID}, this.getFpSecurityLevelOperationCompleted, userState);
        }
        
        private void OngetFpSecurityLevelOperationCompleted(object arg) {
            if ((this.getFpSecurityLevelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFpSecurityLevelCompleted(this, new getFpSecurityLevelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string setFpSecurityLevel([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, FingerprintSecurityLevel fpSecurityLevel) {
            object[] results = this.Invoke("setFpSecurityLevel", new object[] {
                        sessionID,
                        fpSecurityLevel});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void setFpSecurityLevelAsync(long sessionID, FingerprintSecurityLevel fpSecurityLevel) {
            this.setFpSecurityLevelAsync(sessionID, fpSecurityLevel, null);
        }
        
        /// <remarks/>
        public void setFpSecurityLevelAsync(long sessionID, FingerprintSecurityLevel fpSecurityLevel, object userState) {
            if ((this.setFpSecurityLevelOperationCompleted == null)) {
                this.setFpSecurityLevelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetFpSecurityLevelOperationCompleted);
            }
            this.InvokeAsync("setFpSecurityLevel", new object[] {
                        sessionID,
                        fpSecurityLevel}, this.setFpSecurityLevelOperationCompleted, userState);
        }
        
        private void OnsetFpSecurityLevelOperationCompleted(object arg) {
            if ((this.setFpSecurityLevelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setFpSecurityLevelCompleted(this, new setFpSecurityLevelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("sec")]
        public int getRelayDelay([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] RelayID relayID) {
            object[] results = this.Invoke("getRelayDelay", new object[] {
                        sessionID,
                        relayID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void getRelayDelayAsync(long sessionID, RelayID relayID) {
            this.getRelayDelayAsync(sessionID, relayID, null);
        }
        
        /// <remarks/>
        public void getRelayDelayAsync(long sessionID, RelayID relayID, object userState) {
            if ((this.getRelayDelayOperationCompleted == null)) {
                this.getRelayDelayOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetRelayDelayOperationCompleted);
            }
            this.InvokeAsync("getRelayDelay", new object[] {
                        sessionID,
                        relayID}, this.getRelayDelayOperationCompleted, userState);
        }
        
        private void OngetRelayDelayOperationCompleted(object arg) {
            if ((this.getRelayDelayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getRelayDelayCompleted(this, new getRelayDelayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string setRelayDelay([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] RelayID relayID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int sec) {
            object[] results = this.Invoke("setRelayDelay", new object[] {
                        sessionID,
                        relayID,
                        sec});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void setRelayDelayAsync(long sessionID, RelayID relayID, int sec) {
            this.setRelayDelayAsync(sessionID, relayID, sec, null);
        }
        
        /// <remarks/>
        public void setRelayDelayAsync(long sessionID, RelayID relayID, int sec, object userState) {
            if ((this.setRelayDelayOperationCompleted == null)) {
                this.setRelayDelayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetRelayDelayOperationCompleted);
            }
            this.InvokeAsync("setRelayDelay", new object[] {
                        sessionID,
                        relayID,
                        sec}, this.setRelayDelayOperationCompleted, userState);
        }
        
        private void OnsetRelayDelayOperationCompleted(object arg) {
            if ((this.setRelayDelayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setRelayDelayCompleted(this, new setRelayDelayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("auto-in-out-option")]
        public AutoInOutOption getAutoInOut([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID) {
            object[] results = this.Invoke("getAutoInOut", new object[] {
                        sessionID});
            return ((AutoInOutOption)(results[0]));
        }
        
        /// <remarks/>
        public void getAutoInOutAsync(long sessionID) {
            this.getAutoInOutAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void getAutoInOutAsync(long sessionID, object userState) {
            if ((this.getAutoInOutOperationCompleted == null)) {
                this.getAutoInOutOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAutoInOutOperationCompleted);
            }
            this.InvokeAsync("getAutoInOut", new object[] {
                        sessionID}, this.getAutoInOutOperationCompleted, userState);
        }
        
        private void OngetAutoInOutOperationCompleted(object arg) {
            if ((this.getAutoInOutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAutoInOutCompleted(this, new getAutoInOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string setAutoInOut([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute("auto-in-out-option")] AutoInOutOption autoinoutoption) {
            object[] results = this.Invoke("setAutoInOut", new object[] {
                        sessionID,
                        autoinoutoption});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void setAutoInOutAsync(long sessionID, AutoInOutOption autoinoutoption) {
            this.setAutoInOutAsync(sessionID, autoinoutoption, null);
        }
        
        /// <remarks/>
        public void setAutoInOutAsync(long sessionID, AutoInOutOption autoinoutoption, object userState) {
            if ((this.setAutoInOutOperationCompleted == null)) {
                this.setAutoInOutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetAutoInOutOperationCompleted);
            }
            this.InvokeAsync("setAutoInOut", new object[] {
                        sessionID,
                        autoinoutoption}, this.setAutoInOutOperationCompleted, userState);
        }
        
        private void OnsetAutoInOutOperationCompleted(object arg) {
            if ((this.setAutoInOutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setAutoInOutCompleted(this, new setAutoInOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("enable")]
        public bool getLogUnauthorizedEvent([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID) {
            object[] results = this.Invoke("getLogUnauthorizedEvent", new object[] {
                        sessionID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void getLogUnauthorizedEventAsync(long sessionID) {
            this.getLogUnauthorizedEventAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void getLogUnauthorizedEventAsync(long sessionID, object userState) {
            if ((this.getLogUnauthorizedEventOperationCompleted == null)) {
                this.getLogUnauthorizedEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLogUnauthorizedEventOperationCompleted);
            }
            this.InvokeAsync("getLogUnauthorizedEvent", new object[] {
                        sessionID}, this.getLogUnauthorizedEventOperationCompleted, userState);
        }
        
        private void OngetLogUnauthorizedEventOperationCompleted(object arg) {
            if ((this.getLogUnauthorizedEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLogUnauthorizedEventCompleted(this, new getLogUnauthorizedEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string setLogUnauthorizedEvent([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, bool enable) {
            object[] results = this.Invoke("setLogUnauthorizedEvent", new object[] {
                        sessionID,
                        enable});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void setLogUnauthorizedEventAsync(long sessionID, bool enable) {
            this.setLogUnauthorizedEventAsync(sessionID, enable, null);
        }
        
        /// <remarks/>
        public void setLogUnauthorizedEventAsync(long sessionID, bool enable, object userState) {
            if ((this.setLogUnauthorizedEventOperationCompleted == null)) {
                this.setLogUnauthorizedEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetLogUnauthorizedEventOperationCompleted);
            }
            this.InvokeAsync("setLogUnauthorizedEvent", new object[] {
                        sessionID,
                        enable}, this.setLogUnauthorizedEventOperationCompleted, userState);
        }
        
        private void OnsetLogUnauthorizedEventOperationCompleted(object arg) {
            if ((this.setLogUnauthorizedEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setLogUnauthorizedEventCompleted(this, new setLogUnauthorizedEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string setRelayOption([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] RelayID relayID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] RelayOption relayOpt) {
            object[] results = this.Invoke("setRelayOption", new object[] {
                        sessionID,
                        relayID,
                        relayOpt});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void setRelayOptionAsync(long sessionID, RelayID relayID, RelayOption relayOpt) {
            this.setRelayOptionAsync(sessionID, relayID, relayOpt, null);
        }
        
        /// <remarks/>
        public void setRelayOptionAsync(long sessionID, RelayID relayID, RelayOption relayOpt, object userState) {
            if ((this.setRelayOptionOperationCompleted == null)) {
                this.setRelayOptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetRelayOptionOperationCompleted);
            }
            this.InvokeAsync("setRelayOption", new object[] {
                        sessionID,
                        relayID,
                        relayOpt}, this.setRelayOptionOperationCompleted, userState);
        }
        
        private void OnsetRelayOptionOperationCompleted(object arg) {
            if ((this.setRelayOptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setRelayOptionCompleted(this, new setRelayOptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getRelayOption([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] RelayID relayID, out RelayOption relayOpt, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool relayOptSpecified) {
            object[] results = this.Invoke("getRelayOption", new object[] {
                        sessionID,
                        relayID});
            relayOpt = ((RelayOption)(results[0]));
            relayOptSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void getRelayOptionAsync(long sessionID, RelayID relayID) {
            this.getRelayOptionAsync(sessionID, relayID, null);
        }
        
        /// <remarks/>
        public void getRelayOptionAsync(long sessionID, RelayID relayID, object userState) {
            if ((this.getRelayOptionOperationCompleted == null)) {
                this.getRelayOptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetRelayOptionOperationCompleted);
            }
            this.InvokeAsync("getRelayOption", new object[] {
                        sessionID,
                        relayID}, this.getRelayOptionOperationCompleted, userState);
        }
        
        private void OngetRelayOptionOperationCompleted(object arg) {
            if ((this.getRelayOptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getRelayOptionCompleted(this, new getRelayOptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string setSNTP([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, bool enable) {
            object[] results = this.Invoke("setSNTP", new object[] {
                        sessionID,
                        enable});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void setSNTPAsync(long sessionID, bool enable) {
            this.setSNTPAsync(sessionID, enable, null);
        }
        
        /// <remarks/>
        public void setSNTPAsync(long sessionID, bool enable, object userState) {
            if ((this.setSNTPOperationCompleted == null)) {
                this.setSNTPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetSNTPOperationCompleted);
            }
            this.InvokeAsync("setSNTP", new object[] {
                        sessionID,
                        enable}, this.setSNTPOperationCompleted, userState);
        }
        
        private void OnsetSNTPOperationCompleted(object arg) {
            if ((this.setSNTPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setSNTPCompleted(this, new setSNTPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getSNTP([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, out bool enable, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool enableSpecified) {
            object[] results = this.Invoke("getSNTP", new object[] {
                        sessionID});
            enable = ((bool)(results[0]));
            enableSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void getSNTPAsync(long sessionID) {
            this.getSNTPAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void getSNTPAsync(long sessionID, object userState) {
            if ((this.getSNTPOperationCompleted == null)) {
                this.getSNTPOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSNTPOperationCompleted);
            }
            this.InvokeAsync("getSNTP", new object[] {
                        sessionID}, this.getSNTPOperationCompleted, userState);
        }
        
        private void OngetSNTPOperationCompleted(object arg) {
            if ((this.getSNTPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSNTPCompleted(this, new getSNTPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string setSNTPServer([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, string serveraddr) {
            object[] results = this.Invoke("setSNTPServer", new object[] {
                        sessionID,
                        serveraddr});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void setSNTPServerAsync(long sessionID, string serveraddr) {
            this.setSNTPServerAsync(sessionID, serveraddr, null);
        }
        
        /// <remarks/>
        public void setSNTPServerAsync(long sessionID, string serveraddr, object userState) {
            if ((this.setSNTPServerOperationCompleted == null)) {
                this.setSNTPServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetSNTPServerOperationCompleted);
            }
            this.InvokeAsync("setSNTPServer", new object[] {
                        sessionID,
                        serveraddr}, this.setSNTPServerOperationCompleted, userState);
        }
        
        private void OnsetSNTPServerOperationCompleted(object arg) {
            if ((this.setSNTPServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setSNTPServerCompleted(this, new setSNTPServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("serveraddr")]
        public string getSNTPServer([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID) {
            object[] results = this.Invoke("getSNTPServer", new object[] {
                        sessionID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getSNTPServerAsync(long sessionID) {
            this.getSNTPServerAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void getSNTPServerAsync(long sessionID, object userState) {
            if ((this.getSNTPServerOperationCompleted == null)) {
                this.getSNTPServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSNTPServerOperationCompleted);
            }
            this.InvokeAsync("getSNTPServer", new object[] {
                        sessionID}, this.getSNTPServerOperationCompleted, userState);
        }
        
        private void OngetSNTPServerOperationCompleted(object arg) {
            if ((this.getSNTPServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSNTPServerCompleted(this, new getSNTPServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getTerminalDateTime([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] out System.Nullable<System.DateTime> terminalDate, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] [System.Xml.Serialization.XmlIgnoreAttribute()] out bool terminalDateSpecified) {
            object[] results = this.Invoke("getTerminalDateTime", new object[] {
                        sessionID});
            terminalDate = ((System.Nullable<System.DateTime>)(results[0]));
            terminalDateSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void getTerminalDateTimeAsync(long sessionID) {
            this.getTerminalDateTimeAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void getTerminalDateTimeAsync(long sessionID, object userState) {
            if ((this.getTerminalDateTimeOperationCompleted == null)) {
                this.getTerminalDateTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTerminalDateTimeOperationCompleted);
            }
            this.InvokeAsync("getTerminalDateTime", new object[] {
                        sessionID}, this.getTerminalDateTimeOperationCompleted, userState);
        }
        
        private void OngetTerminalDateTimeOperationCompleted(object arg) {
            if ((this.getTerminalDateTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTerminalDateTimeCompleted(this, new getTerminalDateTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string setTerminalDateTime([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime terminalDate) {
            object[] results = this.Invoke("setTerminalDateTime", new object[] {
                        sessionID,
                        terminalDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void setTerminalDateTimeAsync(long sessionID, System.DateTime terminalDate) {
            this.setTerminalDateTimeAsync(sessionID, terminalDate, null);
        }
        
        /// <remarks/>
        public void setTerminalDateTimeAsync(long sessionID, System.DateTime terminalDate, object userState) {
            if ((this.setTerminalDateTimeOperationCompleted == null)) {
                this.setTerminalDateTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetTerminalDateTimeOperationCompleted);
            }
            this.InvokeAsync("setTerminalDateTime", new object[] {
                        sessionID,
                        terminalDate}, this.setTerminalDateTimeOperationCompleted, userState);
        }
        
        private void OnsetTerminalDateTimeOperationCompleted(object arg) {
            if ((this.setTerminalDateTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setTerminalDateTimeCompleted(this, new setTerminalDateTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("timezone", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string getTimeZone([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID) {
            object[] results = this.Invoke("getTimeZone", new object[] {
                        sessionID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getTimeZoneAsync(long sessionID) {
            this.getTimeZoneAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void getTimeZoneAsync(long sessionID, object userState) {
            if ((this.getTimeZoneOperationCompleted == null)) {
                this.getTimeZoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTimeZoneOperationCompleted);
            }
            this.InvokeAsync("getTimeZone", new object[] {
                        sessionID}, this.getTimeZoneOperationCompleted, userState);
        }
        
        private void OngetTimeZoneOperationCompleted(object arg) {
            if ((this.getTimeZoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTimeZoneCompleted(this, new getTimeZoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string setTimeZone([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] string timezone) {
            object[] results = this.Invoke("setTimeZone", new object[] {
                        sessionID,
                        timezone});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void setTimeZoneAsync(long sessionID, string timezone) {
            this.setTimeZoneAsync(sessionID, timezone, null);
        }
        
        /// <remarks/>
        public void setTimeZoneAsync(long sessionID, string timezone, object userState) {
            if ((this.setTimeZoneOperationCompleted == null)) {
                this.setTimeZoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetTimeZoneOperationCompleted);
            }
            this.InvokeAsync("setTimeZone", new object[] {
                        sessionID,
                        timezone}, this.setTimeZoneOperationCompleted, userState);
        }
        
        private void OnsetTimeZoneOperationCompleted(object arg) {
            if ((this.setTimeZoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setTimeZoneCompleted(this, new setTimeZoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("jpegPhoto", DataType="base64Binary")]
        public byte[] getCaptureFingerprint([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID) {
            object[] results = this.Invoke("getCaptureFingerprint", new object[] {
                        sessionID});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getCaptureFingerprintAsync(long sessionID) {
            this.getCaptureFingerprintAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void getCaptureFingerprintAsync(long sessionID, object userState) {
            if ((this.getCaptureFingerprintOperationCompleted == null)) {
                this.getCaptureFingerprintOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCaptureFingerprintOperationCompleted);
            }
            this.InvokeAsync("getCaptureFingerprint", new object[] {
                        sessionID}, this.getCaptureFingerprintOperationCompleted, userState);
        }
        
        private void OngetCaptureFingerprintOperationCompleted(object arg) {
            if ((this.getCaptureFingerprintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCaptureFingerprintCompleted(this, new getCaptureFingerprintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("jpegPhoto", DataType="base64Binary")]
        public byte[] initCaptureFP([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, out string status) {
            object[] results = this.Invoke("initCaptureFP", new object[] {
                        sessionID});
            status = ((string)(results[1]));
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void initCaptureFPAsync(long sessionID) {
            this.initCaptureFPAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void initCaptureFPAsync(long sessionID, object userState) {
            if ((this.initCaptureFPOperationCompleted == null)) {
                this.initCaptureFPOperationCompleted = new System.Threading.SendOrPostCallback(this.OninitCaptureFPOperationCompleted);
            }
            this.InvokeAsync("initCaptureFP", new object[] {
                        sessionID}, this.initCaptureFPOperationCompleted, userState);
        }
        
        private void OninitCaptureFPOperationCompleted(object arg) {
            if ((this.initCaptureFPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.initCaptureFPCompleted(this, new initCaptureFPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string @lock([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] string deviceNodeDbId) {
            object[] results = this.Invoke("lock", new object[] {
                        sessionID,
                        deviceNodeDbId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void lockAsync(long sessionID, string deviceNodeDbId) {
            this.lockAsync(sessionID, deviceNodeDbId, null);
        }
        
        /// <remarks/>
        public void lockAsync(long sessionID, string deviceNodeDbId, object userState) {
            if ((this.lockOperationCompleted == null)) {
                this.lockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlockOperationCompleted);
            }
            this.InvokeAsync("lock", new object[] {
                        sessionID,
                        deviceNodeDbId}, this.lockOperationCompleted, userState);
        }
        
        private void OnlockOperationCompleted(object arg) {
            if ((this.lockCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.lockCompleted(this, new lockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string unlock([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] string deviceNodeDbId) {
            object[] results = this.Invoke("unlock", new object[] {
                        sessionID,
                        deviceNodeDbId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void unlockAsync(long sessionID, string deviceNodeDbId) {
            this.unlockAsync(sessionID, deviceNodeDbId, null);
        }
        
        /// <remarks/>
        public void unlockAsync(long sessionID, string deviceNodeDbId, object userState) {
            if ((this.unlockOperationCompleted == null)) {
                this.unlockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnunlockOperationCompleted);
            }
            this.InvokeAsync("unlock", new object[] {
                        sessionID,
                        deviceNodeDbId}, this.unlockOperationCompleted, userState);
        }
        
        private void OnunlockOperationCompleted(object arg) {
            if ((this.unlockCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.unlockCompleted(this, new unlockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("systemData", DataType="base64Binary")]
        public byte[] systemBackup([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID) {
            object[] results = this.Invoke("systemBackup", new object[] {
                        sessionID});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void systemBackupAsync(long sessionID) {
            this.systemBackupAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void systemBackupAsync(long sessionID, object userState) {
            if ((this.systemBackupOperationCompleted == null)) {
                this.systemBackupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsystemBackupOperationCompleted);
            }
            this.InvokeAsync("systemBackup", new object[] {
                        sessionID}, this.systemBackupOperationCompleted, userState);
        }
        
        private void OnsystemBackupOperationCompleted(object arg) {
            if ((this.systemBackupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.systemBackupCompleted(this, new systemBackupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string systemRestore([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] systemData) {
            object[] results = this.Invoke("systemRestore", new object[] {
                        sessionID,
                        systemData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void systemRestoreAsync(long sessionID, byte[] systemData) {
            this.systemRestoreAsync(sessionID, systemData, null);
        }
        
        /// <remarks/>
        public void systemRestoreAsync(long sessionID, byte[] systemData, object userState) {
            if ((this.systemRestoreOperationCompleted == null)) {
                this.systemRestoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsystemRestoreOperationCompleted);
            }
            this.InvokeAsync("systemRestore", new object[] {
                        sessionID,
                        systemData}, this.systemRestoreOperationCompleted, userState);
        }
        
        private void OnsystemRestoreOperationCompleted(object arg) {
            if ((this.systemRestoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.systemRestoreCompleted(this, new systemRestoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string getUsersDb([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID) {
            object[] results = this.Invoke("getUsersDb", new object[] {
                        sessionID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getUsersDbAsync(long sessionID) {
            this.getUsersDbAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void getUsersDbAsync(long sessionID, object userState) {
            if ((this.getUsersDbOperationCompleted == null)) {
                this.getUsersDbOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUsersDbOperationCompleted);
            }
            this.InvokeAsync("getUsersDb", new object[] {
                        sessionID}, this.getUsersDbOperationCompleted, userState);
        }
        
        private void OngetUsersDbOperationCompleted(object arg) {
            if ((this.getUsersDbCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUsersDbCompleted(this, new getUsersDbCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string deleteLogs([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int daysToKeep) {
            object[] results = this.Invoke("deleteLogs", new object[] {
                        sessionID,
                        daysToKeep});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void deleteLogsAsync(long sessionID, int daysToKeep) {
            this.deleteLogsAsync(sessionID, daysToKeep, null);
        }
        
        /// <remarks/>
        public void deleteLogsAsync(long sessionID, int daysToKeep, object userState) {
            if ((this.deleteLogsOperationCompleted == null)) {
                this.deleteLogsOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteLogsOperationCompleted);
            }
            this.InvokeAsync("deleteLogs", new object[] {
                        sessionID,
                        daysToKeep}, this.deleteLogsOperationCompleted, userState);
        }
        
        private void OndeleteLogsOperationCompleted(object arg) {
            if ((this.deleteLogsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteLogsCompleted(this, new deleteLogsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("filesize", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string RemoteBackupStart([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID) {
            object[] results = this.Invoke("RemoteBackupStart", new object[] {
                        sessionID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RemoteBackupStartAsync(long sessionID) {
            this.RemoteBackupStartAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void RemoteBackupStartAsync(long sessionID, object userState) {
            if ((this.RemoteBackupStartOperationCompleted == null)) {
                this.RemoteBackupStartOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoteBackupStartOperationCompleted);
            }
            this.InvokeAsync("RemoteBackupStart", new object[] {
                        sessionID}, this.RemoteBackupStartOperationCompleted, userState);
        }
        
        private void OnRemoteBackupStartOperationCompleted(object arg) {
            if ((this.RemoteBackupStartCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoteBackupStartCompleted(this, new RemoteBackupStartCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("systemData", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary", IsNullable=true)]
        public byte[] GetChunk([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] string filename, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int chunkoffset, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int chunksize) {
            object[] results = this.Invoke("GetChunk", new object[] {
                        sessionID,
                        filename,
                        chunkoffset,
                        chunksize});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetChunkAsync(long sessionID, string filename, int chunkoffset, int chunksize) {
            this.GetChunkAsync(sessionID, filename, chunkoffset, chunksize, null);
        }
        
        /// <remarks/>
        public void GetChunkAsync(long sessionID, string filename, int chunkoffset, int chunksize, object userState) {
            if ((this.GetChunkOperationCompleted == null)) {
                this.GetChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChunkOperationCompleted);
            }
            this.InvokeAsync("GetChunk", new object[] {
                        sessionID,
                        filename,
                        chunkoffset,
                        chunksize}, this.GetChunkOperationCompleted, userState);
        }
        
        private void OnGetChunkOperationCompleted(object arg) {
            if ((this.GetChunkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChunkCompleted(this, new GetChunkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string RemoteBackupEnd([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID) {
            object[] results = this.Invoke("RemoteBackupEnd", new object[] {
                        sessionID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RemoteBackupEndAsync(long sessionID) {
            this.RemoteBackupEndAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void RemoteBackupEndAsync(long sessionID, object userState) {
            if ((this.RemoteBackupEndOperationCompleted == null)) {
                this.RemoteBackupEndOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoteBackupEndOperationCompleted);
            }
            this.InvokeAsync("RemoteBackupEnd", new object[] {
                        sessionID}, this.RemoteBackupEndOperationCompleted, userState);
        }
        
        private void OnRemoteBackupEndOperationCompleted(object arg) {
            if ((this.RemoteBackupEndCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoteBackupEndCompleted(this, new RemoteBackupEndCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("termstatus", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public TerminalStatus2 RemoteRestoreCheck([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID) {
            object[] results = this.Invoke("RemoteRestoreCheck", new object[] {
                        sessionID});
            return ((TerminalStatus2)(results[0]));
        }
        
        /// <remarks/>
        public void RemoteRestoreCheckAsync(long sessionID) {
            this.RemoteRestoreCheckAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void RemoteRestoreCheckAsync(long sessionID, object userState) {
            if ((this.RemoteRestoreCheckOperationCompleted == null)) {
                this.RemoteRestoreCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoteRestoreCheckOperationCompleted);
            }
            this.InvokeAsync("RemoteRestoreCheck", new object[] {
                        sessionID}, this.RemoteRestoreCheckOperationCompleted, userState);
        }
        
        private void OnRemoteRestoreCheckOperationCompleted(object arg) {
            if ((this.RemoteRestoreCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoteRestoreCheckCompleted(this, new RemoteRestoreCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string RemoteRestoreStart([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID) {
            object[] results = this.Invoke("RemoteRestoreStart", new object[] {
                        sessionID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RemoteRestoreStartAsync(long sessionID) {
            this.RemoteRestoreStartAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void RemoteRestoreStartAsync(long sessionID, object userState) {
            if ((this.RemoteRestoreStartOperationCompleted == null)) {
                this.RemoteRestoreStartOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoteRestoreStartOperationCompleted);
            }
            this.InvokeAsync("RemoteRestoreStart", new object[] {
                        sessionID}, this.RemoteRestoreStartOperationCompleted, userState);
        }
        
        private void OnRemoteRestoreStartOperationCompleted(object arg) {
            if ((this.RemoteRestoreStartCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoteRestoreStartCompleted(this, new RemoteRestoreStartCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string SendChunk([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] string filename, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int chunkoffset, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary")] byte[] systemData) {
            object[] results = this.Invoke("SendChunk", new object[] {
                        sessionID,
                        filename,
                        chunkoffset,
                        systemData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendChunkAsync(long sessionID, string filename, int chunkoffset, byte[] systemData) {
            this.SendChunkAsync(sessionID, filename, chunkoffset, systemData, null);
        }
        
        /// <remarks/>
        public void SendChunkAsync(long sessionID, string filename, int chunkoffset, byte[] systemData, object userState) {
            if ((this.SendChunkOperationCompleted == null)) {
                this.SendChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendChunkOperationCompleted);
            }
            this.InvokeAsync("SendChunk", new object[] {
                        sessionID,
                        filename,
                        chunkoffset,
                        systemData}, this.SendChunkOperationCompleted, userState);
        }
        
        private void OnSendChunkOperationCompleted(object arg) {
            if ((this.SendChunkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendChunkCompleted(this, new SendChunkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string RemoteRestoreEnd([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long dbsize, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long othersize) {
            object[] results = this.Invoke("RemoteRestoreEnd", new object[] {
                        sessionID,
                        dbsize,
                        othersize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RemoteRestoreEndAsync(long sessionID, long dbsize, long othersize) {
            this.RemoteRestoreEndAsync(sessionID, dbsize, othersize, null);
        }
        
        /// <remarks/>
        public void RemoteRestoreEndAsync(long sessionID, long dbsize, long othersize, object userState) {
            if ((this.RemoteRestoreEndOperationCompleted == null)) {
                this.RemoteRestoreEndOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoteRestoreEndOperationCompleted);
            }
            this.InvokeAsync("RemoteRestoreEnd", new object[] {
                        sessionID,
                        dbsize,
                        othersize}, this.RemoteRestoreEndOperationCompleted, userState);
        }
        
        private void OnRemoteRestoreEndOperationCompleted(object arg) {
            if ((this.RemoteRestoreEndCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoteRestoreEndCompleted(this, new RemoteRestoreEndCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string CancelRestore([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID) {
            object[] results = this.Invoke("CancelRestore", new object[] {
                        sessionID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CancelRestoreAsync(long sessionID) {
            this.CancelRestoreAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void CancelRestoreAsync(long sessionID, object userState) {
            if ((this.CancelRestoreOperationCompleted == null)) {
                this.CancelRestoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelRestoreOperationCompleted);
            }
            this.InvokeAsync("CancelRestore", new object[] {
                        sessionID}, this.CancelRestoreOperationCompleted, userState);
        }
        
        private void OnCancelRestoreOperationCompleted(object arg) {
            if ((this.CancelRestoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelRestoreCompleted(this, new CancelRestoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("uids", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public userID[] addUsers([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute("user", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] User[] users) {
            object[] results = this.Invoke("addUsers", new object[] {
                        sessionID,
                        users});
            return ((userID[])(results[0]));
        }
        
        /// <remarks/>
        public void addUsersAsync(long sessionID, User[] users) {
            this.addUsersAsync(sessionID, users, null);
        }
        
        /// <remarks/>
        public void addUsersAsync(long sessionID, User[] users, object userState) {
            if ((this.addUsersOperationCompleted == null)) {
                this.addUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddUsersOperationCompleted);
            }
            this.InvokeAsync("addUsers", new object[] {
                        sessionID,
                        users}, this.addUsersOperationCompleted, userState);
        }
        
        private void OnaddUsersOperationCompleted(object arg) {
            if ((this.addUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addUsersCompleted(this, new addUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string updateUsers([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] userID[] uids, [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute("user", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] User[] users) {
            object[] results = this.Invoke("updateUsers", new object[] {
                        sessionID,
                        uids,
                        users});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void updateUsersAsync(long sessionID, userID[] uids, User[] users) {
            this.updateUsersAsync(sessionID, uids, users, null);
        }
        
        /// <remarks/>
        public void updateUsersAsync(long sessionID, userID[] uids, User[] users, object userState) {
            if ((this.updateUsersOperationCompleted == null)) {
                this.updateUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateUsersOperationCompleted);
            }
            this.InvokeAsync("updateUsers", new object[] {
                        sessionID,
                        uids,
                        users}, this.updateUsersOperationCompleted, userState);
        }
        
        private void OnupdateUsersOperationCompleted(object arg) {
            if ((this.updateUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateUsersCompleted(this, new updateUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("jobcodesettings", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("jobcodesettings", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public JobCodeSettings[] getJobCodeSettings([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID) {
            object[] results = this.Invoke("getJobCodeSettings", new object[] {
                        sessionID});
            return ((JobCodeSettings[])(results[0]));
        }
        
        /// <remarks/>
        public void getJobCodeSettingsAsync(long sessionID) {
            this.getJobCodeSettingsAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void getJobCodeSettingsAsync(long sessionID, object userState) {
            if ((this.getJobCodeSettingsOperationCompleted == null)) {
                this.getJobCodeSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetJobCodeSettingsOperationCompleted);
            }
            this.InvokeAsync("getJobCodeSettings", new object[] {
                        sessionID}, this.getJobCodeSettingsOperationCompleted, userState);
        }
        
        private void OngetJobCodeSettingsOperationCompleted(object arg) {
            if ((this.getJobCodeSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getJobCodeSettingsCompleted(this, new getJobCodeSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string updateJobCodeSettings([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute("jobcodesettings", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] JobCodeSettings[] jobcodesettings) {
            object[] results = this.Invoke("updateJobCodeSettings", new object[] {
                        sessionID,
                        jobcodesettings});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void updateJobCodeSettingsAsync(long sessionID, JobCodeSettings[] jobcodesettings) {
            this.updateJobCodeSettingsAsync(sessionID, jobcodesettings, null);
        }
        
        /// <remarks/>
        public void updateJobCodeSettingsAsync(long sessionID, JobCodeSettings[] jobcodesettings, object userState) {
            if ((this.updateJobCodeSettingsOperationCompleted == null)) {
                this.updateJobCodeSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateJobCodeSettingsOperationCompleted);
            }
            this.InvokeAsync("updateJobCodeSettings", new object[] {
                        sessionID,
                        jobcodesettings}, this.updateJobCodeSettingsOperationCompleted, userState);
        }
        
        private void OnupdateJobCodeSettingsOperationCompleted(object arg) {
            if ((this.updateJobCodeSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateJobCodeSettingsCompleted(this, new updateJobCodeSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string addJobCodes([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute("jobcodes", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] JobCode[] jobcodes) {
            object[] results = this.Invoke("addJobCodes", new object[] {
                        sessionID,
                        jobcodes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addJobCodesAsync(long sessionID, JobCode[] jobcodes) {
            this.addJobCodesAsync(sessionID, jobcodes, null);
        }
        
        /// <remarks/>
        public void addJobCodesAsync(long sessionID, JobCode[] jobcodes, object userState) {
            if ((this.addJobCodesOperationCompleted == null)) {
                this.addJobCodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddJobCodesOperationCompleted);
            }
            this.InvokeAsync("addJobCodes", new object[] {
                        sessionID,
                        jobcodes}, this.addJobCodesOperationCompleted, userState);
        }
        
        private void OnaddJobCodesOperationCompleted(object arg) {
            if ((this.addJobCodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addJobCodesCompleted(this, new addJobCodesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string updateJobCodes([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute("jobcodes", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] JobCode[] jobcodes) {
            object[] results = this.Invoke("updateJobCodes", new object[] {
                        sessionID,
                        jobcodes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void updateJobCodesAsync(long sessionID, JobCode[] jobcodes) {
            this.updateJobCodesAsync(sessionID, jobcodes, null);
        }
        
        /// <remarks/>
        public void updateJobCodesAsync(long sessionID, JobCode[] jobcodes, object userState) {
            if ((this.updateJobCodesOperationCompleted == null)) {
                this.updateJobCodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateJobCodesOperationCompleted);
            }
            this.InvokeAsync("updateJobCodes", new object[] {
                        sessionID,
                        jobcodes}, this.updateJobCodesOperationCompleted, userState);
        }
        
        private void OnupdateJobCodesOperationCompleted(object arg) {
            if ((this.updateJobCodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateJobCodesCompleted(this, new updateJobCodesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("status", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string deleteJobCodes([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute("jobcodes", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] JobCode[] jobcodes) {
            object[] results = this.Invoke("deleteJobCodes", new object[] {
                        sessionID,
                        jobcodes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void deleteJobCodesAsync(long sessionID, JobCode[] jobcodes) {
            this.deleteJobCodesAsync(sessionID, jobcodes, null);
        }
        
        /// <remarks/>
        public void deleteJobCodesAsync(long sessionID, JobCode[] jobcodes, object userState) {
            if ((this.deleteJobCodesOperationCompleted == null)) {
                this.deleteJobCodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteJobCodesOperationCompleted);
            }
            this.InvokeAsync("deleteJobCodes", new object[] {
                        sessionID,
                        jobcodes}, this.deleteJobCodesOperationCompleted, userState);
        }
        
        private void OndeleteJobCodesOperationCompleted(object arg) {
            if ((this.deleteJobCodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteJobCodesCompleted(this, new deleteJobCodesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("jobcodes", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("jobcodes", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public JobCode[] getJobCodes([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] getJobCodeCriteria getJobCodeCriteria) {
            object[] results = this.Invoke("getJobCodes", new object[] {
                        sessionID,
                        getJobCodeCriteria});
            return ((JobCode[])(results[0]));
        }
        
        /// <remarks/>
        public void getJobCodesAsync(long sessionID, getJobCodeCriteria getJobCodeCriteria) {
            this.getJobCodesAsync(sessionID, getJobCodeCriteria, null);
        }
        
        /// <remarks/>
        public void getJobCodesAsync(long sessionID, getJobCodeCriteria getJobCodeCriteria, object userState) {
            if ((this.getJobCodesOperationCompleted == null)) {
                this.getJobCodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetJobCodesOperationCompleted);
            }
            this.InvokeAsync("getJobCodes", new object[] {
                        sessionID,
                        getJobCodeCriteria}, this.getJobCodesOperationCompleted, userState);
        }
        
        private void OngetJobCodesOperationCompleted(object arg) {
            if ((this.getJobCodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getJobCodesCompleted(this, new getJobCodesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("user-count", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int getUserCount([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID) {
            object[] results = this.Invoke("getUserCount", new object[] {
                        sessionID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void getUserCountAsync(long sessionID) {
            this.getUserCountAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void getUserCountAsync(long sessionID, object userState) {
            if ((this.getUserCountOperationCompleted == null)) {
                this.getUserCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserCountOperationCompleted);
            }
            this.InvokeAsync("getUserCount", new object[] {
                        sessionID}, this.getUserCountOperationCompleted, userState);
        }
        
        private void OngetUserCountOperationCompleted(object arg) {
            if ((this.getUserCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserCountCompleted(this, new getUserCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://www.hectrix.com/ACTAtek.xsd", ResponseNamespace="http://www.hectrix.com/ACTAtek.xsd", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("users")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("user", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public User[] getUserBatch([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long sessionID, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int offset, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int limit) {
            object[] results = this.Invoke("getUserBatch", new object[] {
                        sessionID,
                        offset,
                        limit});
            return ((User[])(results[0]));
        }
        
        /// <remarks/>
        public void getUserBatchAsync(long sessionID, int offset, int limit) {
            this.getUserBatchAsync(sessionID, offset, limit, null);
        }
        
        /// <remarks/>
        public void getUserBatchAsync(long sessionID, int offset, int limit, object userState) {
            if ((this.getUserBatchOperationCompleted == null)) {
                this.getUserBatchOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserBatchOperationCompleted);
            }
            this.InvokeAsync("getUserBatch", new object[] {
                        sessionID,
                        offset,
                        limit}, this.getUserBatchOperationCompleted, userState);
        }
        
        private void OngetUserBatchOperationCompleted(object arg) {
            if ((this.getUserBatchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserBatchCompleted(this, new getUserBatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.hectrix.com/ACTAtek.xsd")]
    public partial class Agent {
        
        private int portField;
        
        private string ipField;
        
        private System.DateTime registrationTimeField;
        
        private bool registrationTimeFieldSpecified;
        
        private System.DateTime lastUpdateField;
        
        private bool lastUpdateFieldSpecified;
        
        private System.DateTime lastCheckField;
        
        private bool lastCheckFieldSpecified;
        
        private bool lastCheckStatusField;
        
        private bool activeField;
        
        private string linkField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int port {
            get {
                return this.portField;
            }
            set {
                this.portField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string ip {
            get {
                return this.ipField;
            }
            set {
                this.ipField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime registrationTime {
            get {
                return this.registrationTimeField;
            }
            set {
                this.registrationTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool registrationTimeSpecified {
            get {
                return this.registrationTimeFieldSpecified;
            }
            set {
                this.registrationTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime lastUpdate {
            get {
                return this.lastUpdateField;
            }
            set {
                this.lastUpdateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lastUpdateSpecified {
            get {
                return this.lastUpdateFieldSpecified;
            }
            set {
                this.lastUpdateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime lastCheck {
            get {
                return this.lastCheckField;
            }
            set {
                this.lastCheckField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lastCheckSpecified {
            get {
                return this.lastCheckFieldSpecified;
            }
            set {
                this.lastCheckFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool lastCheckStatus {
            get {
                return this.lastCheckStatusField;
            }
            set {
                this.lastCheckStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool active {
            get {
                return this.activeField;
            }
            set {
                this.activeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string link {
            get {
                return this.linkField;
            }
            set {
                this.linkField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.hectrix.com/ACTAtek.xsd")]
    public partial class getJobCodeCriteria {
        
        private int jobcodeIDField;
        
        private bool jobcodeIDFieldSpecified;
        
        private string jobcodeDescriptionField;
        
        private int enableField;
        
        private bool enableFieldSpecified;
        
        private int jobcodeField;
        
        private bool jobcodeFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int jobcodeID {
            get {
                return this.jobcodeIDField;
            }
            set {
                this.jobcodeIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool jobcodeIDSpecified {
            get {
                return this.jobcodeIDFieldSpecified;
            }
            set {
                this.jobcodeIDFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string jobcodeDescription {
            get {
                return this.jobcodeDescriptionField;
            }
            set {
                this.jobcodeDescriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int enable {
            get {
                return this.enableField;
            }
            set {
                this.enableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool enableSpecified {
            get {
                return this.enableFieldSpecified;
            }
            set {
                this.enableFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int jobcode {
            get {
                return this.jobcodeField;
            }
            set {
                this.jobcodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool jobcodeSpecified {
            get {
                return this.jobcodeFieldSpecified;
            }
            set {
                this.jobcodeFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.hectrix.com/ACTAtek.xsd")]
    public partial class JobCode {
        
        private int jobCodeIDField;
        
        private string jobCodeDescriptionField;
        
        private int enableField;
        
        private int jobCodeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int JobCodeID {
            get {
                return this.jobCodeIDField;
            }
            set {
                this.jobCodeIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string JobCodeDescription {
            get {
                return this.jobCodeDescriptionField;
            }
            set {
                this.jobCodeDescriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int enable {
            get {
                return this.enableField;
            }
            set {
                this.enableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int jobCode {
            get {
                return this.jobCodeField;
            }
            set {
                this.jobCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.hectrix.com/ACTAtek.xsd")]
    public partial class JobCodeSettings {
        
        private int jobcodeField;
        
        private string jobcodeNameField;
        
        private int enableField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int jobcode {
            get {
                return this.jobcodeField;
            }
            set {
                this.jobcodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string jobcodeName {
            get {
                return this.jobcodeNameField;
            }
            set {
                this.jobcodeNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int enable {
            get {
                return this.enableField;
            }
            set {
                this.enableField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.hectrix.com/ACTAtek.xsd")]
    public partial class userID {
        
        private string userID1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("userID", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string userID1 {
            get {
                return this.userID1Field;
            }
            set {
                this.userID1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.hectrix.com/ACTAtek.xsd")]
    public partial class TerminalStatus2 {
        
        private string modelNumberField;
        
        private string serialNumberField;
        
        private string firmwareVersionField;
        
        private string fAMVersionField;
        
        private string descriptionField;
        
        private int registeredUsersField;
        
        private int maximumUsersField;
        
        private int automatchUsersField;
        
        private int maximumAutomatchUsersField;
        
        private string currentStatusField;
        
        private int actatekBoardIDField;
        
        private string dBversionField;
        
        private long flashleftField;
        
        private long dBfilesizeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string modelNumber {
            get {
                return this.modelNumberField;
            }
            set {
                this.modelNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string serialNumber {
            get {
                return this.serialNumberField;
            }
            set {
                this.serialNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string firmwareVersion {
            get {
                return this.firmwareVersionField;
            }
            set {
                this.firmwareVersionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string FAMVersion {
            get {
                return this.fAMVersionField;
            }
            set {
                this.fAMVersionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int registeredUsers {
            get {
                return this.registeredUsersField;
            }
            set {
                this.registeredUsersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int maximumUsers {
            get {
                return this.maximumUsersField;
            }
            set {
                this.maximumUsersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int automatchUsers {
            get {
                return this.automatchUsersField;
            }
            set {
                this.automatchUsersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int maximumAutomatchUsers {
            get {
                return this.maximumAutomatchUsersField;
            }
            set {
                this.maximumAutomatchUsersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string currentStatus {
            get {
                return this.currentStatusField;
            }
            set {
                this.currentStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int ActatekBoardID {
            get {
                return this.actatekBoardIDField;
            }
            set {
                this.actatekBoardIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string DBversion {
            get {
                return this.dBversionField;
            }
            set {
                this.dBversionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long Flashleft {
            get {
                return this.flashleftField;
            }
            set {
                this.flashleftField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long DBfilesize {
            get {
                return this.dBfilesizeField;
            }
            set {
                this.dBfilesizeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.hectrix.com/ACTAtek.xsd")]
    public partial class LogDetail {
        
        private long logIDField;
        
        private string userIDField;
        
        private string userNameField;
        
        private string departmentNameField;
        
        private System.DateTime timestampField;
        
        private eventType triggerField;
        
        private string terminalSNField;
        
        private string terminalNameField;
        
        private byte[] jpegPhotoField;
        
        private string remarkField;
        
        private string accessMethodField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long logID {
            get {
                return this.logIDField;
            }
            set {
                this.logIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string userID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string userName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string departmentName {
            get {
                return this.departmentNameField;
            }
            set {
                this.departmentNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime timestamp {
            get {
                return this.timestampField;
            }
            set {
                this.timestampField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public eventType trigger {
            get {
                return this.triggerField;
            }
            set {
                this.triggerField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string terminalSN {
            get {
                return this.terminalSNField;
            }
            set {
                this.terminalSNField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string terminalName {
            get {
                return this.terminalNameField;
            }
            set {
                this.terminalNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary", IsNullable=true)]
        public byte[] jpegPhoto {
            get {
                return this.jpegPhotoField;
            }
            set {
                this.jpegPhotoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string accessMethod {
            get {
                return this.accessMethodField;
            }
            set {
                this.accessMethodField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.hectrix.com/ACTAtek.xsd")]
    public enum eventType {
        
        /// <remarks/>
        UNKNOWN,
        
        /// <remarks/>
        IN,
        
        /// <remarks/>
        OUT,
        
        /// <remarks/>
        F1,
        
        /// <remarks/>
        F2,
        
        /// <remarks/>
        F3,
        
        /// <remarks/>
        F4,
        
        /// <remarks/>
        F5,
        
        /// <remarks/>
        F6,
        
        /// <remarks/>
        F7,
        
        /// <remarks/>
        F8,
        
        /// <remarks/>
        F9,
        
        /// <remarks/>
        F10,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ID-UNKNOWN")]
        IDUNKNOWN,
        
        /// <remarks/>
        REJECTED,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ID-RESERVED")]
        IDRESERVED,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("RESET-ALL")]
        RESETALL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("RESET-ACC")]
        RESETACC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("RESET-DEVICE")]
        RESETDEVICE,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("RESET-PASSWORD")]
        RESETPASSWORD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("RESET-DEFAULT")]
        RESETDEFAULT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SYSTEM-LOGIN")]
        SYSTEMLOGIN,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ADMIN-LOGIN")]
        ADMINLOGIN,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("USER-LOGIN")]
        USERLOGIN,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("NETWORK-CHANGE")]
        NETWORKCHANGE,
        
        /// <remarks/>
        PATCHED,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("BACKUP-DB")]
        BACKUPDB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("RESTORE-DB")]
        RESTOREDB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SYSTEM-RSVD")]
        SYSTEMRSVD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ENROLL-USER")]
        ENROLLUSER,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("REMOTE-DOOR-OPEN")]
        REMOTEDOOROPEN,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("REMOVE-USER")]
        REMOVEUSER,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SUSPEND-USER")]
        SUSPENDUSER,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("EDIT-EVENT")]
        EDITEVENT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("RESET-ADMIN-PW")]
        RESETADMINPW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ADMIN-RSVDIT")]
        ADMINRSVDIT,
        
        /// <remarks/>
        F11,
        
        /// <remarks/>
        F12,
        
        /// <remarks/>
        F13,
        
        /// <remarks/>
        F14,
        
        /// <remarks/>
        F15,
        
        /// <remarks/>
        F16,
        
        /// <remarks/>
        F17,
        
        /// <remarks/>
        F18,
        
        /// <remarks/>
        F19,
        
        /// <remarks/>
        F20,
        
        /// <remarks/>
        F21,
        
        /// <remarks/>
        F22,
        
        /// <remarks/>
        F23,
        
        /// <remarks/>
        F24,
        
        /// <remarks/>
        F25,
        
        /// <remarks/>
        F26,
        
        /// <remarks/>
        F27,
        
        /// <remarks/>
        F28,
        
        /// <remarks/>
        F29,
        
        /// <remarks/>
        F30,
        
        /// <remarks/>
        F31,
        
        /// <remarks/>
        F32,
        
        /// <remarks/>
        F33,
        
        /// <remarks/>
        F34,
        
        /// <remarks/>
        F35,
        
        /// <remarks/>
        F36,
        
        /// <remarks/>
        F37,
        
        /// <remarks/>
        F38,
        
        /// <remarks/>
        F39,
        
        /// <remarks/>
        F40,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SCHEDULE-DOOR-OPEN")]
        SCHEDULEDOOROPEN,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SCHEDULE-DOOR-CLOSE")]
        SCHEDULEDOORCLOSE,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SCHEDULE-BELL-ON")]
        SCHEDULEBELLON,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DOOR-IS-OPENED")]
        DOORISOPENED,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DOOR-IS-CLOSED")]
        DOORISCLOSED,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("CASE-IS-OPENED")]
        CASEISOPENED,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("CASE-IS-CLOSED")]
        CASEISCLOSED,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.hectrix.com/ACTAtek.xsd")]
    public partial class Terminal {
        
        private int terminalIDField;
        
        private string terminalTypeField;
        
        private string terminalNameField;
        
        private string terminalSNField;
        
        private string terminalIPField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int terminalID {
            get {
                return this.terminalIDField;
            }
            set {
                this.terminalIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string terminalType {
            get {
                return this.terminalTypeField;
            }
            set {
                this.terminalTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string terminalName {
            get {
                return this.terminalNameField;
            }
            set {
                this.terminalNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string terminalSN {
            get {
                return this.terminalSNField;
            }
            set {
                this.terminalSNField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string terminalIP {
            get {
                return this.terminalIPField;
            }
            set {
                this.terminalIPField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.hectrix.com/ACTAtek.xsd")]
    public partial class TerminalStatus {
        
        private string modelNumberField;
        
        private string serialNumberField;
        
        private string firmwareVersionField;
        
        private string fAMVersionField;
        
        private string descriptionField;
        
        private int registeredUsersField;
        
        private int maximumUsersField;
        
        private int automatchUsersField;
        
        private int maximumAutomatchUsersField;
        
        private string currentStatusField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string modelNumber {
            get {
                return this.modelNumberField;
            }
            set {
                this.modelNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string serialNumber {
            get {
                return this.serialNumberField;
            }
            set {
                this.serialNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string firmwareVersion {
            get {
                return this.firmwareVersionField;
            }
            set {
                this.firmwareVersionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string FAMVersion {
            get {
                return this.fAMVersionField;
            }
            set {
                this.fAMVersionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int registeredUsers {
            get {
                return this.registeredUsersField;
            }
            set {
                this.registeredUsersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int maximumUsers {
            get {
                return this.maximumUsersField;
            }
            set {
                this.maximumUsersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int automatchUsers {
            get {
                return this.automatchUsersField;
            }
            set {
                this.automatchUsersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int maximumAutomatchUsers {
            get {
                return this.maximumAutomatchUsersField;
            }
            set {
                this.maximumAutomatchUsersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string currentStatus {
            get {
                return this.currentStatusField;
            }
            set {
                this.currentStatusField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.hectrix.com/ACTAtek.xsd")]
    public partial class Trigger {
        
        private triggerType triggerTypeField;
        
        private string triggerNameField;
        
        private Timespec[] timeSpecField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public triggerType triggerType {
            get {
                return this.triggerTypeField;
            }
            set {
                this.triggerTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string triggerName {
            get {
                return this.triggerNameField;
            }
            set {
                this.triggerNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("timeSpec", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Timespec[] timeSpec {
            get {
                return this.timeSpecField;
            }
            set {
                this.timeSpecField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.hectrix.com/ACTAtek.xsd")]
    public enum triggerType {
        
        /// <remarks/>
        UNKNOWN,
        
        /// <remarks/>
        IN,
        
        /// <remarks/>
        OUT,
        
        /// <remarks/>
        F1,
        
        /// <remarks/>
        F2,
        
        /// <remarks/>
        F3,
        
        /// <remarks/>
        F4,
        
        /// <remarks/>
        F5,
        
        /// <remarks/>
        F6,
        
        /// <remarks/>
        F7,
        
        /// <remarks/>
        F8,
        
        /// <remarks/>
        F9,
        
        /// <remarks/>
        F10,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ID-UNKNOWN")]
        IDUNKNOWN,
        
        /// <remarks/>
        REJECTED,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ID-RESERVED")]
        IDRESERVED,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("RESET-ALL")]
        RESETALL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("RESET-ACC")]
        RESETACC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("RESET-DEVICE")]
        RESETDEVICE,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("RESET-PASSWORD")]
        RESETPASSWORD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("RESET-DEFAULT")]
        RESETDEFAULT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SYSTEM-LOGIN")]
        SYSTEMLOGIN,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ADMIN-LOGIN")]
        ADMINLOGIN,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("USER-LOGIN")]
        USERLOGIN,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("NETWORK-CHANGE")]
        NETWORKCHANGE,
        
        /// <remarks/>
        PATCHED,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("BACKUP-DB")]
        BACKUPDB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("RESTORE-DB")]
        RESTOREDB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SYSTEM-RSVD")]
        SYSTEMRSVD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ENROLL-USER")]
        ENROLLUSER,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("REMOTE-DOOR-OPEN")]
        REMOTEDOOROPEN,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("REMOVE-USER")]
        REMOVEUSER,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SUSPEND-USER")]
        SUSPENDUSER,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("EDIT-EVENT")]
        EDITEVENT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("RESET-ADMIN-PW")]
        RESETADMINPW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ADMIN-RSVDIT")]
        ADMINRSVDIT,
        
        /// <remarks/>
        F11,
        
        /// <remarks/>
        F12,
        
        /// <remarks/>
        F13,
        
        /// <remarks/>
        F14,
        
        /// <remarks/>
        F15,
        
        /// <remarks/>
        F16,
        
        /// <remarks/>
        F17,
        
        /// <remarks/>
        F18,
        
        /// <remarks/>
        F19,
        
        /// <remarks/>
        F20,
        
        /// <remarks/>
        F21,
        
        /// <remarks/>
        F22,
        
        /// <remarks/>
        F23,
        
        /// <remarks/>
        F24,
        
        /// <remarks/>
        F25,
        
        /// <remarks/>
        F26,
        
        /// <remarks/>
        F27,
        
        /// <remarks/>
        F28,
        
        /// <remarks/>
        F29,
        
        /// <remarks/>
        F30,
        
        /// <remarks/>
        F31,
        
        /// <remarks/>
        F32,
        
        /// <remarks/>
        F33,
        
        /// <remarks/>
        F34,
        
        /// <remarks/>
        F35,
        
        /// <remarks/>
        F36,
        
        /// <remarks/>
        F37,
        
        /// <remarks/>
        F38,
        
        /// <remarks/>
        F39,
        
        /// <remarks/>
        F40,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SCHEDULE-DOOR-OPEN")]
        SCHEDULEDOOROPEN,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SCHEDULE-DOOR-CLOSE")]
        SCHEDULEDOORCLOSE,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SCHEDULE-BELL-ON")]
        SCHEDULEBELLON,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DOOR-IS-OPENED")]
        DOORISOPENED,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DOOR-IS-CLOSED")]
        DOORISCLOSED,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("CASE-IS-OPENED")]
        CASEISOPENED,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("CASE-IS-CLOSED")]
        CASEISCLOSED,
        
        /// <remarks/>
        TRIGGEREND,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.hectrix.com/ACTAtek.xsd")]
    public partial class Timespec {
        
        private Weekday[] weekdayField;
        
        private string timePatternField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("weekday", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Weekday[] weekday {
            get {
                return this.weekdayField;
            }
            set {
                this.weekdayField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string timePattern {
            get {
                return this.timePatternField;
            }
            set {
                this.timePatternField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.hectrix.com/ACTAtek.xsd")]
    public enum Weekday {
        
        /// <remarks/>
        SUNDAY,
        
        /// <remarks/>
        MONDAY,
        
        /// <remarks/>
        TUESDAY,
        
        /// <remarks/>
        WEDNESDAY,
        
        /// <remarks/>
        THURSDAY,
        
        /// <remarks/>
        FRIDAY,
        
        /// <remarks/>
        SATURDAY,
        
        /// <remarks/>
        HOLIDAY,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.hectrix.com/ACTAtek.xsd")]
    public partial class getTriggersCriteria {
        
        private System.Nullable<triggerType> triggerTypeField;
        
        private bool triggerTypeFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<triggerType> triggerType {
            get {
                return this.triggerTypeField;
            }
            set {
                this.triggerTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool triggerTypeSpecified {
            get {
                return this.triggerTypeFieldSpecified;
            }
            set {
                this.triggerTypeFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.hectrix.com/ACTAtek.xsd")]
    public partial class getGroupsCriteria {
        
        private System.Nullable<int> groupIDField;
        
        private bool groupIDFieldSpecified;
        
        private System.Nullable<int> departmentIDField;
        
        private bool departmentIDFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<int> groupID {
            get {
                return this.groupIDField;
            }
            set {
                this.groupIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool groupIDSpecified {
            get {
                return this.groupIDFieldSpecified;
            }
            set {
                this.groupIDFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<int> departmentID {
            get {
                return this.departmentIDField;
            }
            set {
                this.departmentIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool departmentIDSpecified {
            get {
                return this.departmentIDFieldSpecified;
            }
            set {
                this.departmentIDFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.hectrix.com/ACTAtek.xsd")]
    public partial class AccessRight {
        
        private int accessIDField;
        
        private string terminalSNField;
        
        private bool quickAccessField;
        
        private Timespec[] timeSpecField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int accessID {
            get {
                return this.accessIDField;
            }
            set {
                this.accessIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string terminalSN {
            get {
                return this.terminalSNField;
            }
            set {
                this.terminalSNField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool quickAccess {
            get {
                return this.quickAccessField;
            }
            set {
                this.quickAccessField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("timeSpec", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Timespec[] timeSpec {
            get {
                return this.timeSpecField;
            }
            set {
                this.timeSpecField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.hectrix.com/ACTAtek.xsd")]
    public partial class Group {
        
        private int groupIDField;
        
        private string groupNameField;
        
        private int departmentIDField;
        
        private AccessRight[] accessRightField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int groupID {
            get {
                return this.groupIDField;
            }
            set {
                this.groupIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string groupName {
            get {
                return this.groupNameField;
            }
            set {
                this.groupNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int departmentID {
            get {
                return this.departmentIDField;
            }
            set {
                this.departmentIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("accessRight", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public AccessRight[] accessRight {
            get {
                return this.accessRightField;
            }
            set {
                this.accessRightField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.hectrix.com/ACTAtek.xsd")]
    public partial class Department {
        
        private int departmentIDField;
        
        private string departmentNameField;
        
        private string departmentDescriptionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int departmentID {
            get {
                return this.departmentIDField;
            }
            set {
                this.departmentIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string departmentName {
            get {
                return this.departmentNameField;
            }
            set {
                this.departmentNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string departmentDescription {
            get {
                return this.departmentDescriptionField;
            }
            set {
                this.departmentDescriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.hectrix.com/ACTAtek.xsd")]
    public partial class getUsersCriteria {
        
        private string userIDField;
        
        private string partialUserIDField;
        
        private string lastNameField;
        
        private string firstNameField;
        
        private string otherNameField;
        
        private System.Nullable<int> departmentIDField;
        
        private bool departmentIDFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string userID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string partialUserID {
            get {
                return this.partialUserIDField;
            }
            set {
                this.partialUserIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string lastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string firstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string otherName {
            get {
                return this.otherNameField;
            }
            set {
                this.otherNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<int> departmentID {
            get {
                return this.departmentIDField;
            }
            set {
                this.departmentIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool departmentIDSpecified {
            get {
                return this.departmentIDFieldSpecified;
            }
            set {
                this.departmentIDFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.hectrix.com/ACTAtek.xsd")]
    public partial class Fingerprint {
        
        private byte[] imageField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary", IsNullable=true)]
        public byte[] image {
            get {
                return this.imageField;
            }
            set {
                this.imageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.hectrix.com/ACTAtek.xsd")]
    public partial class Status {
        
        private bool activeField;
        
        private bool autoMatchField;
        
        private bool smartCardField;
        
        private bool fingerprintField;
        
        private bool passwordField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool active {
            get {
                return this.activeField;
            }
            set {
                this.activeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool autoMatch {
            get {
                return this.autoMatchField;
            }
            set {
                this.autoMatchField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool smartCard {
            get {
                return this.smartCardField;
            }
            set {
                this.smartCardField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool fingerprint {
            get {
                return this.fingerprintField;
            }
            set {
                this.fingerprintField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.hectrix.com/ACTAtek.xsd")]
    public partial class User {
        
        private string userIDField;
        
        private string lastNameField;
        
        private string firstNameField;
        
        private string otherNameField;
        
        private AdminLevel adminLevelField;
        
        private bool usePasswordField;
        
        private string passwordField;
        
        private int[] groupIDField;
        
        private int[] departmentIDField;
        
        private FingerprintSecurityLevel fingerprintSecurityLevelField;
        
        private Status statusField;
        
        private Fingerprint[] fingerprintsField;
        
        private string cardsnField;
        
        private int fpgroupidField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string userID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string lastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string firstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string otherName {
            get {
                return this.otherNameField;
            }
            set {
                this.otherNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public AdminLevel adminLevel {
            get {
                return this.adminLevelField;
            }
            set {
                this.adminLevelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool usePassword {
            get {
                return this.usePasswordField;
            }
            set {
                this.usePasswordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("groupID", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int[] groupID {
            get {
                return this.groupIDField;
            }
            set {
                this.groupIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("departmentID", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int[] departmentID {
            get {
                return this.departmentIDField;
            }
            set {
                this.departmentIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FingerprintSecurityLevel fingerprintSecurityLevel {
            get {
                return this.fingerprintSecurityLevelField;
            }
            set {
                this.fingerprintSecurityLevelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Status status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("fingerprint", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Fingerprint[] fingerprints {
            get {
                return this.fingerprintsField;
            }
            set {
                this.fingerprintsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string cardsn {
            get {
                return this.cardsnField;
            }
            set {
                this.cardsnField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int fpgroupid {
            get {
                return this.fpgroupidField;
            }
            set {
                this.fpgroupidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.hectrix.com/ACTAtek.xsd")]
    public enum AdminLevel {
        
        /// <remarks/>
        PERSONALUSER,
        
        /// <remarks/>
        NETWORKADMIN,
        
        /// <remarks/>
        USERADMIN,
        
        /// <remarks/>
        SUPERADMIN,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.hectrix.com/ACTAtek.xsd")]
    public enum FingerprintSecurityLevel {
        
        /// <remarks/>
        LOWEST,
        
        /// <remarks/>
        LOW,
        
        /// <remarks/>
        NORMAL,
        
        /// <remarks/>
        HIGH,
        
        /// <remarks/>
        HIGHEST,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.hectrix.com/ACTAtek.xsd")]
    public partial class Log {
        
        private long logIDField;
        
        private string userIDField;
        
        private System.DateTime timestampField;
        
        private eventType triggerField;
        
        private string terminalSNField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long logID {
            get {
                return this.logIDField;
            }
            set {
                this.logIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string userID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime timestamp {
            get {
                return this.timestampField;
            }
            set {
                this.timestampField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public eventType trigger {
            get {
                return this.triggerField;
            }
            set {
                this.triggerField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string terminalSN {
            get {
                return this.terminalSNField;
            }
            set {
                this.terminalSNField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.hectrix.com/ACTAtek.xsd")]
    public partial class getLogsCriteria {
        
        private System.Nullable<System.DateTime> fromField;
        
        private bool fromFieldSpecified;
        
        private System.Nullable<System.DateTime> toField;
        
        private bool toFieldSpecified;
        
        private string employeeNameField;
        
        private string employeeIDField;
        
        private System.Nullable<int> departmentIDField;
        
        private bool departmentIDFieldSpecified;
        
        private System.Nullable<eventType> triggerField;
        
        private bool triggerFieldSpecified;
        
        private string terminalSNField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<System.DateTime> from {
            get {
                return this.fromField;
            }
            set {
                this.fromField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool fromSpecified {
            get {
                return this.fromFieldSpecified;
            }
            set {
                this.fromFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<System.DateTime> to {
            get {
                return this.toField;
            }
            set {
                this.toField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool toSpecified {
            get {
                return this.toFieldSpecified;
            }
            set {
                this.toFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string employeeName {
            get {
                return this.employeeNameField;
            }
            set {
                this.employeeNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string employeeID {
            get {
                return this.employeeIDField;
            }
            set {
                this.employeeIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<int> departmentID {
            get {
                return this.departmentIDField;
            }
            set {
                this.departmentIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool departmentIDSpecified {
            get {
                return this.departmentIDFieldSpecified;
            }
            set {
                this.departmentIDFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<eventType> trigger {
            get {
                return this.triggerField;
            }
            set {
                this.triggerField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool triggerSpecified {
            get {
                return this.triggerFieldSpecified;
            }
            set {
                this.triggerFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string terminalSN {
            get {
                return this.terminalSNField;
            }
            set {
                this.terminalSNField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.hectrix.com/ACTAtek.xsd")]
    public enum RelayID {
        
        /// <remarks/>
        ONE,
        
        /// <remarks/>
        TWO,
        
        /// <remarks/>
        ALL,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.hectrix.com/ACTAtek.xsd")]
    public enum AutoInOutOption {
        
        /// <remarks/>
        DISABLE,
        
        /// <remarks/>
        ENABLE,
        
        /// <remarks/>
        SPECIAL,
        
        /// <remarks/>
        REJECTREPEATEDLOGIN,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.hectrix.com/ACTAtek.xsd")]
    public enum RelayOption {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("RELAY-DISABLE")]
        RELAYDISABLE,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ACCESS-GRANTED")]
        ACCESSGRANTED,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ACCESS-DENIED")]
        ACCESSDENIED,
        
        /// <remarks/>
        DOORBELL,
        
        /// <remarks/>
        BELLSCHEDULE,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void loginCompletedEventHandler(object sender, loginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class loginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal loginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void logoutCompletedEventHandler(object sender, logoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class logoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal logoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getRegisteredAgentsCompletedEventHandler(object sender, getRegisteredAgentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getRegisteredAgentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getRegisteredAgentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Agent[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Agent[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void pollLogCompletedEventHandler(object sender, pollLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class pollLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal pollLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Agent Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Agent)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getLogsCompletedEventHandler(object sender, getLogsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLogsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLogsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Log[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Log[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addLogCompletedEventHandler(object sender, addLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addUserCompletedEventHandler(object sender, addUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getUsersCompletedEventHandler(object sender, getUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public User[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((User[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateUserCompletedEventHandler(object sender, updateUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void deleteUserCompletedEventHandler(object sender, deleteUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getMyselfCompletedEventHandler(object sender, getMyselfCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMyselfCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMyselfCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public User Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((User)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateMyselfCompletedEventHandler(object sender, updateMyselfCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateMyselfCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateMyselfCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void activateUserCompletedEventHandler(object sender, activateUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class activateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal activateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void deactivateUserCompletedEventHandler(object sender, deactivateUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deactivateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deactivateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getUserMessageCompletedEventHandler(object sender, getUserMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateUserMessageCompletedEventHandler(object sender, updateUserMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateUserMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateUserMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void deleteUserMessageCompletedEventHandler(object sender, deleteUserMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteUserMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteUserMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addDepartmentCompletedEventHandler(object sender, addDepartmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addDepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addDepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateDepartmentCompletedEventHandler(object sender, updateDepartmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateDepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateDepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getDepartmentsCompletedEventHandler(object sender, getDepartmentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDepartmentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDepartmentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Department[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Department[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void deleteDepartmentCompletedEventHandler(object sender, deleteDepartmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteDepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteDepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addGroupCompletedEventHandler(object sender, addGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getGroupsCompletedEventHandler(object sender, getGroupsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Group[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Group[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateGroupCompletedEventHandler(object sender, updateGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void deleteGroupCompletedEventHandler(object sender, deleteGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getTriggersCompletedEventHandler(object sender, getTriggersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTriggersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTriggersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Trigger[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Trigger[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateTriggerCompletedEventHandler(object sender, updateTriggerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateTriggerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateTriggerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void clearTriggerCompletedEventHandler(object sender, clearTriggerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class clearTriggerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal clearTriggerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void openDoorCompletedEventHandler(object sender, openDoorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class openDoorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal openDoorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void openRelayCompletedEventHandler(object sender, openRelayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class openRelayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal openRelayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void closeRelayCompletedEventHandler(object sender, closeRelayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class closeRelayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal closeRelayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void registerAgentCompletedEventHandler(object sender, registerAgentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class registerAgentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal registerAgentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void unregisterAgentCompletedEventHandler(object sender, unregisterAgentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class unregisterAgentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal unregisterAgentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAPIVersionCompletedEventHandler(object sender, getAPIVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAPIVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAPIVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getTerminalStatusCompletedEventHandler(object sender, getTerminalStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTerminalStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTerminalStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TerminalStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TerminalStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getTerminalListCompletedEventHandler(object sender, getTerminalListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTerminalListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTerminalListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Terminal[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Terminal[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void nopCompletedEventHandler(object sender, nopCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class nopCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal nopCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getLogPhotoCompletedEventHandler(object sender, getLogPhotoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLogPhotoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLogPhotoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void registerFPUserCompletedEventHandler(object sender, registerFPUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class registerFPUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal registerFPUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Fingerprint Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Fingerprint)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getFullLogsCompletedEventHandler(object sender, getFullLogsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFullLogsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFullLogsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LogDetail[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LogDetail[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void resetLogCompletedEventHandler(object sender, resetLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class resetLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal resetLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getFpSecurityLevelCompletedEventHandler(object sender, getFpSecurityLevelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFpSecurityLevelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFpSecurityLevelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FingerprintSecurityLevel Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FingerprintSecurityLevel)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void setFpSecurityLevelCompletedEventHandler(object sender, setFpSecurityLevelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setFpSecurityLevelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setFpSecurityLevelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getRelayDelayCompletedEventHandler(object sender, getRelayDelayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getRelayDelayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getRelayDelayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void setRelayDelayCompletedEventHandler(object sender, setRelayDelayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setRelayDelayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setRelayDelayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAutoInOutCompletedEventHandler(object sender, getAutoInOutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAutoInOutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAutoInOutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AutoInOutOption Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AutoInOutOption)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void setAutoInOutCompletedEventHandler(object sender, setAutoInOutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setAutoInOutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setAutoInOutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getLogUnauthorizedEventCompletedEventHandler(object sender, getLogUnauthorizedEventCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLogUnauthorizedEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLogUnauthorizedEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void setLogUnauthorizedEventCompletedEventHandler(object sender, setLogUnauthorizedEventCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setLogUnauthorizedEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setLogUnauthorizedEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void setRelayOptionCompletedEventHandler(object sender, setRelayOptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setRelayOptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setRelayOptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getRelayOptionCompletedEventHandler(object sender, getRelayOptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getRelayOptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getRelayOptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RelayOption relayOpt {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RelayOption)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool relayOptSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void setSNTPCompletedEventHandler(object sender, setSNTPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setSNTPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setSNTPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getSNTPCompletedEventHandler(object sender, getSNTPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSNTPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSNTPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool enable {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool enableSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void setSNTPServerCompletedEventHandler(object sender, setSNTPServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setSNTPServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setSNTPServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getSNTPServerCompletedEventHandler(object sender, getSNTPServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSNTPServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSNTPServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getTerminalDateTimeCompletedEventHandler(object sender, getTerminalDateTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTerminalDateTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTerminalDateTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Nullable<System.DateTime> terminalDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Nullable<System.DateTime>)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool terminalDateSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void setTerminalDateTimeCompletedEventHandler(object sender, setTerminalDateTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setTerminalDateTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setTerminalDateTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getTimeZoneCompletedEventHandler(object sender, getTimeZoneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTimeZoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTimeZoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void setTimeZoneCompletedEventHandler(object sender, setTimeZoneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setTimeZoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setTimeZoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getCaptureFingerprintCompletedEventHandler(object sender, getCaptureFingerprintCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCaptureFingerprintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCaptureFingerprintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void initCaptureFPCompletedEventHandler(object sender, initCaptureFPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class initCaptureFPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal initCaptureFPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void lockCompletedEventHandler(object sender, lockCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class lockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal lockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void unlockCompletedEventHandler(object sender, unlockCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class unlockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal unlockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void systemBackupCompletedEventHandler(object sender, systemBackupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class systemBackupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal systemBackupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void systemRestoreCompletedEventHandler(object sender, systemRestoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class systemRestoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal systemRestoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getUsersDbCompletedEventHandler(object sender, getUsersDbCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUsersDbCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUsersDbCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void deleteLogsCompletedEventHandler(object sender, deleteLogsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteLogsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteLogsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void RemoteBackupStartCompletedEventHandler(object sender, RemoteBackupStartCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoteBackupStartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoteBackupStartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetChunkCompletedEventHandler(object sender, GetChunkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void RemoteBackupEndCompletedEventHandler(object sender, RemoteBackupEndCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoteBackupEndCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoteBackupEndCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void RemoteRestoreCheckCompletedEventHandler(object sender, RemoteRestoreCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoteRestoreCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoteRestoreCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TerminalStatus2 Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TerminalStatus2)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void RemoteRestoreStartCompletedEventHandler(object sender, RemoteRestoreStartCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoteRestoreStartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoteRestoreStartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SendChunkCompletedEventHandler(object sender, SendChunkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void RemoteRestoreEndCompletedEventHandler(object sender, RemoteRestoreEndCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoteRestoreEndCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoteRestoreEndCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CancelRestoreCompletedEventHandler(object sender, CancelRestoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelRestoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelRestoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addUsersCompletedEventHandler(object sender, addUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public userID[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((userID[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateUsersCompletedEventHandler(object sender, updateUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getJobCodeSettingsCompletedEventHandler(object sender, getJobCodeSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getJobCodeSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getJobCodeSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public JobCodeSettings[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((JobCodeSettings[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateJobCodeSettingsCompletedEventHandler(object sender, updateJobCodeSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateJobCodeSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateJobCodeSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addJobCodesCompletedEventHandler(object sender, addJobCodesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addJobCodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addJobCodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateJobCodesCompletedEventHandler(object sender, updateJobCodesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateJobCodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateJobCodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void deleteJobCodesCompletedEventHandler(object sender, deleteJobCodesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteJobCodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteJobCodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getJobCodesCompletedEventHandler(object sender, getJobCodesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getJobCodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getJobCodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public JobCode[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((JobCode[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getUserCountCompletedEventHandler(object sender, getUserCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getUserBatchCompletedEventHandler(object sender, getUserBatchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserBatchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserBatchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public User[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((User[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591