//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace HotelManagement.Presentation.Website {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("InnboardDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class InnboardDataSet : global::System.Data.DataSet {
        
        private GetPFStatementYearlyReport_SPDataTable tableGetPFStatementYearlyReport_SP;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public InnboardDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected InnboardDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GetPFStatementYearlyReport_SP"] != null)) {
                    base.Tables.Add(new GetPFStatementYearlyReport_SPDataTable(ds.Tables["GetPFStatementYearlyReport_SP"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetPFStatementYearlyReport_SPDataTable GetPFStatementYearlyReport_SP {
            get {
                return this.tableGetPFStatementYearlyReport_SP;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            InnboardDataSet cln = ((InnboardDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GetPFStatementYearlyReport_SP"] != null)) {
                    base.Tables.Add(new GetPFStatementYearlyReport_SPDataTable(ds.Tables["GetPFStatementYearlyReport_SP"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableGetPFStatementYearlyReport_SP = ((GetPFStatementYearlyReport_SPDataTable)(base.Tables["GetPFStatementYearlyReport_SP"]));
            if ((initTable == true)) {
                if ((this.tableGetPFStatementYearlyReport_SP != null)) {
                    this.tableGetPFStatementYearlyReport_SP.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitClass() {
            this.DataSetName = "InnboardDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/InnboardDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGetPFStatementYearlyReport_SP = new GetPFStatementYearlyReport_SPDataTable();
            base.Tables.Add(this.tableGetPFStatementYearlyReport_SP);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeGetPFStatementYearlyReport_SP() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            InnboardDataSet ds = new InnboardDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void GetPFStatementYearlyReport_SPRowChangeEventHandler(object sender, GetPFStatementYearlyReport_SPRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetPFStatementYearlyReport_SPDataTable : global::System.Data.TypedTableBase<GetPFStatementYearlyReport_SPRow> {
            
            private global::System.Data.DataColumn columnPFCollectionId;
            
            private global::System.Data.DataColumn columnEmpId;
            
            private global::System.Data.DataColumn columnDisplayName;
            
            private global::System.Data.DataColumn columnEmpCode;
            
            private global::System.Data.DataColumn columnShowJoinDate;
            
            private global::System.Data.DataColumn columnDepartment;
            
            private global::System.Data.DataColumn columnDesignation;
            
            private global::System.Data.DataColumn columnPFDateTo;
            
            private global::System.Data.DataColumn columnProcessDate;
            
            private global::System.Data.DataColumn columnEmpContribution;
            
            private global::System.Data.DataColumn columnCompanyContribution;
            
            private global::System.Data.DataColumn columnCommulativeEmpContribution;
            
            private global::System.Data.DataColumn columnCommulativeCompanyContribution;
            
            private global::System.Data.DataColumn columnCommulativePFAmountCurrentYear;
            
            private global::System.Data.DataColumn columnCommulativePFAmount;
            
            private global::System.Data.DataColumn columnProvidentFundInterest;
            
            private global::System.Data.DataColumn columnCommulativeInterestAmount;
            
            private global::System.Data.DataColumn columnInterestTotal;
            
            private global::System.Data.DataColumn columnPFBalance;
            
            private global::System.Data.DataColumn columnCurrentYearTotalPF;
            
            private global::System.Data.DataColumn columnCFPFTotal;
            
            private global::System.Data.DataColumn columnShowPFEligibilityDate;
            
            private global::System.Data.DataColumn columnQrEmployeeImage;
            
            private global::System.Data.DataColumn columnCurrentYearBalance;
            
            private global::System.Data.DataColumn columnCurrenyearTotalPF;
            
            private global::System.Data.DataColumn columnInterest;
            
            private global::System.Data.DataColumn columnPreviousYearBalance;
            
            private global::System.Data.DataColumn columnTotalContribution;
            
            private global::System.Data.DataColumn columnLastDeductedMonthYear;
            
            private global::System.Data.DataColumn columnCurrencyName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public GetPFStatementYearlyReport_SPDataTable() {
                this.TableName = "GetPFStatementYearlyReport_SP";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal GetPFStatementYearlyReport_SPDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected GetPFStatementYearlyReport_SPDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn PFCollectionIdColumn {
                get {
                    return this.columnPFCollectionId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn EmpIdColumn {
                get {
                    return this.columnEmpId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn DisplayNameColumn {
                get {
                    return this.columnDisplayName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn EmpCodeColumn {
                get {
                    return this.columnEmpCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ShowJoinDateColumn {
                get {
                    return this.columnShowJoinDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn DepartmentColumn {
                get {
                    return this.columnDepartment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn DesignationColumn {
                get {
                    return this.columnDesignation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn PFDateToColumn {
                get {
                    return this.columnPFDateTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ProcessDateColumn {
                get {
                    return this.columnProcessDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn EmpContributionColumn {
                get {
                    return this.columnEmpContribution;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CompanyContributionColumn {
                get {
                    return this.columnCompanyContribution;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CommulativeEmpContributionColumn {
                get {
                    return this.columnCommulativeEmpContribution;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CommulativeCompanyContributionColumn {
                get {
                    return this.columnCommulativeCompanyContribution;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CommulativePFAmountCurrentYearColumn {
                get {
                    return this.columnCommulativePFAmountCurrentYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CommulativePFAmountColumn {
                get {
                    return this.columnCommulativePFAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ProvidentFundInterestColumn {
                get {
                    return this.columnProvidentFundInterest;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CommulativeInterestAmountColumn {
                get {
                    return this.columnCommulativeInterestAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn InterestTotalColumn {
                get {
                    return this.columnInterestTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn PFBalanceColumn {
                get {
                    return this.columnPFBalance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CurrentYearTotalPFColumn {
                get {
                    return this.columnCurrentYearTotalPF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CFPFTotalColumn {
                get {
                    return this.columnCFPFTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ShowPFEligibilityDateColumn {
                get {
                    return this.columnShowPFEligibilityDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn QrEmployeeImageColumn {
                get {
                    return this.columnQrEmployeeImage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CurrentYearBalanceColumn {
                get {
                    return this.columnCurrentYearBalance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CurrenyearTotalPFColumn {
                get {
                    return this.columnCurrenyearTotalPF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn InterestColumn {
                get {
                    return this.columnInterest;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn PreviousYearBalanceColumn {
                get {
                    return this.columnPreviousYearBalance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn TotalContributionColumn {
                get {
                    return this.columnTotalContribution;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn LastDeductedMonthYearColumn {
                get {
                    return this.columnLastDeductedMonthYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CurrencyNameColumn {
                get {
                    return this.columnCurrencyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public GetPFStatementYearlyReport_SPRow this[int index] {
                get {
                    return ((GetPFStatementYearlyReport_SPRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event GetPFStatementYearlyReport_SPRowChangeEventHandler GetPFStatementYearlyReport_SPRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event GetPFStatementYearlyReport_SPRowChangeEventHandler GetPFStatementYearlyReport_SPRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event GetPFStatementYearlyReport_SPRowChangeEventHandler GetPFStatementYearlyReport_SPRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event GetPFStatementYearlyReport_SPRowChangeEventHandler GetPFStatementYearlyReport_SPRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddGetPFStatementYearlyReport_SPRow(GetPFStatementYearlyReport_SPRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public GetPFStatementYearlyReport_SPRow AddGetPFStatementYearlyReport_SPRow(
                        int EmpId, 
                        string DisplayName, 
                        string EmpCode, 
                        string ShowJoinDate, 
                        string Department, 
                        string Designation, 
                        System.DateTime PFDateTo, 
                        string ProcessDate, 
                        decimal EmpContribution, 
                        decimal CompanyContribution, 
                        decimal CommulativeEmpContribution, 
                        decimal CommulativeCompanyContribution, 
                        decimal CommulativePFAmountCurrentYear, 
                        decimal CommulativePFAmount, 
                        decimal ProvidentFundInterest, 
                        decimal CommulativeInterestAmount, 
                        decimal InterestTotal, 
                        decimal PFBalance, 
                        decimal CurrentYearTotalPF, 
                        decimal CFPFTotal, 
                        string ShowPFEligibilityDate, 
                        string QrEmployeeImage, 
                        decimal CurrentYearBalance, 
                        decimal CurrenyearTotalPF, 
                        decimal Interest, 
                        decimal PreviousYearBalance, 
                        decimal TotalContribution, 
                        string LastDeductedMonthYear, 
                        string CurrencyName) {
                GetPFStatementYearlyReport_SPRow rowGetPFStatementYearlyReport_SPRow = ((GetPFStatementYearlyReport_SPRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        EmpId,
                        DisplayName,
                        EmpCode,
                        ShowJoinDate,
                        Department,
                        Designation,
                        PFDateTo,
                        ProcessDate,
                        EmpContribution,
                        CompanyContribution,
                        CommulativeEmpContribution,
                        CommulativeCompanyContribution,
                        CommulativePFAmountCurrentYear,
                        CommulativePFAmount,
                        ProvidentFundInterest,
                        CommulativeInterestAmount,
                        InterestTotal,
                        PFBalance,
                        CurrentYearTotalPF,
                        CFPFTotal,
                        ShowPFEligibilityDate,
                        QrEmployeeImage,
                        CurrentYearBalance,
                        CurrenyearTotalPF,
                        Interest,
                        PreviousYearBalance,
                        TotalContribution,
                        LastDeductedMonthYear,
                        CurrencyName};
                rowGetPFStatementYearlyReport_SPRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetPFStatementYearlyReport_SPRow);
                return rowGetPFStatementYearlyReport_SPRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public GetPFStatementYearlyReport_SPRow FindByPFCollectionId(long PFCollectionId) {
                return ((GetPFStatementYearlyReport_SPRow)(this.Rows.Find(new object[] {
                            PFCollectionId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                GetPFStatementYearlyReport_SPDataTable cln = ((GetPFStatementYearlyReport_SPDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetPFStatementYearlyReport_SPDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnPFCollectionId = base.Columns["PFCollectionId"];
                this.columnEmpId = base.Columns["EmpId"];
                this.columnDisplayName = base.Columns["DisplayName"];
                this.columnEmpCode = base.Columns["EmpCode"];
                this.columnShowJoinDate = base.Columns["ShowJoinDate"];
                this.columnDepartment = base.Columns["Department"];
                this.columnDesignation = base.Columns["Designation"];
                this.columnPFDateTo = base.Columns["PFDateTo"];
                this.columnProcessDate = base.Columns["ProcessDate"];
                this.columnEmpContribution = base.Columns["EmpContribution"];
                this.columnCompanyContribution = base.Columns["CompanyContribution"];
                this.columnCommulativeEmpContribution = base.Columns["CommulativeEmpContribution"];
                this.columnCommulativeCompanyContribution = base.Columns["CommulativeCompanyContribution"];
                this.columnCommulativePFAmountCurrentYear = base.Columns["CommulativePFAmountCurrentYear"];
                this.columnCommulativePFAmount = base.Columns["CommulativePFAmount"];
                this.columnProvidentFundInterest = base.Columns["ProvidentFundInterest"];
                this.columnCommulativeInterestAmount = base.Columns["CommulativeInterestAmount"];
                this.columnInterestTotal = base.Columns["InterestTotal"];
                this.columnPFBalance = base.Columns["PFBalance"];
                this.columnCurrentYearTotalPF = base.Columns["CurrentYearTotalPF"];
                this.columnCFPFTotal = base.Columns["CFPFTotal"];
                this.columnShowPFEligibilityDate = base.Columns["ShowPFEligibilityDate"];
                this.columnQrEmployeeImage = base.Columns["QrEmployeeImage"];
                this.columnCurrentYearBalance = base.Columns["CurrentYearBalance"];
                this.columnCurrenyearTotalPF = base.Columns["CurrenyearTotalPF"];
                this.columnInterest = base.Columns["Interest"];
                this.columnPreviousYearBalance = base.Columns["PreviousYearBalance"];
                this.columnTotalContribution = base.Columns["TotalContribution"];
                this.columnLastDeductedMonthYear = base.Columns["LastDeductedMonthYear"];
                this.columnCurrencyName = base.Columns["CurrencyName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnPFCollectionId = new global::System.Data.DataColumn("PFCollectionId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPFCollectionId);
                this.columnEmpId = new global::System.Data.DataColumn("EmpId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpId);
                this.columnDisplayName = new global::System.Data.DataColumn("DisplayName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDisplayName);
                this.columnEmpCode = new global::System.Data.DataColumn("EmpCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpCode);
                this.columnShowJoinDate = new global::System.Data.DataColumn("ShowJoinDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShowJoinDate);
                this.columnDepartment = new global::System.Data.DataColumn("Department", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepartment);
                this.columnDesignation = new global::System.Data.DataColumn("Designation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDesignation);
                this.columnPFDateTo = new global::System.Data.DataColumn("PFDateTo", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPFDateTo);
                this.columnProcessDate = new global::System.Data.DataColumn("ProcessDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcessDate);
                this.columnEmpContribution = new global::System.Data.DataColumn("EmpContribution", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpContribution);
                this.columnCompanyContribution = new global::System.Data.DataColumn("CompanyContribution", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyContribution);
                this.columnCommulativeEmpContribution = new global::System.Data.DataColumn("CommulativeEmpContribution", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommulativeEmpContribution);
                this.columnCommulativeCompanyContribution = new global::System.Data.DataColumn("CommulativeCompanyContribution", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommulativeCompanyContribution);
                this.columnCommulativePFAmountCurrentYear = new global::System.Data.DataColumn("CommulativePFAmountCurrentYear", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommulativePFAmountCurrentYear);
                this.columnCommulativePFAmount = new global::System.Data.DataColumn("CommulativePFAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommulativePFAmount);
                this.columnProvidentFundInterest = new global::System.Data.DataColumn("ProvidentFundInterest", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProvidentFundInterest);
                this.columnCommulativeInterestAmount = new global::System.Data.DataColumn("CommulativeInterestAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommulativeInterestAmount);
                this.columnInterestTotal = new global::System.Data.DataColumn("InterestTotal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInterestTotal);
                this.columnPFBalance = new global::System.Data.DataColumn("PFBalance", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPFBalance);
                this.columnCurrentYearTotalPF = new global::System.Data.DataColumn("CurrentYearTotalPF", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentYearTotalPF);
                this.columnCFPFTotal = new global::System.Data.DataColumn("CFPFTotal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCFPFTotal);
                this.columnShowPFEligibilityDate = new global::System.Data.DataColumn("ShowPFEligibilityDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShowPFEligibilityDate);
                this.columnQrEmployeeImage = new global::System.Data.DataColumn("QrEmployeeImage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQrEmployeeImage);
                this.columnCurrentYearBalance = new global::System.Data.DataColumn("CurrentYearBalance", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentYearBalance);
                this.columnCurrenyearTotalPF = new global::System.Data.DataColumn("CurrenyearTotalPF", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrenyearTotalPF);
                this.columnInterest = new global::System.Data.DataColumn("Interest", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInterest);
                this.columnPreviousYearBalance = new global::System.Data.DataColumn("PreviousYearBalance", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreviousYearBalance);
                this.columnTotalContribution = new global::System.Data.DataColumn("TotalContribution", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalContribution);
                this.columnLastDeductedMonthYear = new global::System.Data.DataColumn("LastDeductedMonthYear", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastDeductedMonthYear);
                this.columnCurrencyName = new global::System.Data.DataColumn("CurrencyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrencyName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPFCollectionId}, true));
                this.columnPFCollectionId.AutoIncrement = true;
                this.columnPFCollectionId.AllowDBNull = false;
                this.columnPFCollectionId.ReadOnly = true;
                this.columnPFCollectionId.Unique = true;
                this.columnEmpId.AllowDBNull = false;
                this.columnDisplayName.MaxLength = 50;
                this.columnEmpCode.MaxLength = 20;
                this.columnShowJoinDate.ReadOnly = true;
                this.columnShowJoinDate.MaxLength = 50;
                this.columnDepartment.MaxLength = 100;
                this.columnDesignation.MaxLength = 100;
                this.columnPFDateTo.AllowDBNull = false;
                this.columnProcessDate.ReadOnly = true;
                this.columnProcessDate.MaxLength = 50;
                this.columnEmpContribution.AllowDBNull = false;
                this.columnCompanyContribution.AllowDBNull = false;
                this.columnCommulativeEmpContribution.AllowDBNull = false;
                this.columnCommulativeCompanyContribution.AllowDBNull = false;
                this.columnCommulativePFAmountCurrentYear.AllowDBNull = false;
                this.columnCommulativePFAmount.AllowDBNull = false;
                this.columnProvidentFundInterest.ReadOnly = true;
                this.columnCommulativeInterestAmount.ReadOnly = true;
                this.columnInterestTotal.ReadOnly = true;
                this.columnPFBalance.ReadOnly = true;
                this.columnCurrentYearTotalPF.ReadOnly = true;
                this.columnCFPFTotal.ReadOnly = true;
                this.columnShowPFEligibilityDate.ReadOnly = true;
                this.columnShowPFEligibilityDate.MaxLength = 50;
                this.columnQrEmployeeImage.ReadOnly = true;
                this.columnQrEmployeeImage.MaxLength = 1;
                this.columnCurrentYearBalance.ReadOnly = true;
                this.columnCurrenyearTotalPF.ReadOnly = true;
                this.columnInterest.ReadOnly = true;
                this.columnPreviousYearBalance.ReadOnly = true;
                this.columnTotalContribution.ReadOnly = true;
                this.columnLastDeductedMonthYear.ReadOnly = true;
                this.columnLastDeductedMonthYear.MaxLength = 26;
                this.columnCurrencyName.ReadOnly = true;
                this.columnCurrencyName.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public GetPFStatementYearlyReport_SPRow NewGetPFStatementYearlyReport_SPRow() {
                return ((GetPFStatementYearlyReport_SPRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetPFStatementYearlyReport_SPRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(GetPFStatementYearlyReport_SPRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetPFStatementYearlyReport_SPRowChanged != null)) {
                    this.GetPFStatementYearlyReport_SPRowChanged(this, new GetPFStatementYearlyReport_SPRowChangeEvent(((GetPFStatementYearlyReport_SPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetPFStatementYearlyReport_SPRowChanging != null)) {
                    this.GetPFStatementYearlyReport_SPRowChanging(this, new GetPFStatementYearlyReport_SPRowChangeEvent(((GetPFStatementYearlyReport_SPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetPFStatementYearlyReport_SPRowDeleted != null)) {
                    this.GetPFStatementYearlyReport_SPRowDeleted(this, new GetPFStatementYearlyReport_SPRowChangeEvent(((GetPFStatementYearlyReport_SPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetPFStatementYearlyReport_SPRowDeleting != null)) {
                    this.GetPFStatementYearlyReport_SPRowDeleting(this, new GetPFStatementYearlyReport_SPRowChangeEvent(((GetPFStatementYearlyReport_SPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveGetPFStatementYearlyReport_SPRow(GetPFStatementYearlyReport_SPRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InnboardDataSet ds = new InnboardDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetPFStatementYearlyReport_SPDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class GetPFStatementYearlyReport_SPRow : global::System.Data.DataRow {
            
            private GetPFStatementYearlyReport_SPDataTable tableGetPFStatementYearlyReport_SP;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal GetPFStatementYearlyReport_SPRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetPFStatementYearlyReport_SP = ((GetPFStatementYearlyReport_SPDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public long PFCollectionId {
                get {
                    return ((long)(this[this.tableGetPFStatementYearlyReport_SP.PFCollectionIdColumn]));
                }
                set {
                    this[this.tableGetPFStatementYearlyReport_SP.PFCollectionIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int EmpId {
                get {
                    return ((int)(this[this.tableGetPFStatementYearlyReport_SP.EmpIdColumn]));
                }
                set {
                    this[this.tableGetPFStatementYearlyReport_SP.EmpIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string DisplayName {
                get {
                    try {
                        return ((string)(this[this.tableGetPFStatementYearlyReport_SP.DisplayNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DisplayName\' in table \'GetPFStatementYearlyReport_SP\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableGetPFStatementYearlyReport_SP.DisplayNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string EmpCode {
                get {
                    try {
                        return ((string)(this[this.tableGetPFStatementYearlyReport_SP.EmpCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpCode\' in table \'GetPFStatementYearlyReport_SP\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGetPFStatementYearlyReport_SP.EmpCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ShowJoinDate {
                get {
                    try {
                        return ((string)(this[this.tableGetPFStatementYearlyReport_SP.ShowJoinDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShowJoinDate\' in table \'GetPFStatementYearlyReport_SP\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetPFStatementYearlyReport_SP.ShowJoinDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Department {
                get {
                    try {
                        return ((string)(this[this.tableGetPFStatementYearlyReport_SP.DepartmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Department\' in table \'GetPFStatementYearlyReport_SP\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetPFStatementYearlyReport_SP.DepartmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Designation {
                get {
                    try {
                        return ((string)(this[this.tableGetPFStatementYearlyReport_SP.DesignationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Designation\' in table \'GetPFStatementYearlyReport_SP\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableGetPFStatementYearlyReport_SP.DesignationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.DateTime PFDateTo {
                get {
                    return ((global::System.DateTime)(this[this.tableGetPFStatementYearlyReport_SP.PFDateToColumn]));
                }
                set {
                    this[this.tableGetPFStatementYearlyReport_SP.PFDateToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ProcessDate {
                get {
                    try {
                        return ((string)(this[this.tableGetPFStatementYearlyReport_SP.ProcessDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProcessDate\' in table \'GetPFStatementYearlyReport_SP\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableGetPFStatementYearlyReport_SP.ProcessDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal EmpContribution {
                get {
                    return ((decimal)(this[this.tableGetPFStatementYearlyReport_SP.EmpContributionColumn]));
                }
                set {
                    this[this.tableGetPFStatementYearlyReport_SP.EmpContributionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal CompanyContribution {
                get {
                    return ((decimal)(this[this.tableGetPFStatementYearlyReport_SP.CompanyContributionColumn]));
                }
                set {
                    this[this.tableGetPFStatementYearlyReport_SP.CompanyContributionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal CommulativeEmpContribution {
                get {
                    return ((decimal)(this[this.tableGetPFStatementYearlyReport_SP.CommulativeEmpContributionColumn]));
                }
                set {
                    this[this.tableGetPFStatementYearlyReport_SP.CommulativeEmpContributionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal CommulativeCompanyContribution {
                get {
                    return ((decimal)(this[this.tableGetPFStatementYearlyReport_SP.CommulativeCompanyContributionColumn]));
                }
                set {
                    this[this.tableGetPFStatementYearlyReport_SP.CommulativeCompanyContributionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal CommulativePFAmountCurrentYear {
                get {
                    return ((decimal)(this[this.tableGetPFStatementYearlyReport_SP.CommulativePFAmountCurrentYearColumn]));
                }
                set {
                    this[this.tableGetPFStatementYearlyReport_SP.CommulativePFAmountCurrentYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal CommulativePFAmount {
                get {
                    return ((decimal)(this[this.tableGetPFStatementYearlyReport_SP.CommulativePFAmountColumn]));
                }
                set {
                    this[this.tableGetPFStatementYearlyReport_SP.CommulativePFAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal ProvidentFundInterest {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPFStatementYearlyReport_SP.ProvidentFundInterestColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProvidentFundInterest\' in table \'GetPFStatementYearlyReport" +
                                "_SP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPFStatementYearlyReport_SP.ProvidentFundInterestColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal CommulativeInterestAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPFStatementYearlyReport_SP.CommulativeInterestAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommulativeInterestAmount\' in table \'GetPFStatementYearlyRe" +
                                "port_SP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPFStatementYearlyReport_SP.CommulativeInterestAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal InterestTotal {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPFStatementYearlyReport_SP.InterestTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InterestTotal\' in table \'GetPFStatementYearlyReport_SP\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPFStatementYearlyReport_SP.InterestTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal PFBalance {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPFStatementYearlyReport_SP.PFBalanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PFBalance\' in table \'GetPFStatementYearlyReport_SP\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetPFStatementYearlyReport_SP.PFBalanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal CurrentYearTotalPF {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPFStatementYearlyReport_SP.CurrentYearTotalPFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentYearTotalPF\' in table \'GetPFStatementYearlyReport_SP" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPFStatementYearlyReport_SP.CurrentYearTotalPFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal CFPFTotal {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPFStatementYearlyReport_SP.CFPFTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CFPFTotal\' in table \'GetPFStatementYearlyReport_SP\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetPFStatementYearlyReport_SP.CFPFTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ShowPFEligibilityDate {
                get {
                    try {
                        return ((string)(this[this.tableGetPFStatementYearlyReport_SP.ShowPFEligibilityDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShowPFEligibilityDate\' in table \'GetPFStatementYearlyReport" +
                                "_SP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPFStatementYearlyReport_SP.ShowPFEligibilityDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string QrEmployeeImage {
                get {
                    try {
                        return ((string)(this[this.tableGetPFStatementYearlyReport_SP.QrEmployeeImageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QrEmployeeImage\' in table \'GetPFStatementYearlyReport_SP\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPFStatementYearlyReport_SP.QrEmployeeImageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal CurrentYearBalance {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPFStatementYearlyReport_SP.CurrentYearBalanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentYearBalance\' in table \'GetPFStatementYearlyReport_SP" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPFStatementYearlyReport_SP.CurrentYearBalanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal CurrenyearTotalPF {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPFStatementYearlyReport_SP.CurrenyearTotalPFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrenyearTotalPF\' in table \'GetPFStatementYearlyReport_SP\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPFStatementYearlyReport_SP.CurrenyearTotalPFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal Interest {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPFStatementYearlyReport_SP.InterestColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Interest\' in table \'GetPFStatementYearlyReport_SP\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetPFStatementYearlyReport_SP.InterestColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal PreviousYearBalance {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPFStatementYearlyReport_SP.PreviousYearBalanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PreviousYearBalance\' in table \'GetPFStatementYearlyReport_S" +
                                "P\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPFStatementYearlyReport_SP.PreviousYearBalanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal TotalContribution {
                get {
                    try {
                        return ((decimal)(this[this.tableGetPFStatementYearlyReport_SP.TotalContributionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalContribution\' in table \'GetPFStatementYearlyReport_SP\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPFStatementYearlyReport_SP.TotalContributionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string LastDeductedMonthYear {
                get {
                    try {
                        return ((string)(this[this.tableGetPFStatementYearlyReport_SP.LastDeductedMonthYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastDeductedMonthYear\' in table \'GetPFStatementYearlyReport" +
                                "_SP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPFStatementYearlyReport_SP.LastDeductedMonthYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string CurrencyName {
                get {
                    try {
                        return ((string)(this[this.tableGetPFStatementYearlyReport_SP.CurrencyNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrencyName\' in table \'GetPFStatementYearlyReport_SP\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGetPFStatementYearlyReport_SP.CurrencyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsDisplayNameNull() {
                return this.IsNull(this.tableGetPFStatementYearlyReport_SP.DisplayNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetDisplayNameNull() {
                this[this.tableGetPFStatementYearlyReport_SP.DisplayNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsEmpCodeNull() {
                return this.IsNull(this.tableGetPFStatementYearlyReport_SP.EmpCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetEmpCodeNull() {
                this[this.tableGetPFStatementYearlyReport_SP.EmpCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsShowJoinDateNull() {
                return this.IsNull(this.tableGetPFStatementYearlyReport_SP.ShowJoinDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetShowJoinDateNull() {
                this[this.tableGetPFStatementYearlyReport_SP.ShowJoinDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsDepartmentNull() {
                return this.IsNull(this.tableGetPFStatementYearlyReport_SP.DepartmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetDepartmentNull() {
                this[this.tableGetPFStatementYearlyReport_SP.DepartmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsDesignationNull() {
                return this.IsNull(this.tableGetPFStatementYearlyReport_SP.DesignationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetDesignationNull() {
                this[this.tableGetPFStatementYearlyReport_SP.DesignationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProcessDateNull() {
                return this.IsNull(this.tableGetPFStatementYearlyReport_SP.ProcessDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProcessDateNull() {
                this[this.tableGetPFStatementYearlyReport_SP.ProcessDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProvidentFundInterestNull() {
                return this.IsNull(this.tableGetPFStatementYearlyReport_SP.ProvidentFundInterestColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProvidentFundInterestNull() {
                this[this.tableGetPFStatementYearlyReport_SP.ProvidentFundInterestColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCommulativeInterestAmountNull() {
                return this.IsNull(this.tableGetPFStatementYearlyReport_SP.CommulativeInterestAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCommulativeInterestAmountNull() {
                this[this.tableGetPFStatementYearlyReport_SP.CommulativeInterestAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsInterestTotalNull() {
                return this.IsNull(this.tableGetPFStatementYearlyReport_SP.InterestTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetInterestTotalNull() {
                this[this.tableGetPFStatementYearlyReport_SP.InterestTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsPFBalanceNull() {
                return this.IsNull(this.tableGetPFStatementYearlyReport_SP.PFBalanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetPFBalanceNull() {
                this[this.tableGetPFStatementYearlyReport_SP.PFBalanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCurrentYearTotalPFNull() {
                return this.IsNull(this.tableGetPFStatementYearlyReport_SP.CurrentYearTotalPFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCurrentYearTotalPFNull() {
                this[this.tableGetPFStatementYearlyReport_SP.CurrentYearTotalPFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCFPFTotalNull() {
                return this.IsNull(this.tableGetPFStatementYearlyReport_SP.CFPFTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCFPFTotalNull() {
                this[this.tableGetPFStatementYearlyReport_SP.CFPFTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsShowPFEligibilityDateNull() {
                return this.IsNull(this.tableGetPFStatementYearlyReport_SP.ShowPFEligibilityDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetShowPFEligibilityDateNull() {
                this[this.tableGetPFStatementYearlyReport_SP.ShowPFEligibilityDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsQrEmployeeImageNull() {
                return this.IsNull(this.tableGetPFStatementYearlyReport_SP.QrEmployeeImageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetQrEmployeeImageNull() {
                this[this.tableGetPFStatementYearlyReport_SP.QrEmployeeImageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCurrentYearBalanceNull() {
                return this.IsNull(this.tableGetPFStatementYearlyReport_SP.CurrentYearBalanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCurrentYearBalanceNull() {
                this[this.tableGetPFStatementYearlyReport_SP.CurrentYearBalanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCurrenyearTotalPFNull() {
                return this.IsNull(this.tableGetPFStatementYearlyReport_SP.CurrenyearTotalPFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCurrenyearTotalPFNull() {
                this[this.tableGetPFStatementYearlyReport_SP.CurrenyearTotalPFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsInterestNull() {
                return this.IsNull(this.tableGetPFStatementYearlyReport_SP.InterestColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetInterestNull() {
                this[this.tableGetPFStatementYearlyReport_SP.InterestColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsPreviousYearBalanceNull() {
                return this.IsNull(this.tableGetPFStatementYearlyReport_SP.PreviousYearBalanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetPreviousYearBalanceNull() {
                this[this.tableGetPFStatementYearlyReport_SP.PreviousYearBalanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTotalContributionNull() {
                return this.IsNull(this.tableGetPFStatementYearlyReport_SP.TotalContributionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTotalContributionNull() {
                this[this.tableGetPFStatementYearlyReport_SP.TotalContributionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsLastDeductedMonthYearNull() {
                return this.IsNull(this.tableGetPFStatementYearlyReport_SP.LastDeductedMonthYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetLastDeductedMonthYearNull() {
                this[this.tableGetPFStatementYearlyReport_SP.LastDeductedMonthYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCurrencyNameNull() {
                return this.IsNull(this.tableGetPFStatementYearlyReport_SP.CurrencyNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCurrencyNameNull() {
                this[this.tableGetPFStatementYearlyReport_SP.CurrencyNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class GetPFStatementYearlyReport_SPRowChangeEvent : global::System.EventArgs {
            
            private GetPFStatementYearlyReport_SPRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public GetPFStatementYearlyReport_SPRowChangeEvent(GetPFStatementYearlyReport_SPRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public GetPFStatementYearlyReport_SPRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace HotelManagement.Presentation.Website.InnboardDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetPFStatementYearlyReport_SPTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public GetPFStatementYearlyReport_SPTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetPFStatementYearlyReport_SP";
            tableMapping.ColumnMappings.Add("PFCollectionId", "PFCollectionId");
            tableMapping.ColumnMappings.Add("EmpId", "EmpId");
            tableMapping.ColumnMappings.Add("DisplayName", "DisplayName");
            tableMapping.ColumnMappings.Add("EmpCode", "EmpCode");
            tableMapping.ColumnMappings.Add("ShowJoinDate", "ShowJoinDate");
            tableMapping.ColumnMappings.Add("Department", "Department");
            tableMapping.ColumnMappings.Add("Designation", "Designation");
            tableMapping.ColumnMappings.Add("PFDateTo", "PFDateTo");
            tableMapping.ColumnMappings.Add("ProcessDate", "ProcessDate");
            tableMapping.ColumnMappings.Add("EmpContribution", "EmpContribution");
            tableMapping.ColumnMappings.Add("CompanyContribution", "CompanyContribution");
            tableMapping.ColumnMappings.Add("CommulativeEmpContribution", "CommulativeEmpContribution");
            tableMapping.ColumnMappings.Add("CommulativeCompanyContribution", "CommulativeCompanyContribution");
            tableMapping.ColumnMappings.Add("CommulativePFAmountCurrentYear", "CommulativePFAmountCurrentYear");
            tableMapping.ColumnMappings.Add("CommulativePFAmount", "CommulativePFAmount");
            tableMapping.ColumnMappings.Add("ProvidentFundInterest", "ProvidentFundInterest");
            tableMapping.ColumnMappings.Add("CommulativeInterestAmount", "CommulativeInterestAmount");
            tableMapping.ColumnMappings.Add("InterestTotal", "InterestTotal");
            tableMapping.ColumnMappings.Add("PFBalance", "PFBalance");
            tableMapping.ColumnMappings.Add("CurrentYearTotalPF", "CurrentYearTotalPF");
            tableMapping.ColumnMappings.Add("CFPFTotal", "CFPFTotal");
            tableMapping.ColumnMappings.Add("ShowPFEligibilityDate", "ShowPFEligibilityDate");
            tableMapping.ColumnMappings.Add("QrEmployeeImage", "QrEmployeeImage");
            tableMapping.ColumnMappings.Add("CurrentYearBalance", "CurrentYearBalance");
            tableMapping.ColumnMappings.Add("CurrenyearTotalPF", "CurrenyearTotalPF");
            tableMapping.ColumnMappings.Add("Interest", "Interest");
            tableMapping.ColumnMappings.Add("PreviousYearBalance", "PreviousYearBalance");
            tableMapping.ColumnMappings.Add("TotalContribution", "TotalContribution");
            tableMapping.ColumnMappings.Add("LastDeductedMonthYear", "LastDeductedMonthYear");
            tableMapping.ColumnMappings.Add("CurrencyName", "CurrencyName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=MAMUN\\SQLEXPRESS;Initial Catalog=Innboard;User ID=sa;Password=D@T@123" +
                "";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetPFStatementYearlyReport_SP";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PFToDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PFYear", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmpId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DepartmentId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InnboardDataSet.GetPFStatementYearlyReport_SPDataTable dataTable, global::System.Nullable<global::System.DateTime> PFToDate, global::System.Nullable<int> PFYear, global::System.Nullable<int> EmpId, global::System.Nullable<int> DepartmentId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((PFToDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(PFToDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((PFYear.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((int)(PFYear.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((EmpId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((int)(EmpId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((DepartmentId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[4].Value = ((int)(DepartmentId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InnboardDataSet.GetPFStatementYearlyReport_SPDataTable GetData(global::System.Nullable<global::System.DateTime> PFToDate, global::System.Nullable<int> PFYear, global::System.Nullable<int> EmpId, global::System.Nullable<int> DepartmentId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((PFToDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(PFToDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((PFYear.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((int)(PFYear.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((EmpId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((int)(EmpId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((DepartmentId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[4].Value = ((int)(DepartmentId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            InnboardDataSet.GetPFStatementYearlyReport_SPDataTable dataTable = new InnboardDataSet.GetPFStatementYearlyReport_SPDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateUpdatedRows(InnboardDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateInsertedRows(InnboardDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateDeletedRows(InnboardDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public virtual int UpdateAll(InnboardDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591