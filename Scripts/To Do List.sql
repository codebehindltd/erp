
/****** Object:  Table [dbo].[APP_ErrorLog]    Script Date: 05/20/2013 19:17:02 ******/
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[APP_ErrorLog]') AND type in (N'U'))
BEGIN
	CREATE TABLE [dbo].[APP_ErrorLog](
		[AppErrorLogID] [int] IDENTITY(1,1) NOT NULL,
		[Application] [nvarchar](24) NOT NULL,
		[Build] [nvarchar](16) NOT NULL,
		[EventType] [nvarchar](24) NOT NULL,
		[Source] [nvarchar](64) NULL,
		[SubSource] [nvarchar](64) NULL,
		[Msg] [nvarchar](max) NULL,
		[Data] [nvarchar](max) NULL,
		[StackTrace] [nvarchar](max) NULL,
		[UserName] [nvarchar](32) NULL,
		[CreateDate] [datetime] NULL,
	 CONSTRAINT [PK_APP_ErrorLog] PRIMARY KEY CLUSTERED 
	(
		[AppErrorLogID] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
	) ON [PRIMARY]
	
	ALTER TABLE [dbo].[APP_ErrorLog] ADD  CONSTRAINT [DF_APP_ErrorLog_CreateDate]  DEFAULT (getdate()) FOR [CreateDate]

END

GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[App_Computer]') AND type in (N'U'))
BEGIN
	CREATE TABLE [dbo].[App_Computer](
		[ID] [int] IDENTITY(1,1) NOT NULL,
		[PCName] [nvarchar](200) NOT NULL,
		[IPAddress] [nvarchar](100) NULL,
		[OSPlatform] [nvarchar](200) NULL,
		[OSVersion] [nvarchar](200) NULL,
		[RangerVersion] [nvarchar](200) NULL,
		[LastActivityTime] [datetime] NOT NULL,
		[CreateDate] [datetime] NOT NULL,
	 CONSTRAINT [PK_App_Computer] PRIMARY KEY CLUSTERED 
	(
		[ID] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
	) ON [PRIMARY]
	
	ALTER TABLE [dbo].[App_Computer] ADD  CONSTRAINT [DF_App_Computer_CreateDate]  DEFAULT (getdate()) FOR [CreateDate]

END

GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'App_Computer' AND column_name = 'Label')
BEGIN
	ALTER TABLE dbo.App_Computer
		ADD Label nvarchar(500) NULL;
END
GO

------------------------------------------------------------------------------------------
--- RENAME "LocationType" to "ItemType" and int to string in REPORT_SavedReports table----
------------------------------------------------------------------------------------------

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'REPORT_SavedReports' AND column_name = 'LocationType')
BEGIN
ALTER TABLE dbo.REPORT_SavedReports
   ALTER COLUMN LocationType nvarchar(50) NULL;
   
exec sp_RENAME 'REPORT_SavedReports.LocationType' , 'ItemType', 'COLUMN'     
END 

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'Procedure_Alert' AND column_name = 'CheckFrequency')
BEGIN
ALTER TABLE dbo.Procedure_Alert
   ALTER COLUMN CheckFrequency nvarchar(50) NULL; 
END 

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Alert' AND column_name = 'UpdatedOn')
BEGIN
	ALTER TABLE dbo.PROCEDURE_Alert
	   ADD UpdatedOn Datetime NULL;
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'Procedure_Alert' AND column_name = 'EmailFailComment')
BEGIN
	ALTER TABLE dbo.Procedure_Alert
		ADD EmailFailComment nvarchar(500) NULL;
END
GO

--IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'Procedure_Alert' AND column_name = 'EmailFailCount')
--BEGIN
--	ALTER TABLE dbo.Procedure_Alert
--		ADD EmailFailCount int NULL
--	EXEC sp_executesql N'UPDATE Procedure_Alert SET EmailFailCount = 0 WHERE EmailFailCount IS NULL'	
--END
--GO		

--IF  NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_Procedure_Alert_EmailFailCount]') AND type = 'D')
--BEGIN
--	ALTER TABLE [dbo].[Procedure_Alert] ADD  CONSTRAINT [DF_Procedure_Alert_EmailFailCount]  DEFAULT ((0)) FOR [EmailFailCount]
--END
--GO
   
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Step' AND column_name = 'CheckFrequency')
BEGIN
ALTER TABLE dbo.PROCEDURE_Step
   ALTER COLUMN CheckFrequency nvarchar(50) NULL;
   END
   GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Step' AND column_name = 'StartOn')
BEGIN
ALTER TABLE dbo.PROCEDURE_Step
   ADD  StartOn DateTime NULL;
   END
   GO
   
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Step' AND column_name = 'UpdatedOn')
BEGIN
	ALTER TABLE dbo.PROCEDURE_Step
	   ADD UpdatedOn Datetime NULL;
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Step' AND column_name = 'NeedToVerify')
BEGIN
	ALTER TABLE dbo.PROCEDURE_Step 
	   ADD NeedToVerify bit NULL CONSTRAINT DF_Procedure_Step_CanVerify DEFAULT 0 WITH VALUES;
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_StepDetail' AND column_name = 'PauseTime')
BEGIN
ALTER TABLE dbo.PROCEDURE_StepDetail
   ADD PauseTime INT NULL;
   END
   GO   
   
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_StepDetail' AND column_name = 'UpdatedOn')
BEGIN
	ALTER TABLE dbo.PROCEDURE_StepDetail
	   ADD UpdatedOn Datetime NULL;
END
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_StepDetail' AND column_name = 'Description')
BEGIN
    IF( (SELECT CHARACTER_MAXIMUM_LENGTH FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'PROCEDURE_StepDetail' AND COLUMN_NAME = 'Description') < 110 )
	 ALTER TABLE PROCEDURE_StepDetail ALTER COLUMN [Description] NVARCHAR(110) NOT NULL
END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_Set]') AND type in (N'U'))
BEGIN
	CREATE TABLE [dbo].[PROCEDURE_Set](
		[ID] [int] IDENTITY(1,1) NOT NULL,
		[Name] NVARCHAR(100) NOT NULL,
		[CreateDate] [datetime] NOT NULL,
	 CONSTRAINT [PK_PROCEDURE_Set] PRIMARY KEY CLUSTERED 
	(
		[ID] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
	) ON [PRIMARY]		

END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Step' AND column_name = 'SetID')
BEGIN
	ALTER TABLE dbo.PROCEDURE_Step
	   ADD SetID INT NULL;
END
GO

--IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_SetStep]') AND type in (N'U'))
--BEGIN
--	CREATE TABLE [dbo].[PROCEDURE_SetStep](
--		[ID] [int] IDENTITY(1,1) NOT NULL,
--		[SetID] INT NOT NULL,
--		[StepID] INT NOT NULL,
--	 CONSTRAINT [PK_PROCEDURE_SetStep] PRIMARY KEY CLUSTERED 
--	(
--		[ID] ASC
--	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--	) ON [PRIMARY]		

--END
GO

--Add a colunm on USER_User
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'USER_User' AND column_name = 'Type')
ALTER TABLE dbo.USER_User
	ADD Type int NULL
	GO
	
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'USER_User' AND column_name = 'UpdatedOn')
BEGIN
	ALTER TABLE dbo.USER_User
	   ADD UpdatedOn Datetime NULL;
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'USER_Role' AND column_name = 'UpdatedOn')
BEGIN
	ALTER TABLE dbo.USER_Role
	   ADD UpdatedOn Datetime NULL;
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'USER_Role' AND column_name = 'CanResolveCA')
BEGIN
	ALTER TABLE dbo.USER_Role
	   ADD CanResolveCA bit NULL CONSTRAINT DF_USER_Role_CanResolveCA DEFAULT 1 WITH VALUES
	
END
GO
	
--Add a colunm on USER_User
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'USER_User' AND column_name = 'UserID')
ALTER TABLE dbo.USER_User
	ADD UserID INT IDENTITY
	
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'USER_User' AND column_name = 'StartDate')
ALTER TABLE dbo.USER_User
	ADD StartDate DateTime NULL	
			
IF NOT EXISTS(SELECT * FROM PROCEDURE_DataType WHERE DataTypeName = 'Image')
INSERT INTO PROCEDURE_DataType(DataTypeName, Active)
VALUES ('Image', 1)
GO

IF NOT EXISTS(SELECT * FROM PROCEDURE_DataType WHERE DataTypeName = 'Audio')
INSERT INTO PROCEDURE_DataType(DataTypeName, Active)
VALUES ('Audio', 1)
GO

IF NOT EXISTS(SELECT * FROM PROCEDURE_DataType WHERE DataTypeName = 'Batch Code')
INSERT INTO PROCEDURE_DataType(DataTypeName, Active)
VALUES ('Batch Code', 1)
GO

IF EXISTS(SELECT * FROM PROCEDURE_DataType WHERE DataTypeName = 'Quantity Weight')
DELETE FROM PROCEDURE_DataType
WHERE DataTypeName='Quantity Weight'
GO

IF NOT EXISTS(SELECT * FROM PROCEDURE_DataType WHERE DataTypeName = 'Quantity/Weight')
INSERT INTO PROCEDURE_DataType(DataTypeName, Active)
VALUES ('Quantity/Weight', 1)
GO

IF NOT EXISTS(SELECT * FROM PROCEDURE_DataType WHERE DataTypeName = 'Products')
INSERT INTO PROCEDURE_DataType(DataTypeName, Active)
VALUES ('Products', 1)
GO
IF NOT EXISTS(SELECT * FROM PROCEDURE_DataType WHERE DataTypeName = 'Suppliers')
INSERT INTO PROCEDURE_DataType(DataTypeName, Active)
VALUES ('Suppliers', 1)
GO

IF NOT EXISTS(SELECT * FROM PROCEDURE_DataType WHERE DataTypeName = 'High/Medium/Low')
INSERT INTO PROCEDURE_DataType(DataTypeName, Active)
VALUES ('High/Medium/Low', 1)
GO

IF NOT EXISTS(SELECT * FROM PROCEDURE_DataType WHERE DataTypeName = 'Any Location')
INSERT INTO PROCEDURE_DataType(DataTypeName, Active)
VALUES ('Any Location', 1)
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'APP_System' AND column_name = 'EmailSetting')
ALTER TABLE APP_System ADD EmailSetting nvarchar(500) NULL
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'APP_System' AND column_name = 'ModulePermission')
ALTER TABLE APP_System ADD ModulePermission nvarchar(1000) NULL
GO
--UPDATE APP_System SET ModulePermission = '32150E020A41220E0F15130E0D5C15131404' -- true
--UPDATE APP_System SET ModulePermission = '32150E020A41220E0F15130E0D5C07000D1204' -- false

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'APP_System' AND column_name = 'UpdateInfo')
ALTER TABLE APP_System ADD UpdateInfo nvarchar(MAX) NULL
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'APP_System' AND column_name = 'DefaultPrinter')
ALTER TABLE APP_System ADD DefaultPrinter nvarchar(500) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'APP_System' AND column_name = 'DaysOfWeek')
ALTER TABLE APP_System ADD DaysOfWeek nvarchar(500) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'APP_System' AND column_name = 'MissedEventShowDays')
	ALTER TABLE APP_System ADD MissedEventShowDays INT NOT NULL CONSTRAINT DF_APP_System_MissedEventShowDays DEFAULT 30 WITH VALUES
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'APP_System' AND column_name = 'UpdatedOn')
BEGIN
	ALTER TABLE dbo.APP_System
	   ADD UpdatedOn Datetime NULL;
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'APP_System' AND column_name = 'Print2DBarcode')
BEGIN
	ALTER TABLE dbo.APP_System
	   ADD Print2DBarcode Bit NOT NULL default(0);
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_UserDefinedListDetail' AND column_name = 'TolaranceLevel')
ALTER TABLE dbo.PROCEDURE_UserDefinedListDetail ADD	TolaranceLevel int NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_UserDefinedListDetail' AND column_name = 'UpdatedOn')
BEGIN
	ALTER TABLE dbo.PROCEDURE_UserDefinedListDetail
	   ADD UpdatedOn Datetime NULL;
END
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_UserDefinedListDetail' AND column_name = 'TolaranceLevel')
BEGIN
ALTER TABLE dbo.PROCEDURE_UserDefinedListDetail
   ALTER COLUMN TolaranceLevel decimal(18,2) NULL; 
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'APP_System' AND column_name = 'PDA_Logout')
ALTER TABLE APP_System ADD PDA_Logout nvarchar(100) NULL
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Supplier' AND column_name = 'BRC_ExpiryDate')
ALTER TABLE STOCKCONTROL_Supplier ADD BRC_ExpiryDate datetime NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Supplier' AND column_name = 'UpdatedOn')
BEGIN
	ALTER TABLE dbo.STOCKCONTROL_Supplier
	   ADD UpdatedOn Datetime NULL;
END
GO



IF NOT EXISTS(SELECT * FROM PROCEDURE_DataType WHERE DataTypeName = 'Accept/Reject (White Boxes)')
INSERT INTO PROCEDURE_DataType(DataTypeName, Active)
VALUES ('Accept/Reject (White Boxes)', 1)
GO

IF NOT EXISTS(SELECT * FROM PROCEDURE_DataType WHERE DataTypeName = 'Pass/Fail (White Boxes)')
INSERT INTO PROCEDURE_DataType(DataTypeName, Active)
VALUES ('Pass/Fail (White Boxes)', 1)
GO

IF NOT EXISTS(SELECT * FROM PROCEDURE_DataType WHERE DataTypeName = 'Yes/No (White Boxes)')
INSERT INTO PROCEDURE_DataType(DataTypeName, Active)
VALUES ('Yes/No (White Boxes)', 1)
GO

IF NOT EXISTS(SELECT * FROM PROCEDURE_DataType WHERE DataTypeName = 'Yes/Caution/No')
INSERT INTO PROCEDURE_DataType(DataTypeName, Active)
VALUES ('Yes/Caution/No', 1)
GO

IF NOT EXISTS(SELECT * FROM PROCEDURE_DataType WHERE DataTypeName = 'No/Yes (White Boxes)')
INSERT INTO PROCEDURE_DataType(DataTypeName, Active)
VALUES ('No/Yes (White Boxes)', 1)
GO

IF NOT EXISTS(SELECT * FROM PROCEDURE_DataType WHERE DataTypeName = 'No/Caution/Yes')
INSERT INTO PROCEDURE_DataType(DataTypeName, Active)
VALUES ('No/Caution/Yes', 1)
GO

IF NOT EXISTS(SELECT * FROM PROCEDURE_DataType WHERE DataTypeName = 'Satisfactory/Unsatisfactory')
INSERT INTO PROCEDURE_DataType(DataTypeName, Active)
VALUES ('Satisfactory/Unsatisfactory', 1)
GO

IF NOT EXISTS(SELECT * FROM PROCEDURE_DataType WHERE DataTypeName = 'Tick/Cross')
INSERT [dbo].[PROCEDURE_DataType] ([DataTypeName], [Active]) 
VALUES ('Tick/Cross', 1)
GO

IF NOT EXISTS(SELECT * FROM PROCEDURE_DataType WHERE DataTypeName = 'Score (No Numbers)')
INSERT [dbo].[PROCEDURE_DataType] ([DataTypeName], [Active]) 
VALUES ('Score (No Numbers)', 1)
GO

IF NOT EXISTS(SELECT * FROM PROCEDURE_DataType WHERE DataTypeName = 'Review Data')
INSERT [dbo].[PROCEDURE_DataType] ([DataTypeName], [Active]) 
VALUES ('Review Data', 1)
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'USER_User' AND column_name = 'PermissionOnDepartments')
BEGIN
	ALTER TABLE dbo.USER_User ADD PermissionOnDepartments nvarchar(500) NULL
	EXEC sp_executesql N'update user_user set PermissionOnDepartments=RoleID'
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'APP_System' AND column_name = 'FilterData')
ALTER TABLE dbo.APP_System ADD	FilterData bit NULL
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Job' AND column_name = 'StepID')
BEGIN
	ALTER TABLE PROCEDURE_Job ADD StepID int NULL
	EXEC sp_executesql N'update PROCEDURE_Job set StepId=s.StepID
						 from PROCEDURE_Job j inner join PROCEDURE_Step s on j.Name=s.name'
END	
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Job' AND column_name = 'SupplierName')
BEGIN
	ALTER TABLE PROCEDURE_Job ADD SupplierName NVARCHAR(100)
	--EXEC sp_executesql N'update PROCEDURE_Job  set SupplierName = dbo.fnGetSupplierNameOfJob(JobID,StepID)'
END	
GO


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Job' AND column_name = 'UpdatedOn')
BEGIN
	ALTER TABLE PROCEDURE_Job ADD UpdatedOn DateTime NULL
END	
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Job' AND column_name = 'Verified')
BEGIN
	ALTER TABLE PROCEDURE_Job ADD Verified bit NULL CONSTRAINT DF_Procedure_Job_Verified DEFAULT 0 WITH VALUES;
END	
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Job' AND column_name = 'VerifiyNeeded')
BEGIN
	ALTER TABLE PROCEDURE_Job ADD VerifiyNeeded bit NULL CONSTRAINT DF_Procedure_Job_Verify_Needed DEFAULT 0 WITH VALUES;
END	
GO


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Job' AND column_name = 'EmailSent')
BEGIN
	ALTER TABLE PROCEDURE_Job ADD EmailSent BIT NULL
	EXEC sp_executesql N'UPDATE PROCEDURE_Job SET EmailSent = 1 WHERE EmailSent IS NULL'
END	
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Job' AND column_name = 'MailQueueStatus')
BEGIN
	ALTER TABLE PROCEDURE_Job ADD MailQueueStatus INT NULL
END	
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Job' AND column_name = 'EmailFailComment')
BEGIN
	ALTER TABLE dbo.PROCEDURE_Job
		ADD EmailFailComment nvarchar(500) NULL;
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Job' AND column_name = 'UserName')
BEGIN
	ALTER TABLE PROCEDURE_Job ADD UserName nvarchar(16) NULL
	EXEC sp_executesql N'UPDATE PROCEDURE_Job SET UserName=jd.UserName
	FROM PROCEDURE_Job j 
	INNER JOIN PROCEDURE_JobDetail jd ON jd.JobDetailID = (SELECT TOP 1 JobDetailID FROM  PROCEDURE_JobDetail WHERE JobID = j.JobID)'
END	
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Job' AND column_name = 'IsArchived')
BEGIN
	ALTER TABLE PROCEDURE_Job ADD IsArchived bit NULL CONSTRAINT DF_PROCEDURE_Job_IsArchived DEFAULT 0 WITH VALUES
END	
GO


/*
--Only for Aquascot
IF NOT EXISTS(SELECT * FROM PROCEDURE_DataType WHERE DataTypeName = 'Condition Factor')
INSERT INTO PROCEDURE_DataType(DataTypeName, Active)
VALUES ('Condition Factor', 1)
GO
*/ 
--====================================================================================
--Start Schema For Fixed Scanner
--===================================================================================
/*~~~~~~~~~~~~~~~*/
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'APP_System' AND column_name = 'ScannerPortNo')
ALTER TABLE dbo.APP_System
	ADD ScannerPortNo INT NULL
GO
/*~~~~~~~~~~~~~~~*/
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'APP_System' AND column_name = 'ScannerIPAddress')
ALTER TABLE dbo.APP_System
	ADD ScannerIPAddress NVARCHAR(15) NULL
GO
/*~~~~~~~~~~~~~~~*/
/****** Object:  Table [dbo].[FIXED_Incoming]    Script Date: 10/10/2012 13:02:54 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[FIXED_Incoming]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[FIXED_Incoming](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[ReceivedData] [nvarchar](50) NOT NULL,
	[PortNo] [int] NOT NULL,
	[IPAddress] [nvarchar](15) NULL,
	[ScanDateTime] [datetime] NOT NULL,
 CONSTRAINT [PK_FIXED_Incoming] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Ranger_TrainingCourse]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[RANGER_TrainingCourse](
	[TrainingCourseID] [int] IDENTITY(1,1) NOT NULL,
	[Trainer] [nvarchar](100) NULL,
	[CourseName] [nvarchar](100) NOT NULL,
	[OrganizerID] [int] NOT NULL,
	[StartDate] [datetime] NULL,
	[AttendeeList] [nvarchar](max) NULL,
	[Location] [nvarchar] (100) NULL,
	[Comments] [nvarchar] (250)  NULL,
	[Reminder] [bit] NULL,
	[CreateDate] [datetime] NOT NULL,
	[CreateBy] [nvarchar] (20) NOT NULL ,
	[Note] [Nvarchar] (20) NULL,
 CONSTRAINT [PK_RANGER_TrainingCourse] PRIMARY KEY CLUSTERED 
(
	[TrainingCourseID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO


IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Ranger_TrainingCourse_Frequency]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[RANGER_TrainingCourse_Frequency](
	[FrequencyID] [int] IDENTITY(1,1) NOT NULL,
	[TrainingCourseID] [int] NOT NULL,
	[CheckFrequency] [nvarchar](50) NULL,
	[CheckFrequencyMins] [int]  NULL,
	[CheckFinish] [datetime]  NULL,
	[CheckFirstOfDay] [datetime]  NULL,
	[DayNo] [int] NULL,
	[DayOfWeek] [nvarchar](150) NULL,
	[DayStep] [int] NULL,
	[MonthStep] [int] NULL,
	[WeekNo] [int] NULL,
	[Month] [nvarchar] (16) NULL,	
 CONSTRAINT [PK_RANGER_TrainingCourse_Frequency] PRIMARY KEY CLUSTERED 
(
	[FrequencyID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]


ALTER TABLE [dbo].[RANGER_TrainingCourse_Frequency]  WITH CHECK ADD  CONSTRAINT [FK_RANGER_TrainingCourse_Frequency_FrequencyID] FOREIGN KEY([TrainingCourseID])
REFERENCES [dbo].[RANGER_TrainingCourse] ([TrainingCourseID])


ALTER TABLE [dbo].[RANGER_TrainingCourse_Frequency] CHECK CONSTRAINT [FK_RANGER_TrainingCourse_Frequency_FrequencyID]

END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'Ranger_TrainingCourse' AND column_name = 'ReminderHour')
	ALTER TABLE dbo.Ranger_TrainingCourse ADD
		ReminderHour int NULL
	Go
	
	
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'Ranger_TrainingCourse' AND column_name = 'EndDate')
	ALTER TABLE dbo.Ranger_TrainingCourse ADD
		EndDate datetime NULL
	Go
	
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'Ranger_TrainingCourse' AND column_name = 'CourseDate')
	ALTER TABLE dbo.Ranger_TrainingCourse 
		DROP COLUMN CourseDate 
	Go
	
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'Ranger_TrainingCourse_Frequency' AND column_name = 'CheckFrequencyMins')
	ALTER TABLE dbo.Ranger_TrainingCourse_Frequency 
		DROP COLUMN CheckFrequencyMins 
	Go
	
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'Ranger_TrainingCourse_Frequency' AND column_name = 'CheckFinish')
	ALTER TABLE dbo.Ranger_TrainingCourse_Frequency 
		DROP COLUMN CheckFinish 
	Go
	
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'Ranger_TrainingCourse_Frequency' AND column_name = 'CheckFirstOfDay')
	ALTER TABLE dbo.Ranger_TrainingCourse_Frequency 
		DROP COLUMN CheckFirstOfDay 
	Go
	
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'Ranger_TrainingCourse_Frequency' AND column_name = 'DayNo')
	ALTER TABLE dbo.Ranger_TrainingCourse_Frequency 
		DROP COLUMN DayNo 
	Go
	
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'Ranger_TrainingCourse_Frequency' AND column_name = 'DayOfWeek')
	ALTER TABLE dbo.Ranger_TrainingCourse_Frequency 
		DROP COLUMN [DayOfWeek] 
	Go
	
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'Ranger_TrainingCourse_Frequency' AND column_name = 'DayStep')
	ALTER TABLE dbo.Ranger_TrainingCourse_Frequency 
		DROP COLUMN DayStep 
	Go
	
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'Ranger_TrainingCourse_Frequency' AND column_name = 'MonthStep')
	ALTER TABLE dbo.Ranger_TrainingCourse_Frequency 
		DROP COLUMN MonthStep 
	Go
	
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'Ranger_TrainingCourse_Frequency' AND column_name = 'WeekNo')
	ALTER TABLE dbo.Ranger_TrainingCourse_Frequency 
		DROP COLUMN WeekNo 
	Go
	
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'Ranger_TrainingCourse_Frequency' AND column_name = 'Month')
	ALTER TABLE dbo.Ranger_TrainingCourse_Frequency 
		DROP COLUMN [Month] 
	Go
	
	
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Procedure_AutomaitcReport]') AND type in (N'U'))
BEGIN
	CREATE TABLE [dbo].[Procedure_AutomaitcReport](
		[ID] [int] IDENTITY(1,1) NOT NULL,
		[StepID] [int] NOT NULL,
		[Frequency] [nvarchar](50) NOT NULL,
		[UserIDList] [nvarchar](max) NULL,
	 CONSTRAINT [PK_Procedure_AutomaitcReport] PRIMARY KEY CLUSTERED 
	(
		[ID] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
	) ON [PRIMARY]
END
GO




/****** Object:  Table [dbo].[PDA_Exception]    Script Date: 04/04/2013 14:32:10 ******/
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PDA_Exception]') AND type in (N'U'))

CREATE TABLE [dbo].[PDA_Exception](
	[ExceptionID] [int]  NOT NULL,
	[ExceptionType] [int] NOT NULL,
	[ExceptionMessage] [nvarchar](max) NOT NULL,
	[ExceptionCreateUser] [nvarchar](16) NULL,
	[ExceptionPassUser] [nvarchar](16) NULL,
	[ExceptionDate] [datetime] NULL,
	[ObjectID] [int] NULL,
	[CreateDate] [datetime] NULL,
	[NonConformance] [nvarchar](512) NULL,
	[ActionRequired] [nvarchar](512) NULL,
	[ActionTaken] [nvarchar](512) NULL,
	[Comments] [nvarchar](512) NULL,
	[WorkRequestNo] [nvarchar](24) NULL,
	[ResolveBy] [datetime] NULL,
	[Resolved] [datetime] NULL,
	[TypeID] [int] NULL,
	[Barcode] [nvarchar](24) NULL,
	[Status] [nvarchar](24) NULL,
	[AssignTo] [nvarchar](16) NULL,
	[StepID] [int] NULL,
	[Descidentity] [int] NULL,
	[Image] [varbinary](max) NULL,
	[Signature] [varbinary](max) NULL,
	[CorrectiveActionType] [NVARCHAR](20) NULL,
	[IsModified] [bit] NULL,
	[ResolvedImage] [varbinary](max) NULL,
 CONSTRAINT [PK_PDA_Exception] PRIMARY KEY CLUSTERED 
(
	[ExceptionID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]


GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_Exception' AND column_name = 'PrevActionTaken')
ALTER TABLE dbo.PDA_Exception ADD
	PrevActionTaken NVARCHAR(512) NULL
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RANGER_EmailHistory]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[RANGER_EmailHistory](
	[EmailHistoryID] [int] IDENTITY(1,1) NOT NULL,
	[Subject] [nvarchar](250) NULL,
	[Body] [nvarchar](Max)  NULL,
	[ObjectId] [int]  NULL,
	[ObjectType] [int] NULL,
	[SentTime] [datetime] NOT NULL,
	[CreateDate] [datetime] NOT NULL,
	[CreateBy] [nvarchar] (20) NULL,
 CONSTRAINT [PK_RANGER_EmailHistory] PRIMARY KEY CLUSTERED 
(
	[EmailHistoryID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RANGER_EmailTo]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[RANGER_EmailTo](
	[EmailToID] [int] IDENTITY(1,1) NOT NULL,
	[EmailHistoryID] [int] NOT NULL,
	[ToEmail] [nvarchar](Max)  NULL,
	[SentToObjectID] [int]  NULL,
	[SentToObjectType] [int] NULL,
 CONSTRAINT [PK_RANGER_EmailTo] PRIMARY KEY CLUSTERED 
(
	[EmailToID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]


ALTER TABLE [dbo].[RANGER_EmailTo]  WITH CHECK ADD  CONSTRAINT [FK_RANGER_EmailTo_EmailToID] FOREIGN KEY([EmailHistoryID])
REFERENCES [dbo].[RANGER_EmailHistory] ([EmailHistoryID])


ALTER TABLE [dbo].[RANGER_EmailTo] CHECK CONSTRAINT [FK_RANGER_EmailTo_EmailToID]

END
GO


/*~~~~~~~~~~~~~~~*/
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_FIXED_Incoming_ScanDateTime]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[FIXED_Incoming] ADD  CONSTRAINT [DF_FIXED_Incoming_ScanDateTime]  DEFAULT (getdate()) FOR [ScanDateTime]
END
GO
--====================================================================================
--End Schema For Fixed Scanner
--===================================================================================

/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_Transactions' AND column_name = 'CAImage')
ALTER TABLE dbo.PDA_Transactions ADD
	CAImage VARBINARY(MAX) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_Transactions' AND column_name = 'CAAudio')
ALTER TABLE dbo.PDA_Transactions ADD
	CAAudio VARBINARY(MAX) NULL
GO

--IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_Transactions' AND column_name = 'AudioComment')
--ALTER TABLE dbo.PDA_Transactions ADD
--	AudioComment VARBINARY(MAX) NULL
--GO

ALTER TABLE dbo.PDA_Transactions SET (LOCK_ESCALATION = TABLE)
GO
COMMIT

GO

/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
/*BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.PDA_Transactions_Mirror
	DROP CONSTRAINT DF_PDA_Transactions__Mirror_RecordID
GO
ALTER TABLE dbo.PDA_Transactions_Mirror
	DROP CONSTRAINT DF_PDA_Transactions_Mirror_FailCount
GO
CREATE TABLE dbo.Tmp_PDA_Transactions_Mirror
	(
	RecordID uniqueidentifier NOT NULL ROWGUIDCOL,
	TranID tinyint NOT NULL,
	TranUserName nvarchar(15) NULL,
	BigText nvarchar(2000) NULL,
	DeviceIP nvarchar(12) NULL,
	TranDate datetime NULL,
	Signature varbinary(MAX) NULL,
	CAImage varbinary(MAX) NULL,
	FailCount tinyint NOT NULL,
	Processed datetime NULL
	)  ON [PRIMARY]
	 TEXTIMAGE_ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_PDA_Transactions_Mirror SET (LOCK_ESCALATION = TABLE)
GO
ALTER TABLE dbo.Tmp_PDA_Transactions_Mirror ADD CONSTRAINT
	DF_PDA_Transactions__Mirror_RecordID DEFAULT (newid()) FOR RecordID
GO
ALTER TABLE dbo.Tmp_PDA_Transactions_Mirror ADD CONSTRAINT
	DF_PDA_Transactions_Mirror_FailCount DEFAULT ((0)) FOR FailCount
GO
IF EXISTS(SELECT * FROM dbo.PDA_Transactions_Mirror)
	 EXEC('INSERT INTO dbo.Tmp_PDA_Transactions_Mirror (RecordID, TranID, TranUserName, BigText, DeviceIP, TranDate, Signature, FailCount, Processed)
		SELECT RecordID, TranID, TranUserName, BigText, DeviceIP, TranDate, Signature, FailCount, Processed FROM dbo.PDA_Transactions_Mirror WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.PDA_Transactions_Mirror
GO
EXECUTE sp_rename N'dbo.Tmp_PDA_Transactions_Mirror', N'PDA_Transactions_Mirror', 'OBJECT' 
GO
ALTER TABLE dbo.PDA_Transactions_Mirror ADD CONSTRAINT
	PK_PDA_Transactions_Mirror PRIMARY KEY CLUSTERED 
	(
	RecordID
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
COMMIT
*/
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'RANGER_Exception' AND column_name = 'ResolvedImage')
ALTER TABLE dbo.RANGER_Exception ADD
	ResolvedImage VARBINARY(MAX) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'RANGER_Exception' AND column_name = 'Audio')
ALTER TABLE dbo.RANGER_Exception ADD
	Audio VARBINARY(MAX) NULL
GO


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'RANGER_Exception' AND column_name = 'Investigation')
ALTER TABLE dbo.RANGER_Exception ADD
	Investigation NVARCHAR(400) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'RANGER_Exception' AND column_name = 'UpdatedOn')
ALTER TABLE dbo.RANGER_Exception ADD
	UpdatedOn DATETIME NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'RANGER_Exception' AND column_name = 'ListDetailID')
ALTER TABLE dbo.RANGER_Exception ADD
	ListDetailID INT NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'RANGER_Exception' AND column_name = 'CaptureValue')
ALTER TABLE dbo.RANGER_Exception ADD
	CaptureValue NVARCHAR(300) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'RANGER_Exception' AND column_name = 'StepSequencePosition')
ALTER TABLE dbo.RANGER_Exception ADD
	StepSequencePosition INT NULL
GO


BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_Transactions_Mirror' AND column_name = 'CAImage')
ALTER TABLE dbo.PDA_Transactions_Mirror ADD
	CAImage VARBINARY(MAX) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_Transactions_Mirror' AND column_name = 'CAAudio')
ALTER TABLE dbo.PDA_Transactions_Mirror ADD
	CAAudio VARBINARY(MAX) NULL
GO

--IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_Transactions_Mirror' AND column_name = 'AudioComment')
--ALTER TABLE dbo.PDA_Transactions_Mirror ADD
--	AudioComment VARBINARY(MAX) NULL
--GO

ALTER TABLE dbo.PDA_Transactions SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
GO


/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'RANGER_Exception' AND column_name = 'Image')
ALTER TABLE dbo.RANGER_Exception ADD
	Image VARBINARY(MAX) NULL
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'RANGER_Exception' AND column_name = 'Signature')
ALTER TABLE dbo.RANGER_Exception ADD
	Signature VARBINARY(MAX) NULL
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'RANGER_Exception' AND column_name = 'CorrectiveActionType')
ALTER TABLE dbo.RANGER_Exception ADD
	CorrectiveActionType NVARCHAR(20) NULL
GO
ALTER TABLE dbo.RANGER_Exception SET (LOCK_ESCALATION = TABLE)
GO
COMMIT

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'RANGER_Exception' AND column_name = 'FilePath')
ALTER TABLE dbo.RANGER_Exception ADD
	FilePath NVARCHAR(300) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'RANGER_Exception' AND column_name = 'PrevActionTaken')
ALTER TABLE dbo.RANGER_Exception ADD
	PrevActionTaken NVARCHAR(512) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Step_Associated_Document' AND column_name = 'UpdatedOn')
ALTER TABLE dbo.PROCEDURE_Step_Associated_Document ADD
	UpdatedOn DateTime NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Step_Associated_Document' AND column_name = 'ReferenceDocID')
ALTER TABLE dbo.PROCEDURE_Step_Associated_Document ADD
	ReferenceDocID INT NULL
GO

/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Step_Associated_Document' AND column_name = 'DocumentContent')
ALTER TABLE dbo.PROCEDURE_Step_Associated_Document ADD
	DocumentContent VARBINARY(MAX) NULL
GO
ALTER TABLE dbo.PROCEDURE_Step_Associated_Document SET (LOCK_ESCALATION = TABLE)
GO
COMMIT

/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_JobDetail' AND column_name = 'MinValue')
ALTER TABLE dbo.PROCEDURE_JobDetail ADD
	MinValue REAL NULL,
	MaxValue REAL NULL
GO
ALTER TABLE dbo.PROCEDURE_JobDetail SET (LOCK_ESCALATION = TABLE)
GO
COMMIT


------------Add Review Date column to Procedure_Step table------------
/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_JobDetail' AND column_name = 'Description')
BEGIN
    IF( (SELECT CHARACTER_MAXIMUM_LENGTH FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'PROCEDURE_JobDetail' AND COLUMN_NAME = 'Description') < 110 )
	 ALTER TABLE PROCEDURE_JobDetail ALTER COLUMN [Description] NVARCHAR(110) NOT NULL
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Step' AND column_name = 'ReviewDate')
ALTER TABLE dbo.PROCEDURE_Step ADD
	ReviewDate datetime NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Step' AND column_name = 'Tolerance')
ALTER TABLE dbo.PROCEDURE_Step ADD
	Tolerance int NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Step' AND column_name = 'Author')
ALTER TABLE dbo.PROCEDURE_Step ADD
	Author nvarchar(16) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Step' AND column_name = 'AuthorText')
ALTER TABLE dbo.PROCEDURE_Step ADD
	AuthorText nvarchar(16) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Step' AND column_name = 'RevisionNo')
ALTER TABLE dbo.PROCEDURE_Step ADD
	RevisionNo nvarchar(8) NULL
GO

--RevisionNo

ALTER TABLE dbo.PROCEDURE_Step SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
--------------------------------------------------------------------
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Step' AND column_name = 'DocRefNo')
ALTER TABLE dbo.PROCEDURE_Step ADD
	DocRefNo NVARCHAR(20) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Step' AND column_name = 'IssueNo')
ALTER TABLE dbo.PROCEDURE_Step ADD
	IssueNo NVARCHAR(10) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Step' AND column_name = 'IssueDate')
ALTER TABLE dbo.PROCEDURE_Step ADD
	IssueDate datetime NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Step' AND column_name = 'CollectedIDList')
ALTER TABLE dbo.PROCEDURE_Step ADD
	CollectedIDList nvarchar(1024) NULL
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Step' AND column_name = 'LastRecordedDate')
ALTER TABLE dbo.PROCEDURE_Step ADD LastRecordedDate datetime NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_Procedure' AND column_name = 'StartDateTime')
ALTER TABLE dbo.PDA_Procedure ADD
	StartDateTime datetime NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_Procedure' AND column_name = 'SequencePosition')
ALTER TABLE dbo.PDA_Procedure ADD
	SequencePosition INT NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_Procedure' AND column_name = 'EndDateTime')
ALTER TABLE dbo.PDA_Procedure ADD
	EndDateTime datetime NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_Procedure' AND column_name = 'TimeTaken')
ALTER TABLE dbo.PDA_Procedure ADD
	TimeTaken time(0) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_Procedure' AND column_name = 'ScheduleDownTime')
ALTER TABLE dbo.PDA_Procedure ADD
	ScheduleDownTime time(0) NULL
GO	

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_Procedure' AND column_name = 'UnScheduleDownTime')
ALTER TABLE dbo.PDA_Procedure ADD
	UnScheduleDownTime time(0) NULL
GO	

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_Procedure' AND column_name = 'AlertID')
ALTER TABLE dbo.PDA_Procedure ADD
	AlertID INT NULL
GO	

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_Procedure' AND column_name = 'NextSteps')
ALTER TABLE dbo.PDA_Procedure ADD
	NextSteps varchar(1024) NULL
GO	

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_Procedure' AND column_name = 'TypeProcedure')
ALTER TABLE dbo.PDA_Procedure ADD
	TypeProcedure INT NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_Procedure' AND column_name = 'IsParked')
ALTER TABLE dbo.PDA_Procedure ADD
	IsParked BIT NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_Procedure' AND column_name = 'HandsetUserName')
ALTER TABLE dbo.PDA_Procedure ADD
	HandsetUserName NVARCHAR(16) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_Procedure' AND column_name = 'ParkedReminder')
ALTER TABLE dbo.PDA_Procedure ADD
	ParkedReminder datetime NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_Procedure' AND column_name = 'ReminderMinutes')
ALTER TABLE dbo.PDA_Procedure ADD
	ReminderMinutes INT NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_Procedure' AND column_name = 'CommentImage')
ALTER TABLE dbo.PDA_Procedure ADD
	CommentImage varbinary(MAX) NULL
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_JobDetail' AND column_name = 'Comments')
BEGIN
	IF (SELECT character_maximum_length FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_JobDetail' AND column_name = 'Comments'  )<>300
	ALTER TABLE dbo.PROCEDURE_JobDetail ALTER COLUMN Comments nvarchar(300)
END 
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_JobDetail' AND column_name = 'CaptureValue')
BEGIN
	IF (SELECT character_maximum_length FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_JobDetail' AND column_name = 'CaptureValue'  )<>300
	ALTER TABLE dbo.PROCEDURE_JobDetail ALTER COLUMN CaptureValue nvarchar(300)
END 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_JobDetail' AND column_name = 'ObjectID')
ALTER TABLE dbo.PROCEDURE_JobDetail ADD
	ObjectID INT NULL
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_ProcedureDetail' AND column_name = 'DataTypeName')
BEGIN
ALTER TABLE dbo.PDA_ProcedureDetail
   ALTER COLUMN DataTypeName nvarchar(256) NOT NULL;
   
END 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_ProcedureDetail' AND column_name = 'CAImage')
ALTER TABLE dbo.PDA_ProcedureDetail ADD
	CAImage VARBINARY(MAX) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_ProcedureDetail' AND column_name = 'CAAudio')
ALTER TABLE dbo.PDA_ProcedureDetail ADD
	CAAudio VARBINARY(MAX) NULL
GO

--IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_ProcedureDetail' AND column_name = 'AudioComment')
--ALTER TABLE dbo.PDA_ProcedureDetail ADD
--	AudioComment VARBINARY(MAX) NULL
--GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_ProcedureDetail' AND column_name = 'CorrectiveActionAssignee')
ALTER TABLE dbo.PDA_ProcedureDetail ADD
	CorrectiveActionAssignee NVARCHAR(24) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_ProcedureDetail' AND column_name = 'CorrectiveActionStatus')
ALTER TABLE dbo.PDA_ProcedureDetail ADD
	CorrectiveActionStatus NVARCHAR(24) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_ProcedureDetail' AND column_name = 'CorrectiveActionType')
ALTER TABLE dbo.PDA_ProcedureDetail ADD
	CorrectiveActionType NVARCHAR(20) NULL
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_ProcedureDetail' AND column_name = 'StepImage')
ALTER TABLE dbo.PDA_ProcedureDetail ADD
	StepImage VARBINARY(MAX) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_ProcedureDetail' AND column_name = 'UnsavedData')
ALTER TABLE dbo.PDA_ProcedureDetail ADD
	UnsavedData nvarchar(128) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_ProcedureDetail' AND column_name = 'ExceptionType')
ALTER TABLE dbo.PDA_ProcedureDetail ADD
	ExceptionType INT NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_JobDetail' AND column_name = 'StepImage')
ALTER TABLE dbo.PROCEDURE_JobDetail ADD
	StepImage VARBINARY(MAX) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_JobDetail' AND column_name = 'UnsavedData')
ALTER TABLE dbo.PROCEDURE_JobDetail ADD
	UnsavedData nvarchar(128) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_Transactions' AND column_name = 'StepImage')
ALTER TABLE dbo.PDA_Transactions ADD
	StepImage VARBINARY(MAX) NULL
GO

GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_Transactions_Mirror' AND column_name = 'StepImage')
ALTER TABLE dbo.PDA_Transactions_Mirror ADD
	StepImage VARBINARY(MAX) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'APP_System' AND column_name = 'AutoNextWorkReqNo')
ALTER TABLE dbo.APP_System ADD
	AutoNextWorkReqNo bit NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'APP_System' AND column_name = 'LogoutActive')
ALTER TABLE dbo.APP_System ADD
	LogoutActive bit NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'APP_System' AND column_name = 'HandSetSync')
ALTER TABLE dbo.APP_System ADD
	HandSetSync NVARCHAR(200) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'APP_System' AND column_name = 'MaxNoPCAllowed')
ALTER TABLE dbo.APP_System ADD
	MaxNoPCAllowed NVARCHAR(50) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'Procedure_Alert' AND column_name = 'AlertType')
ALTER TABLE dbo.Procedure_Alert ADD
	AlertType int NULL
GO

UPDATE Procedure_Alert SET AlertType = 1 WHERE AlertType IS NULL

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'Procedure_Alert' AND column_name = 'IsHistory')
ALTER TABLE dbo.Procedure_Alert ADD
	IsHistory bit NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'Procedure_Alert' AND column_name = 'ActionFinishTime')
ALTER TABLE dbo.Procedure_Alert ADD
	ActionFinishTime datetime NULL
GO

UPDATE Procedure_Alert SET ActionFinishTime = DateTimeOfAction WHERE ActionFinishTime IS NULL
GO

-----------------------Update------------------
UPDATE PROCEDURE_JobDetail
SET 
MinValue = (SELECT MinValue FROM PROCEDURE_StepDetail WHERE PROCEDURE_StepDetail.StepDetailID = PROCEDURE_JobDetail.StepDetailID), 
MaxValue = (SELECT MaxValue FROM PROCEDURE_StepDetail WHERE PROCEDURE_StepDetail.StepDetailID = PROCEDURE_JobDetail.StepDetailID)
WHERE PROCEDURE_JobDetail.MinValue IS NULL
--------------------------------------------------

--===================================================================================================
--New columns in PROCEDURE_UserDefinedList SequenceNo, CreatedBy, CreatedDate, UpdatedBy, UpdatedDate
--===================================================================================================

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_UserDefinedList' AND column_name = 'SequenceNo')
BEGIN
ALTER TABLE dbo.PROCEDURE_UserDefinedList
   ADD SequenceNo int  NULL; 
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_UserDefinedList' AND column_name = 'DaysToResolve')
BEGIN
ALTER TABLE dbo.PROCEDURE_UserDefinedList
   ADD DaysToResolve int  NULL; 
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_UserDefinedList' AND column_name = 'UpdatedOn')
BEGIN
	ALTER TABLE dbo.PROCEDURE_UserDefinedList
	   ADD UpdatedOn Datetime NULL;
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_UserDefinedList' AND column_name = 'CreatedBy')
BEGIN
ALTER TABLE dbo.PROCEDURE_UserDefinedList
   ADD CreatedBy nvarchar(16)  NULL; 
END
GO


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_UserDefinedList' AND column_name = 'CreatedDate')
BEGIN
ALTER TABLE dbo.PROCEDURE_UserDefinedList
   ADD CreatedDate datetime  NULL; 
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_UserDefinedList' AND column_name = 'UpdatedBy')
BEGIN
ALTER TABLE dbo.PROCEDURE_UserDefinedList
   ADD UpdatedBy nvarchar(16)  NULL; 
END
GO


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_UserDefinedList' AND column_name = 'UpdatedDate')
BEGIN
ALTER TABLE dbo.PROCEDURE_UserDefinedList
   ADD UpdatedDate datetime  NULL; 
END
GO

UPDATE PROCEDURE_UserDefinedList 
SET
CreatedBy = 'david',
CreatedDate = Getdate()
WHERE (CreatedBy IS NULL) AND CreatedDate IS NULL
GO


UPDATE ca 
SET ca.SequenceNo = p.RowNo	
FROM
PROCEDURE_UserDefinedList ca
INNER JOIN 
(
	SELECT  
	ROW_NUMBER() Over(Order by [Name] asc) as RowNo, 
	[ListID], CorrectiveAction
	FROM [PROCEDURE_UserDefinedList]
	WHERE CorrectiveAction = 0
) p on p.[ListID] = ca.ListID

WHERE ca.SequenceNo IS NULL
GO

UPDATE ca 
SET ca.SequenceNo = p.RowNo	
FROM
PROCEDURE_UserDefinedList ca
INNER JOIN 
(
	SELECT  
	ROW_NUMBER() Over(Order by [Name] asc) as RowNo, 
	[ListID], CorrectiveAction
	FROM [PROCEDURE_UserDefinedList]
	WHERE CorrectiveAction = 1
) p on p.[ListID] = ca.ListID

WHERE ca.SequenceNo IS NULL
GO


IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_UserDefinedList' AND column_name = 'SequenceNo')
BEGIN
ALTER TABLE dbo.PROCEDURE_UserDefinedList
   ALTER COLUMN SequenceNo int NOT NULL; 
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Job' AND column_name = 'GoodInNo')

ALTER TABLE PROCEDURE_Job ADD GoodInNo nvarchar(6) NULL
GO
declare @GoodInNo int 
declare @jobid int
set @GoodInNo=0
DECLARE jobs CURSOR FOR
	SELECT JobID FROM PROCEDURE_Job WHERE GoodInNo is null and TypeProcedure=1 ORDER BY JobID
	OPEN jobs
	FETCH NEXT FROM jobs INTO @jobid
	WHILE @@FETCH_STATUS = 0
	BEGIN
	SET @GoodInNo = @GoodInNo + 1
	UPDATE PROCEDURE_Job SET GoodInNo = RIGHT( '00000'+ CONVERT(nvarchar(6), @GoodInNo),6) where JobID=@jobid
	FETCH NEXT FROM jobs INTO @jobid
END
CLOSE jobs
DEALLOCATE jobs
GO

-----------------Play/Pause----------------------

/****** Object:  Table [dbo].[PROCEDURE_StepReading]    Script Date: 04/28/2012 02:24:03 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_StepReading]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[PROCEDURE_StepReading](
	[ReadingID] [int] IDENTITY(1,1) NOT NULL,
	[StepID] [int] NOT NULL,
	[StartDateTime] [datetime] NOT NULL,
	[EndDateTime] [datetime] NOT NULL,
	[TimeTaken] [time](0) NULL,
	[ScheduleDownTime] [time](0) NULL,
	[UnScheduleDownTime] [time](0) NULL,
	[UserName] [nvarchar](16) NOT NULL,
	[CreateDate] [datetime] NOT NULL,
 CONSTRAINT [PK_PROCEDURE_StepReading] PRIMARY KEY CLUSTERED 
(
	[ReadingID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_PROCEDURE_StepReading_CreateDate]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[PROCEDURE_StepReading] ADD  CONSTRAINT [DF_PROCEDURE_StepReading_CreateDate]  DEFAULT (getdate()) FOR [CreateDate]
END
GO

/****** Object:  Table [dbo].[REPORT_SavedReports]    Script Date: 05/15/2012 12:40:35 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[REPORT_SavedReports]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[REPORT_SavedReports](
	[ReportID] [int] IDENTITY(1,1) NOT NULL,
	[ReportName] [varchar](100) NOT NULL,
	[ProcedureID] [int] NOT NULL,
	[StepDetailID] [int] NOT NULL,
	[UserName] [nvarchar](50) NULL,
	[DateRange] [nvarchar](50) NULL,
	[DateFrom] [datetime] NULL,
	[DateTo] [datetime] NULL,
	[ItemID] [int] NULL,
	[LocationID] [int] NULL,
	[ItemType] [nvarchar](50) NULL,
	[StatusSelection] [nvarchar](50) NULL,
	[ReportType] [int] NOT NULL,
	[CreatedBy] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_REPORT_SavedReports] PRIMARY KEY CLUSTERED 
(
	[ReportID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO

/****** Object:  Default [DF_REPORT_SavedReports_StepDetailID]    Script Date: 05/15/2012 12:40:35 ******/
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_REPORT_SavedReports_StepDetailID]') AND parent_object_id = OBJECT_ID(N'[dbo].[REPORT_SavedReports]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_REPORT_SavedReports_StepDetailID]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[REPORT_SavedReports] ADD  CONSTRAINT [DF_REPORT_SavedReports_StepDetailID]  DEFAULT ((0)) FOR [StepDetailID]
END


End
GO
--Add a colunm on REPORT_SavedReports
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'REPORT_SavedReports' AND column_name = 'ProcedureIDList')
ALTER TABLE dbo.REPORT_SavedReports
	ADD ProcedureIDList nvarchar(max) NULL
GO
	
--Add a colunm on REPORT_SavedReports
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'REPORT_SavedReports' AND column_name = 'GP1')
ALTER TABLE dbo.REPORT_SavedReports
	ADD GP1 INT NULL
GO
/****** Object:  Default [DF_REPORT_SavedReports_ReportType]    Script Date: 05/15/2012 12:40:35 ******/
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_REPORT_SavedReports_ReportType]') AND parent_object_id = OBJECT_ID(N'[dbo].[REPORT_SavedReports]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_REPORT_SavedReports_ReportType]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[REPORT_SavedReports] ADD  CONSTRAINT [DF_REPORT_SavedReports_ReportType]  DEFAULT ((1)) FOR [ReportType]
END
End
GO
-------------------------------ALTER TABLE-----------------------------------
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'REPORT_SavedReports' AND column_name = 'ReportType')
BEGIN
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT


BEGIN TRANSACTION
CREATE TABLE dbo.Tmp_REPORT_SavedReports
	(
	ReportID int NOT NULL IDENTITY (1, 1),
	ReportName varchar(100) NOT NULL,
	ProcedureID int NOT NULL,
	StepDetailID int NOT NULL,
	UserName nvarchar(50) NULL,
	DateRange nvarchar(50) NULL,
	DateFrom datetime NULL,
	DateTo datetime NULL,
	ItemID int NULL,
	LocationID int NULL,
	ItemType nvarchar(50) NULL,
	StatusSelection nvarchar(50) NULL,
	ReportType int NOT NULL,
	CreatedBy nvarchar(50) NOT NULL
	)  ON [PRIMARY]

ALTER TABLE dbo.Tmp_REPORT_SavedReports SET (LOCK_ESCALATION = TABLE)

ALTER TABLE dbo.Tmp_REPORT_SavedReports ADD CONSTRAINT
	DF_REPORT_SavedReports_StepDetailID DEFAULT 0 FOR StepDetailID

ALTER TABLE dbo.Tmp_REPORT_SavedReports ADD CONSTRAINT
	DF_REPORT_SavedReports_ReportType DEFAULT 1 FOR ReportType

SET IDENTITY_INSERT dbo.Tmp_REPORT_SavedReports ON

IF EXISTS(SELECT * FROM dbo.REPORT_SavedReports)
	 EXEC('INSERT INTO dbo.Tmp_REPORT_SavedReports (ReportID, ReportName, ProcedureID, UserName, DateRange, DateFrom, DateTo, ItemID, LocationID, ItemType, CreatedBy)
		SELECT ReportID, ReportName, ProcedureID, UserName, DateRange, DateFrom, DateTo, ItemID, LocationID, LocationType, CreatedBy FROM dbo.REPORT_SavedReports WITH (HOLDLOCK TABLOCKX)')

SET IDENTITY_INSERT dbo.Tmp_REPORT_SavedReports OFF

DROP TABLE dbo.REPORT_SavedReports

EXECUTE sp_rename N'dbo.Tmp_REPORT_SavedReports', N'REPORT_SavedReports', 'OBJECT' 

ALTER TABLE dbo.REPORT_SavedReports ADD CONSTRAINT
	PK_REPORT_SavedReports PRIMARY KEY CLUSTERED 
	(
	ReportID
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]


COMMIT
END
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
IF  NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PDA_AllObjects]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[PDA_AllObjects](
	[ObjectID] [int] NOT NULL,
	[Description] [nvarchar](200) NOT NULL,
	[Barcode] [nvarchar](24) NULL,
	[MinValue] [real] NULL,
	[MaxValue] [real] NULL,
	[DataType] [nvarchar](16) NULL,
	[GP1] [bit] NULL,
	[GP2] [bit] NULL,
	[GP3] [bit] NULL,
	[GP4] [bit] NULL,
	[GP5] [bit] NULL,
	[GP6] [bit] NULL,
	[GP7] [bit] NULL,
	[GP8] [bit] NULL,
	[GP9] [bit] NULL,
	[GP10] [bit] NULL,
	[ListID] [int] NULL,
 CONSTRAINT [PK_PDA_AllObjects] PRIMARY KEY CLUSTERED 
(
	[ObjectID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

--========================================================================================================================
--Purchase Orders related tables
--========================================================================================================================

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_PurchaseOrder]') AND type in (N'U'))
BEGIN
	CREATE TABLE [dbo].[STOCKCONTROL_PurchaseOrder](
		[POID] [int] IDENTITY(1,1) NOT NULL,
		[PONumber] [nvarchar](20) NOT NULL,
		[SupplierID] [int] NOT NULL,
		[OrderedBy] [nvarchar](16) NULL,
		[OrderDate] [datetime] NULL,
		[ReceivedByDate] [datetime] NULL,
		[Comments] [nvarchar](200) NULL,
		[OrderStatus] [int] NOT NULL,
	 CONSTRAINT [PK_STOCKCONTROL_PurchaseOrder] PRIMARY KEY CLUSTERED 
	(
		[POID] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
	) ON [PRIMARY]
END
GO

IF NOT  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_STOCKCONTROL_PurchaseOrder_Supplier]') AND parent_object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_PurchaseOrder]'))
BEGIN
	ALTER TABLE [dbo].[STOCKCONTROL_PurchaseOrder]  WITH CHECK ADD  CONSTRAINT [FK_STOCKCONTROL_PurchaseOrder_Supplier] FOREIGN KEY([SupplierID])
	REFERENCES [dbo].[STOCKCONTROL_Supplier] ([SupplierID])

	ALTER TABLE [dbo].[STOCKCONTROL_PurchaseOrder] CHECK CONSTRAINT [FK_STOCKCONTROL_PurchaseOrder_Supplier]
END
GO


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_PurchaseOrder' AND column_name = 'BookedIn')
ALTER TABLE dbo.STOCKCONTROL_PurchaseOrder ADD
	BookedIn DATETIME NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_PurchaseOrder' AND column_name = 'UpdatedOn')
BEGIN
	ALTER TABLE dbo.STOCKCONTROL_PurchaseOrder
	   ADD UpdatedOn Datetime NULL;
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_PurchaseOrder' AND column_name = 'BookedBy')
ALTER TABLE dbo.STOCKCONTROL_PurchaseOrder ADD
	BookedBy NVARCHAR(300) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_PurchaseOrder' AND column_name = 'FilePath')
ALTER TABLE dbo.STOCKCONTROL_PurchaseOrder ADD
	FilePath NVARCHAR(300) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_PurchaseOrder' AND column_name = 'FilePath2')
ALTER TABLE dbo.STOCKCONTROL_PurchaseOrder ADD
	FilePath2 NVARCHAR(300) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_PurchaseOrder' AND column_name = 'FilePath3')
ALTER TABLE dbo.STOCKCONTROL_PurchaseOrder ADD
	FilePath3 NVARCHAR(300) NULL
GO


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_PurchaseOrder' AND column_name = 'Status')
	ALTER TABLE dbo.STOCKCONTROL_PurchaseOrder ADD [Status]  NVARCHAR(25) NOT NULL DEFAULT('Outstanding')
GO


IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_PurchaseOrderDetail]') AND type in (N'U'))
BEGIN
	CREATE TABLE [dbo].[STOCKCONTROL_PurchaseOrderDetail](
		[PODetailID] [int] IDENTITY(1,1) NOT NULL,
		[POID] [int] NOT NULL,
		[ProductID] [int] NOT NULL,
		[Quantity] [decimal](18, 2) NOT NULL,
		[CostPrice] [decimal](18, 2) NOT NULL,
	 CONSTRAINT [PK_STOCKCONTROL_PurchaseOrderDetail] PRIMARY KEY CLUSTERED 
	(
		[PODetailID] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
	) ON [PRIMARY]
END
GO

IF NOT  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_STOCKCONTROL_PurchaseOrderDetail_Product]') AND parent_object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_PurchaseOrderDetail]'))
BEGIN
	ALTER TABLE [dbo].[STOCKCONTROL_PurchaseOrderDetail]  WITH CHECK ADD  CONSTRAINT [FK_STOCKCONTROL_PurchaseOrderDetail_Product] FOREIGN KEY([ProductID])
	REFERENCES [dbo].[STOCKCONTROL_Product] ([ProductID])

	ALTER TABLE [dbo].[STOCKCONTROL_PurchaseOrderDetail] CHECK CONSTRAINT [FK_STOCKCONTROL_PurchaseOrderDetail_Product]
END
GO

IF NOT  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_STOCKCONTROL_PurchaseOrderDetail_PurchaseOrder]') AND parent_object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_PurchaseOrderDetail]'))
BEGIN
	ALTER TABLE [dbo].[STOCKCONTROL_PurchaseOrderDetail]  WITH CHECK ADD  CONSTRAINT [FK_STOCKCONTROL_PurchaseOrderDetail_PurchaseOrder] FOREIGN KEY([POID])
	REFERENCES [dbo].[STOCKCONTROL_PurchaseOrder] ([POID])

	ALTER TABLE [dbo].[STOCKCONTROL_PurchaseOrderDetail] CHECK CONSTRAINT [FK_STOCKCONTROL_PurchaseOrderDetail_PurchaseOrder]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_PurchaseOrderDetail' AND column_name = 'ReceivedQuantity')
--ALTER TABLE dbo.STOCKCONTROL_PurchaseOrderDetail DROP COLUMN [ReceivedQuantity]
BEGIN
	ALTER TABLE dbo.STOCKCONTROL_PurchaseOrderDetail ADD [ReceivedQuantity]  DECIMAL(18,2) NULL 
	ALTER TABLE dbo.STOCKCONTROL_PurchaseOrderDetail ADD CONSTRAINT df_ReceivedQty DEFAULT 0 FOR [ReceivedQuantity]
END
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_PurchaseOrderDetail' AND column_name = 'ReceivedQuantity' AND data_type = 'int')
 BEGIN 
    DECLARE @Command  nvarchar(1000)
    SELECT @Command = 'ALTER TABLE  STOCKCONTROL_PurchaseOrderDetail DROP CONSTRAINT ' + dfconstraints.name FROM SYS.TABLES tbl
      JOIN SYS.DEFAULT_CONSTRAINTS dfconstraints ON dfconstraints.parent_object_id = tbl.object_id 
      JOIN SYS.COLUMNS col ON col.object_id = tbl.object_id AND col.column_id = dfconstraints.parent_column_id
      WHERE tbl.name = 'STOCKCONTROL_PurchaseOrderDetail' AND col.name='ReceivedQuantity'
      execute (@Command)
     
	ALTER TABLE dbo.STOCKCONTROL_PurchaseOrderDetail ALTER COLUMN [ReceivedQuantity]  DECIMAL(18,2) NULL 
	ALTER TABLE dbo.STOCKCONTROL_PurchaseOrderDetail ADD CONSTRAINT df_ReceivedQty DEFAULT 0 FOR [ReceivedQuantity]
 END
GO

UPDATE STOCKCONTROL_PurchaseOrderDetail SET ReceivedQuantity = 0 WHERE ReceivedQuantity IS NULL

GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_PurchaseOrderDetail' AND column_name = 'Comment')
	ALTER TABLE dbo.STOCKCONTROL_PurchaseOrderDetail ADD [Comment]  NVARCHAR(50) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_PurchaseOrderDetail' AND column_name = 'UpdatedOn')
BEGIN
	ALTER TABLE dbo.STOCKCONTROL_PurchaseOrderDetail
	   ADD UpdatedOn Datetime NULL;
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_PurchaseOrderDetail' AND column_name = 'IsComplete')
	ALTER TABLE dbo.STOCKCONTROL_PurchaseOrderDetail ADD [IsComplete]  BIT NOT NULL DEFAULT(0)
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_PurchaseOrderCheck]') AND type in (N'U'))
BEGIN
	CREATE TABLE [dbo].[STOCKCONTROL_PurchaseOrderCheck](
		[ID] [int] IDENTITY(1,1) NOT NULL,
		[PODetailID] [int] NOT NULL,
		[ProductID] [int] NOT NULL,
		[RackLocationID] [int] NOT NULL,
		[Quantity] [decimal](18, 2) NOT NULL,
		[CreateDate] [DateTime] NULL,
		[CreatedBy] [nvarchar](16) NULL,
	 CONSTRAINT [PK_STOCKCONTROL_PurchaseOrderCheck] PRIMARY KEY CLUSTERED 
	(
		[ID] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
	) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_PurchaseOrderCheck' AND column_name = 'IsReturn')
	ALTER TABLE dbo.STOCKCONTROL_PurchaseOrderCheck ADD IsReturn  BIT NOT NULL DEFAULT(0)
GO

--=====================================================================================================================================
--End of Purchase Orders related schema script
--=====================================================================================================================================
/****** Object:  Table [dbo].[STOCKCONTROL_ProductCode]    Script Date: 04/17/2013 22:52:26 ******/
IF  NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_ProductCode]') AND type in (N'U'))
CREATE TABLE [dbo].[STOCKCONTROL_ProductCode](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[ProductID] [int] NOT NULL,
	[TraceabilityCode] [nvarchar](20) NOT NULL,
	[JobDetailID] [int] NULL,
 CONSTRAINT [PK_STOCKCONTROL_ProductCode] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_STOCKCONTROL_ProductCode_STOCKCONTROL_Product]') AND parent_object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_ProductCode]'))
BEGIN
	ALTER TABLE [dbo].[STOCKCONTROL_ProductCode]  WITH CHECK ADD  CONSTRAINT [FK_STOCKCONTROL_ProductCode_STOCKCONTROL_Product] FOREIGN KEY([ProductID])
	REFERENCES [dbo].[STOCKCONTROL_Product] ([ProductID])
	
	ALTER TABLE [dbo].[STOCKCONTROL_ProductCode] CHECK CONSTRAINT [FK_STOCKCONTROL_ProductCode_STOCKCONTROL_Product]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_ProductCode' AND column_name = 'SupplierID')
ALTER TABLE dbo.STOCKCONTROL_ProductCode ADD
	SupplierID INT NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_ProductCode' AND column_name = 'UpdatedOn')
ALTER TABLE dbo.STOCKCONTROL_ProductCode ADD
	UpdatedOn DateTime NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_ProductCode' AND column_name = 'BornIn')
ALTER TABLE dbo.STOCKCONTROL_ProductCode ADD
 BornIn nvarchar(100) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_ProductCode' AND column_name = 'RaisedIn')
ALTER TABLE dbo.STOCKCONTROL_ProductCode ADD
 RaisedIn nvarchar(100) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_ProductCode' AND column_name = 'SlaughteredIn')
ALTER TABLE dbo.STOCKCONTROL_ProductCode ADD
 SlaughteredIn nvarchar(100) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_ProductCode' AND column_name = 'SlaughtereHouseNo')
ALTER TABLE dbo.STOCKCONTROL_ProductCode ADD
 SlaughtereHouseNo nvarchar(100) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_ProductCode' AND column_name = 'CutIn')
ALTER TABLE dbo.STOCKCONTROL_ProductCode ADD
 CutIn nvarchar(100) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_ProductCode' AND column_name = 'CutInPlantNo')
ALTER TABLE dbo.STOCKCONTROL_ProductCode ADD
 CutInPlantNo nvarchar(100) NULL
GO


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PDA_ProductCode]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[PDA_ProductCode](
 [ProductCodeID] [int] NOT NULL,
 [ProductID] [int] NOT NULL,
 [TraceabilityCode] [nvarchar](20) NOT NULL,
 [JobDetailID] [int] NULL,
 [GoodInNo] [nvarchar](6) NULL,
 [SupplierID] [int] NULL,
 [DateReceived] [datetime] NULL,
 [HandsetUserName] [nvarchar](16) NOT NULL,
 CONSTRAINT [PK_PDA_ProductCode] PRIMARY KEY CLUSTERED 
(
 [ProductCodeID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
)
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_ProductCode' AND column_name = 'BornIn')
ALTER TABLE dbo.PDA_ProductCode ADD
 BornIn nvarchar(100) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_ProductCode' AND column_name = 'RaisedIn')
ALTER TABLE dbo.PDA_ProductCode ADD
 RaisedIn nvarchar(100) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_ProductCode' AND column_name = 'SlaughteredIn')
ALTER TABLE dbo.PDA_ProductCode ADD
 SlaughteredIn nvarchar(100) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_ProductCode' AND column_name = 'SlaughtereHouseNo')
ALTER TABLE dbo.PDA_ProductCode ADD
 SlaughtereHouseNo nvarchar(100) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_ProductCode' AND column_name = 'CutIn')
ALTER TABLE dbo.PDA_ProductCode ADD
 CutIn nvarchar(100) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_ProductCode' AND column_name = 'CutInPlantNo')
ALTER TABLE dbo.PDA_ProductCode ADD
 CutInPlantNo nvarchar(100) NULL
GO

/****** Object:  Table [dbo].[PDA_Job]    Script Date: 04/17/2013 22:52:26 ******/

IF  NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PDA_Job]') AND type in (N'U'))
CREATE TABLE [dbo].[PDA_Job](
	[JobID] [int] NOT NULL,
	[GoodInNo] [nvarchar](6) NULL,
	[StepID] [int] NULL,
 CONSTRAINT [PK_PDA_Job] PRIMARY KEY CLUSTERED 
(
	[JobID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_Job' AND column_name = 'IsTemporary')	
ALTER TABLE dbo.PDA_Job
	ADD IsTemporary Bit NULL
GO




------Stock Control ----------------------------------
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_Transactions' AND column_name = 'DeviceID')
ALTER TABLE dbo.PDA_Transactions
	ADD DeviceID NVARCHAR(512) NULL
GO
	
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_Transactions_Mirror' AND column_name = 'DeviceID')	
ALTER TABLE dbo.PDA_Transactions_Mirror
	ADD DeviceID NVARCHAR(512) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Job' AND column_name = 'DeviceID')	
ALTER TABLE dbo.PROCEDURE_Job
	ADD DeviceID NVARCHAR(512) NULL
GO 

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Job' AND column_name = 'TypeProcedure')	
ALTER TABLE dbo.PROCEDURE_Job
	ADD TypeProcedure INT NULL
GO 


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_Step' AND column_name = 'TypeProcedure')	
ALTER TABLE dbo.PROCEDURE_Step
	ADD TypeProcedure INT NULL
GO 

/****** Object:  Table [dbo].[Ranger_Handset]    Script Date: 09/27/2013 18:50:48 ******/
IF  NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Ranger_Handset]') AND type in (N'U'))
BEGIN

	CREATE TABLE [dbo].[Ranger_Handset](
		[ID] [int] IDENTITY(1,1) NOT NULL,
		[SerialNumber] [nvarchar](512) NOT NULL,
		[Label] [nvarchar](256) NULL,
		[JobID] [int] NULL,
		[LastStepID] [int] NULL,
		[LastReceived] [datetime] NULL,
		[LastSent] [datetime] NULL,	
		[LastUser] [nvarchar](16) NULL
	 CONSTRAINT [PK_Ranger_Handset] PRIMARY KEY CLUSTERED 
	(
		[ID] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
	) ON [PRIMARY]

	EXEC sp_executesql N'INSERT INTO Ranger_Handset(SerialNumber, JobID, LastStepID, LastReceived, LastUser)
				SELECT Distinct  DeviceID as SerialNumber, JobID, StepID, CompleteDate, UserName
				FROM PROCEDURE_Job Table1
				WHERE CompleteDate in (Select Max(z.CompleteDate)From PROCEDURE_Job z Where z.DeviceID=Table1.DeviceID Group by DeviceID)
				Order By CompleteDate Desc'
END

GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'Ranger_Handset' AND column_name = 'LastDocSent')
BEGIN
ALTER TABLE dbo.Ranger_Handset
   ADD LastDocSent DateTime  NULL;    
END
GO

/****** Object:  Table [dbo].[STOCKCONTROL_Supplier]    Script Date: 06/30/2012 17:42:54 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_Supplier]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[STOCKCONTROL_Supplier](
	[SupplierID] [int] IDENTITY(1,1) NOT NULL,
	[SupplierName] [nvarchar](50) NOT NULL,
	[SupplierCode] [nvarchar](15) NULL,
	[Address1] [nvarchar](50) NULL,
	[Address2] [nvarchar](50) NULL,
	[Address3] [nvarchar](50) NULL,
	[Address4] [nvarchar](50) NULL,
	[Postcode] [nvarchar](8) NULL,
	[TelNo1] [nvarchar](16) NULL,
	[TelNo2] [nvarchar](16) NULL,
	[Fax] [nvarchar](16) NULL,
	[EmailAddress] [nvarchar](50) NULL,
	[ReviewDate] [datetime] NULL,
	[CategoryID] [int] NULL,
	[Comments] [nvarchar](max) NULL,
	[AccountManager] [nvarchar](50) NULL,
	[ApprovalDate] [datetime] NULL,
	[ApprovalBasis] [nvarchar](30) NULL,
	[Rating] [smallint] NULL,
	[Website] [nvarchar](250) NULL,
	[ContactName1] [nvarchar](50) NULL,
	[ContactName2] [nvarchar](50) NULL,
	[Active] [bit] NULL,
 CONSTRAINT [PK_STOCKCONTROL_Supplier] PRIMARY KEY CLUSTERED 
(
	[SupplierID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
/****** Object:  Table [dbo].[STOCKCONTROL_StockCheck]    Script Date: 06/30/2012 17:42:54 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_StockCheck]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[STOCKCONTROL_StockCheck](
	[StockCheckID] [int] IDENTITY(1,1) NOT NULL,
	[RackLocationID] INT NULL,
	[ProductID] [int] NULL,
	[ScanDateTime] [datetime] NULL,
	[Quantity] [real] NULL,
	[UserName] [nvarchar](16) NULL,
 CONSTRAINT [PK_STOCKCONTROL_StockCheck] PRIMARY KEY CLUSTERED 
(
	[StockCheckID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_StockCheck' AND column_name = 'RackLocationID')
BEGIN
ALTER TABLE dbo.STOCKCONTROL_StockCheck
   ADD RackLocationID int  NULL;    
END
GO

/****** Object:  Table [dbo].[STOCKCONTROL_Picking]    Script Date: 06/10/2013 17:42:54 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_Picking]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[STOCKCONTROL_Picking](
	[PickID] [int] IDENTITY(1,1) NOT NULL,
	[RackLocationID] INT NULL,
	[ProductID] [int] NULL,
	[ScanDateTime] [datetime] NULL,
	[Quantity] [real] NULL,
	[UserName] [nvarchar](16) NULL,
 CONSTRAINT [PK_STOCKCONTROL_Picking] PRIMARY KEY CLUSTERED 
(
	[PickID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Picking' AND column_name = 'PickingType')
BEGIN
	ALTER TABLE dbo.STOCKCONTROL_Picking
	   ADD PickingType INT NULL;   
END 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Picking' AND column_name = 'SalesOrderID')
BEGIN
	ALTER TABLE dbo.STOCKCONTROL_Picking
	   ADD SalesOrderID INT NULL;   
END 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Picking' AND column_name = 'SalesOrderDetailID')
BEGIN
	ALTER TABLE dbo.STOCKCONTROL_Picking
	   ADD SalesOrderDetailID INT NULL;   
END 
GO


/****** Object:  Table [dbo].[STOCKCONTROL_Rack]    Script Date: 06/30/2012 17:42:54 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_Rack]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[STOCKCONTROL_Rack](
	[RackID] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_STOCKCONTROL_Rack] PRIMARY KEY CLUSTERED 
(
	[RackID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Rack' AND column_name = 'UpdatedOn')
BEGIN
	ALTER TABLE dbo.STOCKCONTROL_Rack
	   ADD UpdatedOn Datetime NULL;
END
GO

IF NOT  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_STOCKCONTROL_Rack_RackProduct]') AND parent_object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_RackProduct]'))
BEGIN
	ALTER TABLE [dbo].[STOCKCONTROL_RackProduct]  WITH CHECK ADD  CONSTRAINT [FK_STOCKCONTROL_Rack_RackProduct] FOREIGN KEY([RackLocationID])
	REFERENCES [dbo].[STOCKCONTROL_Rack] ([RackLocationID])

	ALTER TABLE [dbo].[STOCKCONTROL_RackProduct] CHECK CONSTRAINT [FK_STOCKCONTROL_Rack_RackProduct]
END
GO

/****** Object:  Table [dbo].[STOCKCONTROL_Product]    Script Date: 06/30/2012 17:42:54 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_Product]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[STOCKCONTROL_Product](
	[ProductID] [int]  NOT NULL,
	[ProductCode] [nvarchar](20) NOT NULL,
	[Description] [nvarchar](50) NOT NULL,
	[CategoryID] [int] NULL,
	[Type] [nvarchar](50) NOT NULL,
	[StockBy] [nvarchar](50) NULL,
	[CostPrice] [real] NULL,
	[SalePrice] [real] NULL,
	[MinimumStockLevel] [int] NULL,
	[Barcode1] [nvarchar](25) NULL,
	[Barcode2] [nvarchar](25) NULL,
	[BatchNumberItem] [bit] NULL,
	[QuarantineItem] [bit] NULL,
	[Comments] [nvarchar](max) NULL,
	[Active] [bit] NULL,
	[NumberSold] [real] NULL,
	[TotalSalePrice] [real] NULL,
	[Beef] [bit] NULL,
 CONSTRAINT [PK_STOCKCONTROL_Product] PRIMARY KEY CLUSTERED 
(
	[ProductID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Product' AND column_name = 'AlertCreated')
BEGIN
ALTER TABLE dbo.STOCKCONTROL_Product
   ADD AlertCreated bit NULL ; 
   
END 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Product' AND column_name = 'Ingredients')
BEGIN
ALTER TABLE dbo.STOCKCONTROL_Product
   ADD Ingredients NVARCHAR(100) NULL ; 
   
END 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Product' AND column_name = 'QtyInStock')
BEGIN
ALTER TABLE dbo.STOCKCONTROL_Product
   ADD QtyInStock int NULL ; 
   
END 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Product' AND column_name = 'UpdatedOn')
BEGIN
	ALTER TABLE dbo.STOCKCONTROL_Product
	   ADD UpdatedOn Datetime NULL;
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Product' AND column_name = 'IsSerialProduct')
BEGIN
ALTER TABLE dbo.STOCKCONTROL_Product
   ADD IsSerialProduct bit NULL ; 
   
END 
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Product' AND column_name = 'QtyInStock')
BEGIN
ALTER TABLE dbo.STOCKCONTROL_Product
   ALTER COLUMN QtyInStock decimal(18, 2) NULL;   
END 
GO


/****** Object:  Table [dbo].[STOCKCONTROL_FinishedProductItem]    Script Date: 04/23/2014 18:19:35 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_FinishedProductItem]') AND type in (N'U'))
BEGIN
	CREATE TABLE [dbo].[STOCKCONTROL_FinishedProductItem](
		[ID] [int] IDENTITY(1,1) NOT NULL,
		[FinishedProductID] [int] NOT NULL,
		[ProductID] [int] NOT NULL,
		[Quantity] [decimal](18, 2) NULL,
	 CONSTRAINT [PK_STOCKCONTROL_FinishedProductItem] PRIMARY KEY CLUSTERED 
	(
		[ID] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
	) ON [PRIMARY]

ALTER TABLE [dbo].[STOCKCONTROL_FinishedProductItem]  WITH CHECK ADD  CONSTRAINT [FK_STOCKCONTROL_FinishedProductItem_Product] FOREIGN KEY([ProductID])
REFERENCES [dbo].[STOCKCONTROL_Product] ([ProductID])

ALTER TABLE [dbo].[STOCKCONTROL_FinishedProductItem] CHECK CONSTRAINT [FK_STOCKCONTROL_FinishedProductItem_Product]

ALTER TABLE [dbo].[STOCKCONTROL_FinishedProductItem]  WITH CHECK ADD  CONSTRAINT [FK_STOCKCONTROL_FinishedProductItem_FinishedProduct] FOREIGN KEY([FinishedProductID])
REFERENCES [dbo].[STOCKCONTROL_Product] ([ProductID])

ALTER TABLE [dbo].[STOCKCONTROL_FinishedProductItem] CHECK CONSTRAINT [FK_STOCKCONTROL_FinishedProductItem_FinishedProduct]

END
GO


/****** Object:  Table [dbo].[STOCKCONTROL_RackProduct]    Script Date: 06/30/2012 17:42:54 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_RackProduct]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[STOCKCONTROL_RackProduct](
	[RackID] [nvarchar](50) NOT NULL,
	[ProductID] [int] NOT NULL,
	[Qty] [decimal](18, 2) NOT NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_RackProduct' AND column_name = 'RackLocationID')
BEGIN
ALTER TABLE dbo.STOCKCONTROL_RackProduct
   ADD RackLocationID int  NULL;    
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_RackProduct' AND column_name = 'UpdatedOn')
BEGIN
	ALTER TABLE dbo.STOCKCONTROL_RackProduct
	   ADD UpdatedOn Datetime NULL;
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_RackProduct' AND column_name = 'ID')
BEGIN
ALTER TABLE dbo.STOCKCONTROL_RackProduct
   ADD ID int NOT NULL IDENTITY (1, 1); 
   
END 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_RackProduct' AND column_name = 'LastScanTime')
BEGIN
ALTER TABLE dbo.STOCKCONTROL_RackProduct
   ADD LastScanTime DATETIME  NULL ; 
   EXEC sp_executesql N'UPDATE   rp
						SET rp.LastScanTime = sc.ScanDateTime 
						FROM
						(SELECT  Max(StockCheckID) StockCheckID FROM STOCKCONTROL_StockCheck sc
						GROUP BY sc.ProductID, sc.RackLocationID) sc1
						INNER JOIN STOCKCONTROL_StockCheck  sc ON sc1.StockCheckID = sc.StockCheckID
						INNER JOIN STOCKCONTROL_RackProduct rp on sc.ProductID = rp.ProductID AND sc.RackLocationID = rp.RackLocationID '
END 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_RackProduct' AND column_name = 'HandsetUserName')
BEGIN
ALTER TABLE dbo.STOCKCONTROL_RackProduct
   ADD HandsetUserName nvarchar(16)  NULL ; 
   EXEC sp_executesql N'UPDATE   rp
						SET rp.HandsetUserName = sc.UserName 
						FROM
						(SELECT  Max(StockCheckID) StockCheckID FROM STOCKCONTROL_StockCheck sc
						GROUP BY sc.ProductID, sc.RackLocationID) sc1
						INNER JOIN STOCKCONTROL_StockCheck  sc ON sc1.StockCheckID = sc.StockCheckID
						INNER JOIN STOCKCONTROL_RackProduct rp on sc.ProductID = rp.ProductID AND sc.RackLocationID = rp.RackLocationID'
END 
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_RackProduct]') AND name = N'PK_STOCKCONTROL_RackProduct')
	ALTER TABLE [dbo].[STOCKCONTROL_RackProduct] ADD  CONSTRAINT [PK_STOCKCONTROL_RackProduct] PRIMARY KEY CLUSTERED 
	(
		[ID] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_RackProduct' AND column_name = 'Qty' AND DATA_TYPE = 'int')
BEGIN
ALTER TABLE dbo.STOCKCONTROL_RackProduct
	DROP CONSTRAINT DF_STOCKCONTROL_RackProduct_Qty; 
ALTER TABLE dbo.STOCKCONTROL_RackProduct
	ALTER COLUMN Qty decimal(18, 2) NOT NULL;
ALTER TABLE dbo.STOCKCONTROL_RackProduct
	ADD CONSTRAINT	DF_STOCKCONTROL_RackProduct_Qty DEFAULT ((0)) FOR Qty;
END 
GO


IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PDA_RackProduct]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[PDA_RackProduct](
	[ProductID] [int] NOT NULL,
	[RackLocationID] [int] NOT NULL,
	[Qty] [decimal](18, 2) NOT NULL
) ON [PRIMARY]
END
GO
--======================Add RackLocationID column in STOCKCONTROL_Rack===============
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Rack' AND column_name = 'RackLocationID')
BEGIN
ALTER TABLE dbo.STOCKCONTROL_Rack
   ADD RackLocationID int NOT NULL IDENTITY (1, 1); 
   
END 

--======================Make RackID non primary key, make RackLocationID column primary
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_Rack]') AND name = N'PK_STOCKCONTROL_Rack')
	ALTER TABLE [dbo].[STOCKCONTROL_Rack] DROP CONSTRAINT [PK_STOCKCONTROL_Rack]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_Rack]') AND name = N'PK_STOCKCONTROL_Rack_1')
	ALTER TABLE [dbo].[STOCKCONTROL_Rack] ADD  CONSTRAINT [PK_STOCKCONTROL_Rack_1] PRIMARY KEY CLUSTERED 
	(
		[RackLocationID] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

--=======================Add RackLocationID column to all related table


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_StockCheck' AND column_name = 'ForceStockCheckID')
BEGIN
ALTER TABLE dbo.STOCKCONTROL_StockCheck
   ADD ForceStockCheckID int  NULL;    
END
GO


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_StockCheck' AND column_name = 'CheckType')
BEGIN
ALTER TABLE dbo.STOCKCONTROL_StockCheck
   ADD CheckType int  NULL;    
END
GO

--===========================Sync RackLocationID to all related table
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_RackProduct' AND column_name = 'RackID')
BEGIN
	EXEC sp_executesql N'UPDATE rp 
		SET rp.RackLocationID = r.RackLocationID
		FROM
		STOCKCONTROL_RackProduct rp
		INNER JOIN STOCKCONTROL_Rack r on rp.RackID = r.RackID'
	
END
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_StockCheck' AND column_name = 'RackID')
BEGIN
	EXEC sp_executesql N'UPDATE rp 
	SET rp.RackLocationID = r.RackLocationID
	FROM
	STOCKCONTROL_StockCheck rp
	INNER JOIN STOCKCONTROL_Rack r on rp.RackID = r.RackID'
END
GO

--========================DELETE old RackID columns from reference table=========================
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_RackProduct' AND column_name = 'RackID')
	ALTER TABLE [dbo].[STOCKCONTROL_RackProduct] DROP COLUMN [RackID] 
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_StockCheck' AND column_name = 'RackID')
	ALTER TABLE [dbo].[STOCKCONTROL_StockCheck] DROP COLUMN [RackID] 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_StockTransfer]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[STOCKCONTROL_StockTransfer](
	[StockTransferID] [int] IDENTITY(1,1) NOT NULL,
	[ProductID] [int]  NOT NULL,
	[MoveFromLocationID] [int] NOT NULL,
	[MoveToLocationID] [int] NOT NULL,
	[MovedQuantity] [decimal](18,2) NULL,
	[IsPutAway] [bit] NOT NULL,
	[TransferDateTime] [datetime] NULL,
	[UserName] [nvarchar](16) NULL,
 CONSTRAINT [PK_STOCKCONTROL_StockTransfer] PRIMARY KEY CLUSTERED 
(
	[StockTransferID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO


/****** Object:  Table [dbo].[STOCKCONTROL_Customer]    Script Date: 06/30/2012 17:42:54 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_Customer]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[STOCKCONTROL_Customer](
	[CustomerID] [int] IDENTITY(1,1) NOT NULL,
	[CustomerName] [nvarchar](50) NOT NULL,
	[AccountManager] [nvarchar](30) NULL,
	[Address1] [nvarchar](50) NULL,
	[Address2] [nvarchar](50) NULL,
	[Address3] [nvarchar](50) NULL,
	[Address4] [nvarchar](50) NULL,
	[Postcode] [nvarchar](8) NULL,
	[EmailAddress] [nvarchar](50) NULL,
	[TelNo1] [nvarchar](16) NULL,
	[ReviewDate] [nvarchar](6) NULL,
	[Comments] [nvarchar](max) NULL,
	[CategoryID] [int] NULL,
	[Status] [nvarchar](20) NULL,
 CONSTRAINT [PK_STOCKCONTROL_Customer] PRIMARY KEY CLUSTERED 
(
	[CustomerID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Customer' AND column_name = 'DeliveryDates')	
ALTER TABLE dbo.STOCKCONTROL_Customer
	ADD DeliveryDates NVARCHAR(100) NULL
GO 

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Customer' AND column_name = 'UpdatedOn')
BEGIN
	ALTER TABLE dbo.STOCKCONTROL_Customer
	   ADD UpdatedOn Datetime NULL;
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Customer' AND column_name = 'EmailAddress2')
ALTER TABLE dbo.STOCKCONTROL_Customer ADD
	EmailAddress2 nvarchar(50)	
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Customer' AND column_name = 'EmailAddress3')
ALTER TABLE dbo.STOCKCONTROL_Customer ADD
	EmailAddress3 nvarchar(50)	
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Customer' AND column_name = 'Address1')
BEGIN
	ALTER TABLE dbo.STOCKCONTROL_Customer
	   ALTER COLUMN Address1 nvarchar(250) NULL;   
END 
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Customer' AND column_name = 'Address2')
BEGIN
	ALTER TABLE dbo.STOCKCONTROL_Customer
	   ALTER COLUMN Address2 nvarchar(250) NULL;   
END 
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Customer' AND column_name = 'Address3')
BEGIN
	ALTER TABLE dbo.STOCKCONTROL_Customer
	   ALTER COLUMN Address3 nvarchar(250) NULL;   
END 
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Customer' AND column_name = 'Address4')
BEGIN
	ALTER TABLE dbo.STOCKCONTROL_Customer
	   ALTER COLUMN Address4 nvarchar(250) NULL;   
END 
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Customer' AND column_name = 'Address5')
ALTER TABLE dbo.STOCKCONTROL_Customer ADD
	Address5 nvarchar(250)	
GO

IF  EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Customer' AND column_name = 'Postcode')
 EXEC  sp_RENAME 'STOCKCONTROL_Customer.[Postcode]' , 'Postcode1', 'COLUMN'
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Customer' AND column_name = 'Postcode2')
ALTER TABLE dbo.STOCKCONTROL_Customer ADD
	Postcode2 nvarchar(8)	
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Customer' AND column_name = 'Postcode3')
ALTER TABLE dbo.STOCKCONTROL_Customer ADD
	Postcode3 nvarchar(8)	
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Customer' AND column_name = 'Postcode4')
ALTER TABLE dbo.STOCKCONTROL_Customer ADD
	Postcode4 nvarchar(8)	
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Customer' AND column_name = 'Postcode5')
ALTER TABLE dbo.STOCKCONTROL_Customer ADD
	Postcode5 nvarchar(8)	
GO


--Change review column nvarchar to datetime
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Customer' AND column_name = 'ReviewDate')
BEGIN
ALTER TABLE dbo.STOCKCONTROL_Customer
   ALTER COLUMN ReviewDate datetime NULL;   
END 
GO

UPDATE STOCKCONTROL_Customer SET ReviewDate = NULL WHERE ReviewDate = '1900-01-01'


/****** Object:  Table [dbo].[STOCKCONTROL_Category]    Script Date: 06/30/2012 17:42:54 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_Category]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[STOCKCONTROL_Category](
	[CategoryID] [int] IDENTITY(1,1) NOT NULL,
	[Description] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_STOCKCONTROL_Category] PRIMARY KEY CLUSTERED 
(
	[CategoryID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Category' AND column_name = 'UpdatedOn')
BEGIN
	ALTER TABLE dbo.STOCKCONTROL_Category
	   ADD UpdatedOn Datetime NULL;
END
GO

/****** Object:  Table [dbo].[PDA_StockCheck]    Script Date: 08/07/2012 20:59:04 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PDA_StockCheck]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[PDA_StockCheck](
	[StockCheckID] [int] IDENTITY(1,1) NOT NULL,
	[RackID] [nvarchar](50) NULL,
	[ProductID] [int] NULL,
	[ScanDateTime] [datetime] NULL,
	[Quantity] [real] NULL,
 CONSTRAINT [PK_PDA_StockCheck] PRIMARY KEY CLUSTERED 
(
	[StockCheckID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
--Remove [RackID] column
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_StockCheck' AND column_name = 'RackID')
BEGIN
ALTER TABLE dbo.PDA_StockCheck
   DROP COLUMN RackID
END 
GO

--Add [RackLocationID] column
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_StockCheck' AND column_name = 'RackLocationID')
BEGIN
ALTER TABLE dbo.PDA_StockCheck
   ADD RackLocationID INT;
END 
GO

/****** Object:  Table [dbo].[PDA_ForcedStockCheck]    Script Date: 05/29/2013 17:46:25 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PDA_ForcedStockCheck]') AND type in (N'U'))
BEGIN
	CREATE TABLE [dbo].[PDA_ForcedStockCheck](
		[PDAStockCheckID] [int] NOT NULL,
		[ForcedStockCheckID] [int] NOT NULL,
		[AlertID] [int] NULL,
		[FSName] [nvarchar](100) NOT NULL,
		[Complete] [bit] NULL,
		[NextForcedByIDs] [nvarchar](max) NULL,
		[SelectedRackLocationID] [int] NULL,
		[NumberOfIterations] [int] NULL,
		[CompletedIterations] [int] NULL,
		[ScanCheckStage] [int] NULL,
	 CONSTRAINT [PK_PDA_ForcedStockCheck] PRIMARY KEY CLUSTERED 
	(
		[PDAStockCheckID] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
	) ON [PRIMARY]
END
GO

--PDA_ForcedStockCheck
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_ForcedStockCheck' AND column_name = 'SCType')
BEGIN
ALTER TABLE dbo.PDA_ForcedStockCheck
   ADD SCType INT;
END 
GO

/****** Object:  Table [dbo].[PDA_ForcedStockCheckDetail]    Script Date: 05/29/2013 17:46:41 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PDA_ForcedStockCheckDetail]') AND type in (N'U'))
BEGIN
	CREATE TABLE [dbo].[PDA_ForcedStockCheckDetail](
		[PDAStockCheckID] [int] NOT NULL,
		[ProductID] [int] NOT NULL,
		[RackLocationID] [int] NOT NULL,
		[ScanDateTime] [datetime] NULL,
		[Quantity] [decimal](18, 2) NULL
	) ON [PRIMARY]
END
GO

--Change review column nvarchar to datetime
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Supplier' AND column_name = 'ReviewDate')
BEGIN
ALTER TABLE dbo.STOCKCONTROL_Supplier
   ALTER COLUMN ReviewDate datetime NULL;   
END 
GO

--Add column ApprovalDate, ApprovalBasis, Rating, Website
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Supplier' AND column_name = 'ApprovalDate')
ALTER TABLE dbo.STOCKCONTROL_Supplier ADD
	ApprovalDate datetime NULL
GO
	
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Supplier' AND column_name = 'ApprovalBasis')
ALTER TABLE dbo.STOCKCONTROL_Supplier ADD
	ApprovalBasis nvarchar(30) NULL	
GO
	
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Supplier' AND column_name = 'Rating')
ALTER TABLE dbo.STOCKCONTROL_Supplier ADD
	Rating smallint NULL	
GO
	
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Supplier' AND column_name = 'Website')
ALTER TABLE dbo.STOCKCONTROL_Supplier ADD
	Website nvarchar(250)	
GO	

--Need only for Solent
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Supplier' AND column_name = 'ContactName')
	exec sp_RENAME 'STOCKCONTROL_Supplier.ContactName' , 'ContactName1', 'COLUMN' 	
GO	

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Supplier' AND column_name = 'ContactName1')
ALTER TABLE dbo.STOCKCONTROL_Supplier ADD
	ContactName1 nvarchar(50)	
GO	

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Supplier' AND column_name = 'ContactName2')
ALTER TABLE dbo.STOCKCONTROL_Supplier ADD
	ContactName2 nvarchar(50)	
GO	
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Supplier' AND column_name = 'EmailAddress2')
ALTER TABLE dbo.STOCKCONTROL_Supplier ADD
	EmailAddress2 nvarchar(50)	
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Supplier' AND column_name = 'EmailAddress3')
ALTER TABLE dbo.STOCKCONTROL_Supplier ADD
	EmailAddress3 nvarchar(50)	
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Supplier' AND column_name = 'CreditLimit')
ALTER TABLE dbo.STOCKCONTROL_Supplier ADD
	CreditLimit decimal(18, 2)	
GO	

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Product' AND column_name = 'ActualMargin')
ALTER TABLE STOCKCONTROL_Product ADD ActualMargin Real NULL	
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Product' AND column_name = 'RequiredMargin')
ALTER TABLE dbo.STOCKCONTROL_Product ADD RequiredMargin Real NULL
GO
UPDATE STOCKCONTROL_Product SET ActualMargin = 0 WHERE ActualMargin IS NULL
UPDATE STOCKCONTROL_Product SET RequiredMargin = 35 WHERE RequiredMargin IS NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Product' AND column_name = 'IsSundriesProduct')
ALTER TABLE dbo.STOCKCONTROL_Product ADD IsSundriesProduct bit NULL
go
update STOCKCONTROL_Product set IsSundriesProduct=1 WHERE IsSundriesProduct IS NULL
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Product' AND column_name = 'IsCustomeProduct')
ALTER TABLE dbo.STOCKCONTROL_Product ADD IsCustomeProduct bit NULL
go
update STOCKCONTROL_Product set IsCustomeProduct=1 WHERE IsCustomeProduct IS NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Product' AND column_name = 'PieceQuantity')
	ALTER TABLE dbo.STOCKCONTROL_Product ADD PieceQuantity decimal(18,2) NULL
GO

IF EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'STOCKCONTROL_Product' AND  COLUMN_NAME = 'StockBy')
BEGIN
	UPDATE STOCKCONTROL_Product SET StockBy = UPPER(StockBy)
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Product' AND column_name = 'DisplayUntil')
ALTER TABLE dbo.STOCKCONTROL_Product ADD
	DisplayUntil int NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Product' AND column_name = 'BestBefore')
ALTER TABLE dbo.STOCKCONTROL_Product ADD
	BestBefore int NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Product' AND column_name = 'MinTemp')
ALTER TABLE dbo.STOCKCONTROL_Product ADD
	MinTemp decimal(18,2) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Product' AND column_name = 'MaxTemp')
ALTER TABLE dbo.STOCKCONTROL_Product ADD
	MaxTemp decimal(18,2) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Product' AND column_name = 'CofO')
ALTER TABLE dbo.STOCKCONTROL_Product ADD
	CofO nvarchar(20) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Product' AND column_name = 'PLU')
ALTER TABLE dbo.STOCKCONTROL_Product ADD
	PLU int NULL
GO

--==============================================
--Stock control multiple product of a supplier and multiple supplier of a product
--==============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_SupplierProduct]') AND type in (N'U'))
BEGIN
	CREATE TABLE [dbo].[STOCKCONTROL_SupplierProduct](
		[Id] [int] IDENTITY(1,1) NOT NULL,
		[SupplierID] [int] NOT NULL,
		[ProductID] [int] NOT NULL,
	 CONSTRAINT [PK_STOCKCONTROL_SupplierProduct] PRIMARY KEY CLUSTERED 
	(
		[Id] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
	) ON [PRIMARY]


	ALTER TABLE [dbo].[STOCKCONTROL_SupplierProduct]  WITH CHECK ADD  CONSTRAINT [FK_STOCKCONTROL_SupplierProduct_Product] FOREIGN KEY([ProductID])
	REFERENCES [dbo].[STOCKCONTROL_Product] ([ProductID])

	ALTER TABLE [dbo].[STOCKCONTROL_SupplierProduct] CHECK CONSTRAINT [FK_STOCKCONTROL_SupplierProduct_Product]

	ALTER TABLE [dbo].[STOCKCONTROL_SupplierProduct]  WITH CHECK ADD  CONSTRAINT [FK_STOCKCONTROL_SupplierProduct_SupplierID] FOREIGN KEY([SupplierID])
	REFERENCES [dbo].[STOCKCONTROL_Supplier] ([SupplierID])

	ALTER TABLE [dbo].[STOCKCONTROL_SupplierProduct] CHECK CONSTRAINT [FK_STOCKCONTROL_SupplierProduct_SupplierID]


END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_SupplierProduct' AND column_name = 'UpdatedOn')
BEGIN
	ALTER TABLE dbo.STOCKCONTROL_SupplierProduct
	   ADD UpdatedOn Datetime NULL;
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Category' AND column_name = 'MinTemp')
ALTER TABLE STOCKCONTROL_Category ADD MinTemp Real NULL	
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_Category' AND column_name = 'MaxTemp')
ALTER TABLE dbo.STOCKCONTROL_Category ADD MaxTemp Real NULL
GO
--UPDATE STOCKCONTROL_Category SET MinTemp=0 WHERE MinTemp IS NULL
--UPDATE STOCKCONTROL_Category SET MaxTemp=0 WHERE MaxTemp IS NULL
go


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_ServiceCompany]') AND type in (N'U'))
BEGIN
	CREATE TABLE [dbo].[STOCKCONTROL_ServiceCompany](
		[ServiceCompanyID] [int] IDENTITY(1,1) NOT NULL,
		[ServiceCompanyName] [nvarchar](50) NOT NULL,
		[AccountManager] [nvarchar](50) NULL,
		[Address1] [nvarchar](50) NULL,
		[Address2] [nvarchar](50) NULL,
		[Address3] [nvarchar](50) NULL,
		[Address4] [nvarchar](50) NULL,
		[Postcode] [nvarchar](8) NULL,
		[TelNo1] [nvarchar](16) NULL,
		[TelNo2] [nvarchar](16) NULL,
		[ContactName] [nvarchar](50) NULL,
		[ReviewDate] [datetime] NULL,
		[Comments] [nvarchar](max) NULL,
		[Active] [bit] NOT NULL,
	 CONSTRAINT [PK_STOCKCONTROL_ServiceCompany] PRIMARY KEY CLUSTERED 
	(
		[ServiceCompanyID] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
	) ON [PRIMARY]
END
GO


IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_STOCKCONTROL_ServiceCompany_Active]') AND type = 'D')
BEGIN
	ALTER TABLE [dbo].[STOCKCONTROL_ServiceCompany] ADD  CONSTRAINT [DF_STOCKCONTROL_ServiceCompany_Active]  DEFAULT ((1)) FOR [Active]
END

GO



--========================================================================================================================
--Sales Order related tables
--========================================================================================================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_Deliverer]') AND type in (N'U'))
BEGIN
	CREATE TABLE [dbo].[STOCKCONTROL_Deliverer](
		[DelivererID] [int] IDENTITY(1,1) NOT NULL,
		[Deliverer] [nvarchar](100) NOT NULL,
	 CONSTRAINT [PK_STOCKCONTROL_Deliverer] PRIMARY KEY CLUSTERED 
	(
		[DelivererID] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
	) ON [PRIMARY]

END

GO


IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PDA_MessageAlert]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[PDA_MessageAlert](
	[MessageID] [int] IDENTITY(1,1) NOT NULL,
	[Message] [nvarchar](200) NULL,
	[CreateDateTime] [datetime] NOT NULL,
 CONSTRAINT [PK_PDA_MessageAlert] PRIMARY KEY CLUSTERED 
(
	[MessageID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PDA_MessageAlertDetail]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[PDA_MessageAlertDetail](
	[MessageDetailID] [int] IDENTITY(1,1) NOT NULL,
	[MessageID] [int] NOT NULL,
	[Username] [nvarchar](50) NULL,	
	[IsShown] [bit] NULL,	
	[ShownDateTime] [datetime] NULL,
 CONSTRAINT [PK_PDA_MessageAlertDetail] PRIMARY KEY CLUSTERED 
(
	[MessageDetailID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]


ALTER TABLE [dbo].[PDA_MessageAlertDetail]  WITH CHECK ADD  CONSTRAINT [FK_PDA_MessageAlertDetail_MessageID] FOREIGN KEY([MessageID])
REFERENCES [dbo].[PDA_MessageAlert] ([MessageID])


ALTER TABLE [dbo].[PDA_MessageAlertDetail] CHECK CONSTRAINT [FK_PDA_MessageAlertDetail_MessageID]

END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_MessageAlert' AND column_name = 'UpdatedOn')
BEGIN
	ALTER TABLE dbo.PDA_MessageAlert
	   ADD UpdatedOn Datetime NULL;
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PDA_MessageAlertDetail' AND column_name = 'UpdatedOn')
BEGIN
	ALTER TABLE dbo.PDA_MessageAlertDetail
	   ADD UpdatedOn Datetime NULL;
END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_SalesOrder]') AND type in (N'U'))
BEGIN
	CREATE TABLE [dbo].[STOCKCONTROL_SalesOrder](
		[OrderID] [int] IDENTITY(1,1) NOT NULL,
		[OrderNumber] [nvarchar](20) NOT NULL,
		[CustomerID] [int] NOT NULL,
		[OrderedBy] [nvarchar](100) NULL,
		[OrderDate] [datetime] NULL,
		[DeliveryDate] [datetime] NULL,
		[DeliveryByID] [int] NULL,
		[DeliveryNotes] [nvarchar](100) NULL,
		[Comments] [nvarchar](200) NULL,
		[OrderType] [int] NOT NULL,
		[OrderStatus] [int] NOT NULL,
	 CONSTRAINT [PK_STOCKCONTROL_SalesOrder] PRIMARY KEY CLUSTERED 
	(
		[OrderID] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
	) ON [PRIMARY]
END
GO

IF NOT  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_STOCKCONTROL_SalesOrder_Customer]') AND parent_object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_SalesOrder]'))
BEGIN
	ALTER TABLE [dbo].[STOCKCONTROL_SalesOrder]  WITH CHECK ADD  CONSTRAINT [FK_STOCKCONTROL_SalesOrder_Customer] FOREIGN KEY([CustomerID])
	REFERENCES [dbo].[STOCKCONTROL_Customer] ([CustomerID])

	ALTER TABLE [dbo].[STOCKCONTROL_SalesOrder] CHECK CONSTRAINT [FK_STOCKCONTROL_SalesOrder_Customer]
END
GO

IF NOT  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_STOCKCONTROL_SalesOrder_Deliverer]') AND parent_object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_SalesOrder]'))
BEGIN
	ALTER TABLE [dbo].[STOCKCONTROL_SalesOrder]  WITH CHECK ADD  CONSTRAINT [FK_STOCKCONTROL_SalesOrder_Deliverer] FOREIGN KEY([DeliveryByID])
	REFERENCES [dbo].[STOCKCONTROL_Deliverer] ([DelivererID])

	ALTER TABLE [dbo].[STOCKCONTROL_SalesOrder] CHECK CONSTRAINT [FK_STOCKCONTROL_SalesOrder_Deliverer]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_SalesOrder' AND column_name = 'CustomerOrderNumber')
ALTER TABLE dbo.STOCKCONTROL_SalesOrder ADD
	CustomerOrderNumber nvarchar(20) NULL
GO	

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_SalesOrder' AND column_name = 'UpdatedOn')
BEGIN
	ALTER TABLE dbo.STOCKCONTROL_SalesOrder
	   ADD UpdatedOn Datetime NULL;
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_SalesOrder' AND column_name = 'PickingCompleted')
BEGIN
	ALTER TABLE dbo.STOCKCONTROL_SalesOrder ADD
		PickingCompleted BIT NULL
		
	EXEC sp_executesql N'UPDATE STOCKCONTROL_SalesOrder 
	SET PickingCompleted = 0
	WHERE PickingCompleted IS NULL'	
END
GO

IF  NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_STOCKCONTROL_SalesOrder_PickingCompleted]') AND type = 'D')
BEGIN
	ALTER TABLE [dbo].[STOCKCONTROL_SalesOrder] 
	ADD  CONSTRAINT [DF_STOCKCONTROL_SalesOrder_PickingCompleted]  DEFAULT ((0)) FOR [PickingCompleted]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_SalesOrder' AND column_name = 'PickingStatus')
BEGIN
	ALTER TABLE dbo.STOCKCONTROL_SalesOrder ADD
		PickingStatus INT NULL
		
	EXEC sp_executesql N'UPDATE STOCKCONTROL_SalesOrder 
	SET PickingStatus = (CASE WHEN PickingCompleted = 0 THEN 1 ELSE 3 END )'	
END
GO

IF  NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_STOCKCONTROL_SalesOrder_PickingStatus]') AND type = 'D')
BEGIN
	ALTER TABLE [dbo].[STOCKCONTROL_SalesOrder] 
	ADD  CONSTRAINT [DF_STOCKCONTROL_SalesOrder_PickingStatus]  DEFAULT ((1)) FOR [PickingStatus]
END
GO


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_SalesOrder' AND column_name = 'OrderTakenBy')
ALTER TABLE dbo.STOCKCONTROL_SalesOrder ADD
	OrderTakenBy [int] NULL
GO	

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_SalesOrder' AND column_name = 'DeliveryTo')
ALTER TABLE dbo.STOCKCONTROL_SalesOrder ADD
	DeliveryTo NVARCHAR(100) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_SalesOrder' AND column_name = 'RepeatCustomerOrder')
ALTER TABLE dbo.STOCKCONTROL_SalesOrder ADD
	RepeatCustomerOrder [bit] NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_SalesOrder' AND column_name = 'RepeatDeliveryNotes')
ALTER TABLE dbo.STOCKCONTROL_SalesOrder ADD
	RepeatDeliveryNotes [bit] NULL
GO


IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_SalesOrderDetail]') AND type in (N'U'))
BEGIN
	CREATE TABLE [dbo].[STOCKCONTROL_SalesOrderDetail](
		[OrderDetailID] [int] IDENTITY(1,1) NOT NULL,
		[OrderID] [int] NOT NULL,
		[ProductID] [int] NOT NULL,
		[Pack] [decimal](18, 2) NOT NULL,
		[SalePrice] [decimal](18, 2) NOT NULL,
	 CONSTRAINT [PK_STOCKCONTROL_SalesOrderDetail] PRIMARY KEY CLUSTERED 
	(
		[OrderDetailID] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
	) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_SalesOrderDetail' AND column_name = 'PickedQty')
BEGIN
	ALTER TABLE dbo.STOCKCONTROL_SalesOrderDetail
	   ADD PickedQty decimal(18, 2)  NULL;  
	   
	EXEC sp_executesql N'UPDATE STOCKCONTROL_SalesOrderDetail 
	SET PickedQty = 0	WHERE PickedQty IS NULL'	     
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_SalesOrderDetail' AND column_name = 'Comment')
	ALTER TABLE dbo.STOCKCONTROL_SalesOrderDetail ADD [Comment]  NVARCHAR(50) NULL
GO


IF  NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_STOCKCONTROL_SalesOrderDetail_PickedQty]') AND type = 'D')
BEGIN
	ALTER TABLE [dbo].[STOCKCONTROL_SalesOrderDetail] ADD  CONSTRAINT [DF_STOCKCONTROL_SalesOrderDetail_PickedQty]  DEFAULT ((0)) FOR [PickedQty]
END
GO


IF NOT  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_STOCKCONTROL_SalesOrderDetail_Product]') AND parent_object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_SalesOrderDetail]'))
BEGIN
	ALTER TABLE [dbo].[STOCKCONTROL_SalesOrderDetail]  WITH CHECK ADD  CONSTRAINT [FK_STOCKCONTROL_SalesOrderDetail_Product] FOREIGN KEY([ProductID])
	REFERENCES [dbo].[STOCKCONTROL_Product] ([ProductID])

	ALTER TABLE [dbo].[STOCKCONTROL_SalesOrderDetail] CHECK CONSTRAINT [FK_STOCKCONTROL_SalesOrderDetail_Product]
END
GO

IF NOT  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_STOCKCONTROL_SalesOrderDetail_SalesOrder]') AND parent_object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_SalesOrderDetail]'))
BEGIN
	ALTER TABLE [dbo].[STOCKCONTROL_SalesOrderDetail]  WITH CHECK ADD  CONSTRAINT [FK_STOCKCONTROL_SalesOrderDetail_SalesOrder] FOREIGN KEY([OrderID])
	REFERENCES [dbo].[STOCKCONTROL_SalesOrder] ([OrderID])

	ALTER TABLE [dbo].[STOCKCONTROL_SalesOrderDetail] CHECK CONSTRAINT [FK_STOCKCONTROL_SalesOrderDetail_SalesOrder]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_SalesOrderDetail' AND column_name = 'UpdatedOn')
BEGIN
	ALTER TABLE dbo.STOCKCONTROL_SalesOrderDetail
	   ADD UpdatedOn Datetime NULL;
END
GO

--=====================================================================================================================================
--End of Sales Order related schema script
--=====================================================================================================================================
/****** Object:  Table [dbo].[STOCKCONTROL_Recipe]    Script Date: 06/30/2012 17:42:54 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_Recipe]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[STOCKCONTROL_Recipe](
	[RecipeID] [int] IDENTITY(1,1) NOT NULL,
	[Description] [nvarchar](100) NOT NULL,

 CONSTRAINT [PK_STOCKCONTROL_Recipe] PRIMARY KEY CLUSTERED 
(
	[RecipeID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_RecipeProduct]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[STOCKCONTROL_RecipeProduct](
	[RecipeProductID] [int] IDENTITY(1,1) NOT NULL,
	[RecipeID] [int] NOT NULL,
	[ProductID] [int] NOT NULL,
	[Quantity] [decimal](18, 2) NOT NULL,

 CONSTRAINT [PK_STOCKCONTROL_RecipeProduct] PRIMARY KEY CLUSTERED 
(
	[RecipeProductID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_STOCKCONTROL_RecipeProduct_Recipe]') AND parent_object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_RecipeProduct]'))
BEGIN
	ALTER TABLE [dbo].[STOCKCONTROL_RecipeProduct]  WITH CHECK ADD  CONSTRAINT [FK_STOCKCONTROL_RecipeProduct_Recipe] FOREIGN KEY([RecipeID])
	REFERENCES [dbo].[STOCKCONTROL_Recipe] ([RecipeID])

	ALTER TABLE [dbo].[STOCKCONTROL_RecipeProduct] CHECK CONSTRAINT [FK_STOCKCONTROL_RecipeProduct_Recipe]
END
GO

IF NOT  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_STOCKCONTROL_RecipeProduct_Product]') AND parent_object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_RecipeProduct]'))
BEGIN
	ALTER TABLE [dbo].[STOCKCONTROL_RecipeProduct]  WITH CHECK ADD  CONSTRAINT [FK_STOCKCONTROL_RecipeProduct_Product] FOREIGN KEY([ProductID])
	REFERENCES [dbo].[STOCKCONTROL_Product] ([ProductID])

	ALTER TABLE [dbo].[STOCKCONTROL_RecipeProduct] CHECK CONSTRAINT [FK_STOCKCONTROL_RecipeProduct_Product]
END
GO

/****** Object:  UserDefinedFunction [dbo].[fnSplitV1]    Script Date: 08/02/2012 16:20:29 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fnSplitV1]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[fnSplitV1]
GO
/****** Object:  UserDefinedFunction [dbo].[fnSplitV1]    Script Date: 08/02/2012 16:20:29 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnSplitV1](
   @sDelimiter VARCHAR(8000) = ',', -- delimiter that separates items
    @sInputList VARCHAR(8000) -- List of delimited items
) RETURNS @List TABLE (FieldValue VARCHAR(8000))

BEGIN
DECLARE @sItem VARCHAR(8000)
WHILE CHARINDEX(@sDelimiter,@sInputList,0) <> 0
 BEGIN
 SELECT
  @sItem=RTRIM(LTRIM(SUBSTRING(@sInputList,1,CHARINDEX(@sDelimiter,@sInputList,0)-1))),
  @sInputList=RTRIM(LTRIM(SUBSTRING(@sInputList,CHARINDEX(@sDelimiter,@sInputList,0)+LEN(@sDelimiter),LEN(@sInputList))))
 
 IF LEN(@sItem) > 0
  INSERT INTO @List SELECT @sItem
 END

IF LEN(@sInputList) > 0
 INSERT INTO @List SELECT @sInputList -- Put the last item in
RETURN
END

GO

/****** Object:  Table [dbo].[STOCKCONTROL_Recipe]    Script Date: 07/05/2013 12:52:54 ******/
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_ForcedStockCheck]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[STOCKCONTROL_ForcedStockCheck](
	[ForcedStockCheckID] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](100) NOT NULL,
	[CheckFrequency] [nvarchar](50) NULL,
	[CheckFrequencyMins] [int]  NULL,
	[CheckFinish] [datetime]  NULL,
	[CheckFirstOfDay] [datetime]  NULL,
	[DayNo] [int] NULL,
	[DayOfWeek] [nvarchar](150) NULL,
	[DayStep] [int] NULL,
	[MonthStep] [int] NULL,
	[WeekNo] [int] NULL,
	[Month] [nvarchar] (16) NULL,
	[AssineeList] [nvarchar](max) NULL,
	[CreateDate] [datetime] NOT NULL,
	[CreateBy] [nvarchar] (20) NOT NULL ,
 CONSTRAINT [PK_STOCKCONTROL_ForcedStockCheck] PRIMARY KEY CLUSTERED 
(
	[ForcedStockCheckID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO




IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_ForcedStockChkRack]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[STOCKCONTROL_ForcedStockChkRack](
	[StockCheckRackID] [int] IDENTITY(1,1) NOT NULL,
	[ForcedStockCheckID] [int] NOT NULL,
	[RackLocationID] [int] NOT NULL,
 CONSTRAINT [PK_STOCKCONTROL_ForcedStockChkRack] PRIMARY KEY CLUSTERED 
(
	[StockCheckRackID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]


ALTER TABLE [dbo].[STOCKCONTROL_ForcedStockChkRack]  WITH CHECK ADD  CONSTRAINT [FK_STOCKCONTROL_ForcedStockChkRack_ForcedStockCheckID] FOREIGN KEY([ForcedStockCheckID])
REFERENCES [dbo].[STOCKCONTROL_ForcedStockCheck] ([ForcedStockCheckID])


ALTER TABLE [dbo].[STOCKCONTROL_ForcedStockChkRack] CHECK CONSTRAINT [FK_STOCKCONTROL_ForcedStockChkRack_ForcedStockCheckID]

END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_ForcedStockChkProduct]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[STOCKCONTROL_ForcedStockChkProduct](
	[StockCheckProductID] [int] IDENTITY(1,1) NOT NULL,
	[ForcedStockCheckID] [int] NOT NULL,
	[ProductID] [int] NOT NULL,
 CONSTRAINT [PK_STOCKCONTROL_ForcedStockChkProduct] PRIMARY KEY CLUSTERED 
(
	[StockCheckProductID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]


ALTER TABLE [dbo].[STOCKCONTROL_ForcedStockChkProduct]  WITH CHECK ADD  CONSTRAINT [FK_STOCKCONTROL_ForcedStockChkProduct_ForcedStockCheckID] FOREIGN KEY([ForcedStockCheckID])
REFERENCES [dbo].[STOCKCONTROL_ForcedStockCheck] ([ForcedStockCheckID])


ALTER TABLE [dbo].[STOCKCONTROL_ForcedStockChkProduct] CHECK CONSTRAINT [FK_STOCKCONTROL_ForcedStockChkProduct_ForcedStockCheckID]

END
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_ForcedStockCheck' AND column_name = 'CheckFrequency')
BEGIN
ALTER TABLE dbo.[STOCKCONTROL_ForcedStockCheck]
   ALTER COLUMN CheckFrequency nvarchar(50) NULL; 
END 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_ForcedStockCheck' AND column_name = 'Type')
BEGIN
	ALTER TABLE dbo.[STOCKCONTROL_ForcedStockCheck]
		ADD Type INT NULL
	
	EXEC sp_executesql N'UPDATE STOCKCONTROL_ForcedStockCheck SET [Type] = 2'	
END
	
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_ForcedStockCheck' AND column_name = 'UpdatedOn')
BEGIN
	ALTER TABLE dbo.STOCKCONTROL_ForcedStockCheck
	   ADD UpdatedOn Datetime NULL;
END
GO




IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_ForcedStockChkProduct' AND column_name = 'UpdatedOn')
BEGIN
	ALTER TABLE dbo.STOCKCONTROL_ForcedStockChkProduct
	   ADD UpdatedOn Datetime NULL;
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'STOCKCONTROL_ForcedStockChkRack' AND column_name = 'UpdatedOn')
BEGIN
	ALTER TABLE dbo.STOCKCONTROL_ForcedStockChkRack
	   ADD UpdatedOn Datetime NULL;
END
GO

-----------------Location

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LOCATION_ObjectNew]') AND type in (N'U'))
BEGIN
	CREATE TABLE [dbo].[LOCATION_ObjectNew](
		[ObjectID] [int] IDENTITY(1,1) NOT NULL,
		[ObjectTypeId] [int] NOT NULL, --fk LOCATION_ObjectType
		[LocationID] [int] NOT NULL, -- not root location of hierchy, immediate parent location/sub location
		[SequencePosition] [int] NOT NULL,
		[DescriptionLongName] [nvarchar](100) NULL,
		[DescriptionShortName] [nvarchar](50) NOT NULL,
		[Manufacturer] [nvarchar](25) NULL,
		[UnitOfMeasure] SMALLINT NULL, 
		[ToleranceCA] [decimal](18, 2) NULL,
		[AmberTolerance] [decimal](18, 2) NULL,
		[Barcode] [nvarchar](250) NULL,
		[SerialNo] [nvarchar](20) NULL,
		[CertificateNumber] [nvarchar](20) NULL,
		[PartNumber] [nvarchar](20) NULL,
		[PurchaseDate] [datetime] NULL,
		[ReviewDate] [datetime] NULL,
		[ServiceDate] [datetime] NULL,
		[PATTestDate] [datetime] NULL,
		[SupplierId] [int] NULL, --fk
		[Status] [int] NULL,
		[Owner] [nvarchar](MAX) NULL,
		[CorrectiveActionID] [int] NULL, --fk
		[IsPortable] [bit] NULL,
		[IsMasterProbe] [bit] NULL,
		[ToleranceCAIfMaster] [decimal](18, 2) NULL,
		[WarningTolerance] [decimal](18, 2) NULL,
		[GPDec1] [decimal](18, 2) NULL,
		[GPDec2] [decimal](18, 2) NULL,
		[Level] [int] NOT NULL,
		[FullPath]	[nvarchar](500)	NULL,
		[CreatedBy] [nvarchar](16)	NOT NULL,	
		[CreateDate] [datetime] NOT NULL,
		[Active] [bit] NOT NULL,
	 CONSTRAINT [PK_LOCATION_ObjectNew] PRIMARY KEY CLUSTERED 
	(
		[ObjectID] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
	) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'LOCATION_ObjectNew' AND column_name = 'ServiceCompanyID')
BEGIN
ALTER TABLE dbo.LOCATION_ObjectNew
   ADD ServiceCompanyID INT  NULL;    
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'LOCATION_ObjectNew' AND column_name = 'SupplierInfo')
BEGIN
ALTER TABLE dbo.LOCATION_ObjectNew
   ADD SupplierInfo NVARCHAR(200)  NULL;    
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'LOCATION_ObjectNew' AND column_name = 'ServiceCompanyInfo')
BEGIN
ALTER TABLE dbo.LOCATION_ObjectNew
   ADD ServiceCompanyInfo NVARCHAR(200)  NULL;    
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'LOCATION_ObjectNew' AND column_name = 'UpdatedOn')
BEGIN
	ALTER TABLE dbo.LOCATION_ObjectNew
	   ADD UpdatedOn Datetime NULL;
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'LOCATION_ObjectNew' AND column_name = 'IsSameAsSupplier')
BEGIN
ALTER TABLE dbo.LOCATION_ObjectNew
   ADD IsSameAsSupplier BIT  NULL;    
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'LOCATION_ObjectNew' AND column_name = 'RackLocationID')
BEGIN
ALTER TABLE dbo.LOCATION_ObjectNew
   ADD RackLocationID INT  NULL;    
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'LOCATION_ObjectNew' AND column_name = 'ServiceFrequency')
BEGIN
ALTER TABLE dbo.LOCATION_ObjectNew
   ADD ServiceFrequency NVARCHAR(50) NULL;    
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'LOCATION_ObjectNew' AND column_name = 'ServiceFreqDayOfWeek')
BEGIN
ALTER TABLE dbo.LOCATION_ObjectNew
   ADD ServiceFreqDayOfWeek NVARCHAR(150) NULL;    
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'LOCATION_ObjectNew' AND column_name = 'ServiceFreqMonth')
BEGIN
ALTER TABLE dbo.LOCATION_ObjectNew
   ADD ServiceFreqMonth NVARCHAR(16) NULL;    
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'LOCATION_ObjectNew' AND column_name = 'ServiceFreqDayNo')
BEGIN
ALTER TABLE dbo.LOCATION_ObjectNew
   ADD ServiceFreqDayNo INT NULL;    
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'LOCATION_ObjectNew' AND column_name = 'ServiceFreqStep')
BEGIN
ALTER TABLE dbo.LOCATION_ObjectNew
   ADD ServiceFreqStep INT NULL;    
END
GO

IF NOT  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_LOCATION_ObjectNew_RackLocationID]') AND parent_object_id = OBJECT_ID(N'[dbo].[LOCATION_ObjectNew]'))
BEGIN
	ALTER TABLE [dbo].[LOCATION_ObjectNew]  WITH CHECK ADD  CONSTRAINT [FK_LOCATION_ObjectNew_RackLocationID] FOREIGN KEY([RackLocationID])
	REFERENCES [dbo].[STOCKCONTROL_Rack] ([RackLocationID])

	ALTER TABLE [dbo].[LOCATION_ObjectNew] CHECK CONSTRAINT [FK_LOCATION_ObjectNew_RackLocationID]
END
GO


IF NOT  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_LOCATION_ObjectNew_ObjectTypeId]') AND parent_object_id = OBJECT_ID(N'[dbo].[LOCATION_ObjectNew]'))
BEGIN
	ALTER TABLE [dbo].[LOCATION_ObjectNew]  WITH CHECK ADD  CONSTRAINT [FK_LOCATION_ObjectNew_ObjectTypeId] FOREIGN KEY([ObjectTypeID])
	REFERENCES [dbo].[LOCATION_ObjectType] ([ObjectTypeID])

	ALTER TABLE [dbo].[LOCATION_ObjectNew] CHECK CONSTRAINT [FK_LOCATION_ObjectNew_ObjectTypeId]
END
GO

IF NOT  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_LOCATION_ObjectNew_SupplierID]') AND parent_object_id = OBJECT_ID(N'[dbo].[LOCATION_ObjectNew]'))
BEGIN
	ALTER TABLE [dbo].[LOCATION_ObjectNew]  WITH CHECK ADD  CONSTRAINT [FK_LOCATION_ObjectNew_SupplierID] FOREIGN KEY([SupplierID])
	REFERENCES [dbo].[STOCKCONTROL_Supplier] ([SupplierID])

	ALTER TABLE [dbo].[LOCATION_ObjectNew] CHECK CONSTRAINT [FK_LOCATION_ObjectNew_SupplierID]
END
GO

IF NOT  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_LOCATION_ObjectNew_CorrectiveActionID]') AND parent_object_id = OBJECT_ID(N'[dbo].[LOCATION_ObjectNew]'))
BEGIN
	ALTER TABLE [dbo].[LOCATION_ObjectNew]  WITH CHECK ADD  CONSTRAINT [FK_LOCATION_ObjectNew_CorrectiveActionID] FOREIGN KEY([CorrectiveActionID])
	REFERENCES [dbo].[PROCEDURE_UserDefinedList] ([ListID])

	ALTER TABLE [dbo].[LOCATION_ObjectNew] CHECK CONSTRAINT [FK_LOCATION_ObjectNew_CorrectiveActionID]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_LOCATION_ObjectNew_Active]') AND type = 'D')
BEGIN
	ALTER TABLE [dbo].[LOCATION_ObjectNew] ADD  CONSTRAINT [DF_LOCATION_ObjectNew_Active]  DEFAULT (1) FOR [Active]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'LOCATION_ObjectType' AND column_name = 'UpdatedOn')
BEGIN
	ALTER TABLE dbo.LOCATION_ObjectType
	   ADD UpdatedOn Datetime NULL;
END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LOCATION_ObjectComment]') AND type in (N'U'))
BEGIN
	CREATE TABLE [dbo].[LOCATION_ObjectComment](
		[ObjectCommentID] [int] IDENTITY(1,1) NOT NULL,
		[ObjectID] [int] NOT NULL,
		[Comment] [nvarchar](250) NOT NULL,
		[CommentedBy] [nvarchar](16) NOT NULL,		
		[CommentedDate] [datetime] NOT NULL,
	 CONSTRAINT [PK_LOCATION_ObjectComment] PRIMARY KEY CLUSTERED 
	(
		[ObjectCommentID] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
	) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'LOCATION_ObjectComment' AND column_name = 'UpdatedOn')
BEGIN
	ALTER TABLE dbo.LOCATION_ObjectComment
	   ADD UpdatedOn Datetime NULL;
END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RANGER_DeletedEntity]') AND type in (N'U'))
BEGIN
	CREATE TABLE [dbo].[RANGER_DeletedEntity](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[TableName] [nvarchar](500) NOT NULL,
	[DeletedID] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
	CONSTRAINT [PK_RANGER_DeletedEntity] PRIMARY KEY CLUSTERED 
	(
		[ID] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
	) ON [PRIMARY]

END


--=================================================
--Create Complaint related Tables and fk relations
--=================================================
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT


BEGIN TRANSACTION
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ComplaintCode]') AND type in (N'U'))
BEGIN
CREATE TABLE dbo.ComplaintCode
	(
	Id int NOT NULL IDENTITY (1, 1),
	ComplaintCode nvarchar(50) NOT NULL
	)  ON [PRIMARY]

ALTER TABLE dbo.ComplaintCode ADD CONSTRAINT
	PK_ComplaintCode PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]


ALTER TABLE dbo.ComplaintCode SET (LOCK_ESCALATION = TABLE)
END
GO
COMMIT

--------------------Domain data for ComplaintCode----------------------
IF NOT EXISTS(SELECT * FROM ComplaintCode WHERE ComplaintCode = 'Quality')
	INSERT INTO ComplaintCode (ComplaintCode) VALUES ('Quality')
IF NOT EXISTS(SELECT * FROM ComplaintCode WHERE ComplaintCode = 'Delivery')
	INSERT INTO ComplaintCode (ComplaintCode) VALUES ('Delivery')
IF NOT EXISTS(SELECT * FROM ComplaintCode WHERE ComplaintCode = 'Labelling')
	INSERT INTO ComplaintCode (ComplaintCode) VALUES ('Labelling')
IF NOT EXISTS(SELECT * FROM ComplaintCode WHERE ComplaintCode = 'Specification')
	INSERT INTO ComplaintCode (ComplaintCode) VALUES ('Specification')
IF NOT EXISTS(SELECT * FROM ComplaintCode WHERE ComplaintCode = 'Temperature')
	INSERT INTO ComplaintCode (ComplaintCode) VALUES ('Temperature')
IF NOT EXISTS(SELECT * FROM ComplaintCode WHERE ComplaintCode = 'Foreign Body')
	INSERT INTO ComplaintCode (ComplaintCode) VALUES ('Foreign Body')
--IF NOT EXISTS(SELECT * FROM ComplaintCode WHERE ComplaintCode = 'Overcharged')
--	INSERT INTO ComplaintCode (ComplaintCode) VALUES ('Overcharged')
IF NOT EXISTS(SELECT * FROM ComplaintCode WHERE ComplaintCode = 'Other')
	INSERT INTO ComplaintCode (ComplaintCode) VALUES ('Other')
	
IF NOT EXISTS(SELECT * FROM ComplaintCode WHERE ComplaintCode = 'Product')
	INSERT INTO ComplaintCode(ComplaintCode) VALUES ('Product')

IF NOT EXISTS(SELECT * FROM ComplaintCode WHERE ComplaintCode = 'Supplier')
	INSERT INTO ComplaintCode(ComplaintCode) VALUES ('Supplier')

IF NOT EXISTS(SELECT * FROM ComplaintCode WHERE ComplaintCode = 'Ingredients')
	INSERT INTO ComplaintCode(ComplaintCode) VALUES ('Ingredients')

BEGIN TRANSACTION
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Complaint]') AND type in (N'U'))
BEGIN
CREATE TABLE dbo.Complaint
	(
	Id int NOT NULL IDENTITY (1, 1),
	ReportNumber nvarchar(20) NOT NULL,
	ReportedDate datetime NOT NULL,
	ReportTakenBy nvarchar(16) NOT NULL,
	CustomerID int NOT NULL,
	Contact nvarchar(30) NULL,
	ComplainCost decimal(18, 2) NULL,
	Description nvarchar(400) NULL,
	ComplaintCodeId int NULL,
	Action nvarchar(200) NULL,
	ActionedBy nvarchar(16) NULL,
	CorrectedBy nvarchar(16) NULL
	)  ON [PRIMARY]

ALTER TABLE dbo.Complaint ADD CONSTRAINT
	PK_Complaint PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

ALTER TABLE dbo.Complaint SET (LOCK_ESCALATION = TABLE)
END
GO
COMMIT

BEGIN TRANSACTION
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ComplaintProduct]') AND type in (N'U'))
BEGIN
CREATE TABLE dbo.ComplaintProduct
	(
	Id int NOT NULL IDENTITY (1, 1),
	ComplaintId int NOT NULL,
	ProductID INT NOT NULL
	)  ON [PRIMARY]

ALTER TABLE dbo.ComplaintProduct ADD CONSTRAINT
	PK_ComplaintProduct PRIMARY KEY CLUSTERED 
	(
	Id
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

ALTER TABLE dbo.ComplaintProduct SET (LOCK_ESCALATION = TABLE)
END
COMMIT


----Foreign keys


BEGIN TRANSACTION
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[FK_Complaint_ReportTakenBy]') AND type = (N'F'))
BEGIN
ALTER TABLE dbo.Complaint ADD CONSTRAINT
	FK_Complaint_ReportTakenBy FOREIGN KEY
	(
	ReportTakenBy
	) REFERENCES dbo.USER_User
	(
	UserName
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
END
COMMIT



BEGIN TRANSACTION
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[FK_Complaint_STOCKCONTROL_Customer]') AND type = (N'F'))
BEGIN
ALTER TABLE dbo.Complaint ADD CONSTRAINT
	FK_Complaint_STOCKCONTROL_Customer FOREIGN KEY
	(
	CustomerID
	) REFERENCES dbo.STOCKCONTROL_Customer
	(
	CustomerID
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
END
COMMIT



BEGIN TRANSACTION
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[FK_Complaint_ComplaintCode]') AND type = (N'F'))
BEGIN
ALTER TABLE dbo.Complaint ADD CONSTRAINT
	FK_Complaint_ComplaintCode FOREIGN KEY
	(
	ComplaintCodeId
	) REFERENCES dbo.ComplaintCode
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
END
COMMIT



BEGIN TRANSACTION
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[FK_Complaint_ActionedBy]') AND type = (N'F'))
BEGIN
ALTER TABLE dbo.Complaint ADD CONSTRAINT
	FK_Complaint_ActionedBy FOREIGN KEY
	(
	ActionedBy
	) REFERENCES dbo.USER_User
	(
	UserName
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 

END	

COMMIT



BEGIN TRANSACTION
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[FK_Complaint_CorrectedBy]') AND type = (N'F'))
BEGIN
ALTER TABLE dbo.Complaint ADD CONSTRAINT
	FK_Complaint_CorrectedBy FOREIGN KEY
	(
	CorrectedBy
	) REFERENCES dbo.USER_User
	(
	UserName
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
END
COMMIT


BEGIN TRANSACTION
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[FK_ComplaintProduct_Complaint]') AND type = (N'F'))
BEGIN
ALTER TABLE dbo.ComplaintProduct ADD CONSTRAINT
	FK_ComplaintProduct_Complaint FOREIGN KEY
	(
	ComplaintId
	) REFERENCES dbo.Complaint
	(
	Id
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
END	

COMMIT



BEGIN TRANSACTION
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[FK_ComplaintProduct_ComplaintProduct]') AND type = (N'F'))
BEGIN

ALTER TABLE dbo.ComplaintProduct ADD CONSTRAINT
	FK_ComplaintProduct_ComplaintProduct FOREIGN KEY
	(
	ProductID
	) REFERENCES dbo.STOCKCONTROL_Product
	(
	ProductID
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
END
COMMIT
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'Complaint' AND column_name = 'Investigation')
ALTER TABLE Complaint ADD Investigation nvarchar(400) NULL
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'Complaint' AND column_name = 'CustomerID') 

 ALTER TABLE Complaint ALTER COLUMN CustomerID INT NULL 
 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'Complaint' AND column_name = 'IsSatisfactory')
ALTER TABLE dbo.Complaint ADD
	IsSatisfactory BIT NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'Complaint' AND column_name = 'PrintName')
ALTER TABLE dbo.Complaint ADD
	PrintName NVARCHAR(30) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'Complaint' AND column_name = 'ReviewDate')
ALTER TABLE dbo.Complaint ADD
	ReviewDate DATETIME NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'Complaint' AND column_name = 'Position')
ALTER TABLE dbo.Complaint ADD
	Position NVARCHAR(30) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'Complaint' AND column_name = 'RiskAssessmentTimescale')
ALTER TABLE Complaint ADD RiskAssessmentTimescale datetime NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'Complaint' AND column_name = 'CustomerNote')
ALTER TABLE Complaint ADD CustomerNote nvarchar(200) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'Complaint' AND column_name = 'ProductNote')
ALTER TABLE Complaint ADD ProductNote nvarchar(200) NULL
GO

------------------------------------------------ S P --------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------


/****** Object:  StoredProcedure [dbo].[RANGER_usp_Fill_DropDownLists]    Script Date: 02/11/2014 12:36:08 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RANGER_usp_Fill_DropDownLists]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RANGER_usp_Fill_DropDownLists]
GO


/****** Object:  StoredProcedure [dbo].[RANGER_usp_Fill_DropDownLists]    Script Date: 02/11/2014 12:36:08 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[RANGER_usp_Fill_DropDownLists]

---------Parameters----------
@Name nvarchar(64),
@CorrectiveAction bit = NULL

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)

BEGIN TRY
	SET @ErrorMsg = ''

	IF @Name = 'PROCEDURE_UserDefinedList'
		BEGIN
			SELECT		TOP(1) '[SELECT ITEM]' AS [Name], -1 AS ListID
			FROM		PROCEDURE_UserDefinedList							
			WHERE		Active = 1
			UNION
			SELECT		[Name], ListID
			FROM		PROCEDURE_UserDefinedList							
			WHERE		Active = 1 AND CorrectiveAction = @CorrectiveAction
			ORDER BY 	[Name] ASC	
		END
	ELSE IF @Name = 'Users_Corrective_Action'
		BEGIN
			SELECT		TOP(1) '[Unassigned]' AS [FullName] , '[Unassigned]' AS [User]
			FROM		dbo.USER_User							
			WHERE		Active = 1
			UNION
			SELECT		FirstName+' ' +LastName AS [FullName] , UserName AS [User]
			FROM		dbo.USER_User							
			WHERE		Active = 1
			ORDER BY 	[User] ASC								
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) = '##'
		BEGIN	
			/*SET @ErrorParamsData =	'@Barcode = ' + @Barcode + ', @Pallet_No = ' +  CAST(@Pallet_No AS nvarchar(8))  + */

			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[RANGER_usp_Fill_DropDownLists]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1

GO




/****** Object:  StoredProcedure [dbo].[RANGER_usp_sel_Exception_Counter]    Script Date: 07/10/2013 13:35:40 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RANGER_usp_sel_Exception_Counter]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RANGER_usp_sel_Exception_Counter]
GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RANGER_usp_sel_Exception_Counter]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RANGER_usp_sel_Exception_Counter]
GO

/****** Object:  StoredProcedure [dbo].[RANGER_usp_sel_Exception_Counter]    Script Date: 07/31/2013 19:55:10 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[RANGER_usp_sel_Exception_Counter]

---------Parameters----------
@ExceptionType INT,
@UserName nvarchar(16) = '',
@Outstanding INT OUTPUT,
@Pending INT OUTPUT,
@Resolved INT OUTPUT,
@Success bit OUTPUT

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)
DECLARE @PermissionOnDepartments NVARCHAR(MAX)

set @PermissionOnDepartments=''	

BEGIN TRY
	IF ISNULL(@UserName,'') <> ''
		SELECT @PermissionOnDepartments=PermissionOnDepartments from USER_User where UserName=@UserName
IF @PermissionOnDepartments=''
	begin 
		SELECT @Outstanding = COUNT(RE.ExceptionID )
		FROM 
		RANGER_Exception RE
		INNER JOIN dbo.PROCEDURE_StepDetail OB ON RE.DescIdentity = OB.StepDetailID	
		INNER JOIN PROCEDURE_Step PR ON OB.StepID = PR.StepID
		WHERE RE.ExceptionType = @ExceptionType 
		AND RE.Status = 'Outstanding' 
		AND RE.DescIdentity IS NOT NULL		
		
		SELECT @Pending = COUNT(RE.ExceptionID )
		FROM 
		RANGER_Exception RE
		INNER JOIN dbo.PROCEDURE_StepDetail OB ON RE.DescIdentity = OB.StepDetailID	
		INNER JOIN PROCEDURE_Step PR ON OB.StepID = PR.StepID
		WHERE RE.ExceptionType = @ExceptionType 
		AND RE.Status = 'Pending' 
		AND RE.DescIdentity IS NOT NULL	
		
		SELECT @Resolved = COUNT(RE.ExceptionID )
		FROM 
		RANGER_Exception RE
		INNER JOIN dbo.PROCEDURE_StepDetail OB ON RE.DescIdentity = OB.StepDetailID	
		INNER JOIN PROCEDURE_Step PR ON OB.StepID = PR.StepID
		WHERE RE.ExceptionType = @ExceptionType 
		AND RE.Status = 'Resolved' 
		AND RE.DescIdentity IS NOT NULL	
		SET @Success = 1			
		RETURN 1
	 end 
	 
	 else 
	 begin
		SELECT @Outstanding = COUNT(RE.ExceptionID)
		FROM RANGER_Exception RE
		INNER JOIN dbo.PROCEDURE_StepDetail OB ON RE.DescIdentity = OB.StepDetailID	
		INNER JOIN PROCEDURE_Step PR ON OB.StepID = PR.StepID
		inner join USER_User u on pr.UserName=u.UserName
		INNER JOIN USER_Role ON USER_Role.RoleID = u.RoleID
		WHERE RE.ExceptionType = @ExceptionType 
		AND RE.Status = 'Outstanding' 
		AND RE.DescIdentity IS NOT NULL
		AND USER_Role.RoleID in (SELECT FieldValue FROM dbo.fnSplit(',', @PermissionOnDepartments))		
		
		SELECT @Pending = COUNT(RE.ExceptionID)
		FROM RANGER_Exception RE
		INNER JOIN dbo.PROCEDURE_StepDetail OB ON RE.DescIdentity = OB.StepDetailID	
		INNER JOIN PROCEDURE_Step PR ON OB.StepID = PR.StepID
		inner join USER_User u on pr.UserName=u.UserName
		INNER JOIN USER_Role ON USER_Role.RoleID = u.RoleID
		WHERE RE.ExceptionType = @ExceptionType 
		AND RE.Status = 'Pending' 
		AND RE.DescIdentity IS NOT NULL
		AND USER_Role.RoleID in (SELECT FieldValue FROM dbo.fnSplit(',', @PermissionOnDepartments))		
		
		SELECT @Resolved = COUNT(RE.ExceptionID)
		FROM RANGER_Exception RE
		INNER JOIN dbo.PROCEDURE_StepDetail OB ON RE.DescIdentity = OB.StepDetailID	
		INNER JOIN PROCEDURE_Step PR ON OB.StepID = PR.StepID
		inner join USER_User u on pr.UserName=u.UserName
		INNER JOIN USER_Role ON USER_Role.RoleID = u.RoleID
		WHERE RE.ExceptionType = @ExceptionType 
		AND RE.Status = 'Resolved' 
		AND RE.DescIdentity IS NOT NULL
		AND USER_Role.RoleID in (SELECT FieldValue FROM dbo.fnSplit(',', @PermissionOnDepartments))			 
	 	SET @Success = 1			
		RETURN 1
	 end

END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) <> '##'
		BEGIN	
			/*SET @ErrorParamsData =	'@Barcode = ' + @Barcode + ', @Pallet_No = ' +  CAST(@Pallet_No AS nvarchar(8))  + */

			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[RANGER_usp_sel_Exception_Counter]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1


GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_MissedEvent]    Script Date: 09/06/2013 16:13:30 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_upd_MissedEvent]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_upd_MissedEvent]
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_MissedEvent]    Script Date: 09/06/2013 16:13:30 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				MSH
	Date:				29/06/2009 15:00

	Description:		Update records in Log_Transaction

	History									Name		Date		Mod		
	=============================================================================================================================================
	Update EmailFailCount					Titu(Jr)	6-Sep-2013


	=============================================================================================================================================
*/

CREATE PROCEDURE [dbo].[PROCEDURE_usp_upd_MissedEvent]

---------Parameters----------
@ID BIGINT,
@Status INT,
@EmailFailComment NVARCHAR(500) = NULL,
@Success bit OUTPUT

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)

BEGIN TRY
	SET @ErrorMsg = ''
	SET @Success = 0

	IF @Status = 0 
	BEGIN
		UPDATE	Procedure_Alert												WITH (ROWLOCK)
		SET		EmailSent = 0,
				MailQueueStatus = @Status,
				EmailFailComment = @EmailFailComment
		WHERE	ID = @ID	
	END
	ELSE IF @Status = 3
	BEGIN
		UPDATE	Procedure_Alert												WITH (ROWLOCK)
		SET		EmailSent = 1,
				MailQueueStatus = @Status			
		WHERE	ID = @ID
	END
	
	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) = '##'
		BEGIN	
			/*SET @ErrorParamsData =	'@Barcode = ' + @Barcode + ', @Pallet_No = ' +  CAST(@Pallet_No AS nvarchar(8))  + */

			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[PROCEDURE_usp_upd_MissedEvent]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1


GO

/****** Object:  StoredProcedure [dbo].[RANGER_usp_sel_EmailHistory]    Script Date: 06/03/2013 17:20:24 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RANGER_usp_sel_EmailHistory]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RANGER_usp_sel_EmailHistory]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				Titu
	Date:				06/03/2013 17:20

	Description:		Select records from Ranger_EmailHistory

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[RANGER_usp_sel_EmailHistory]
---------Parameters----------

AS


SET NOCOUNT ON
SET DATEFORMAT dmy
	/*********************
		RETURN ALL RECORDS
	*********************/
	BEGIN
			SELECT		EmailHistoryID ,[Subject],Body,ObjectId	,ObjectType	,SentTime, dbo.fnGetEmailTo(EmailHistoryID) AS [To],CreateDate,CreateBy

			FROM		RANGER_EmailHistory								
						
			ORDER BY 	SentTime ASC

		RETURN
	END

GO

----------------------------------------------------------------------------------------------------------------------------------
/****** Object:  StoredProcedure [dbo].[RANGER_usp_sel_EmailTo]    Script Date: 06/03/2013 17:30:24 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RANGER_usp_sel_EmailTo]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RANGER_usp_sel_EmailTo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				Titu
	Date:				06/03/2013 17:30

	Description:		Select records from Ranger_EmailTo

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[RANGER_usp_sel_EmailTo]
---------Parameters----------
@EmailHistoryID int
AS


SET NOCOUNT ON
SET DATEFORMAT dmy
	/*********************
		RETURN ALL RECORDS
	*********************/
	BEGIN
			SELECT		EmailHistoryID ,EmailToID,SentToObjectID,SentToObjectType,ToEmail

			FROM		RANGER_EmailTo								
						
			WHERE 	    EmailHistoryID = @EmailHistoryID

		RETURN
	END

GO

----------------------------------------------------------------------------------------------------------------------------------
/****** Object:  StoredProcedure [dbo].[RANGER_usp_ins_EmailTo]    Script Date: 06/03/2013 17:50:24 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PDA_usp_ins_MessageAlert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PDA_usp_ins_MessageAlert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				Titu
	Date:				06/03/2013 17:50

	Description:		Insert record in MessageAlert

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PDA_usp_ins_MessageAlert]
---------Parameters----------
@Message Nvarchar(200),
@RecordID INT OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @CurrentDate DateTime

SET NOCOUNT ON 
SET DATEFORMAT dmy


BEGIN TRY
	SET @Success = 0
	SET @CurrentDate = GETDATE()
	
	BEGIN TRANSACTION
	

	/************
	INSERT RECORD
	************/
	INSERT INTO	PDA_MessageAlert												WITH (ROWLOCK)
			(
			 [Message],
			  CreateDateTime
			)
	VALUES
			(
			  @Message,
			  @CurrentDate
			)
        	
		COMMIT TRANSACTION
		
		
		SET @RecordID = SCOPE_IDENTITY()
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF ISNULL(@ErrorMsg,'') =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = '[PDA_usp_ins_MessageAlert]',
												@Msg = @ErrorMsg

	RETURN -1
GO


----------------------------------------------------------------------------------------------------------------------------------
/****** Object:  StoredProcedure [dbo].[PDA_usp_ins_MessageAlertDetail]    Script Date: 06/03/2013 17:50:24 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PDA_usp_ins_MessageAlertDetail]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PDA_usp_ins_MessageAlertDetail]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				Titu
	Date:				06/03/2013 17:50

	Description:		Insert record in MessageAlertDetail

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PDA_usp_ins_MessageAlertDetail]
---------Parameters----------
@MessageID int,
@Username NVARCHAR(50) = NULL,
@IsShown bit = NULL,

@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @CurrentDate DateTime

SET NOCOUNT ON 
SET DATEFORMAT dmy


BEGIN TRY
	SET @Success = 0
	SET @CurrentDate = GETDATE()
	
	BEGIN TRANSACTION
	


     IF EXISTS	(
							SELECT 		MessageID
							FROM		PDA_MessageAlert							WITH (READUNCOMMITTED)
							WHERE 		MessageID = @MessageID
			    )
			    BEGIN
	/************
	INSERT RECORD
	************/
	INSERT INTO	PDA_MessageAlertDetail												
			(
			  MessageID,Username,IsShown
			)
	VALUES
			(
			  @MessageID,@Username,@IsShown
			)
        	
		COMMIT TRANSACTION
		
		
		SET @Success = 1
		RETURN 1
		
		END
END TRY
BEGIN CATCH
	IF ISNULL(@ErrorMsg,'') =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = '[PDA_usp_ins_MessageAlertDetail]',
												@Msg = @ErrorMsg

	RETURN -1
GO
----------------------------------------------------------------------------------------------------------------------------------
/****** Object:  StoredProcedure [dbo].[PDA_usp_sel_MessageAlert]    Script Date: 06/03/2013 17:50:24 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PDA_usp_sel_MessageAlert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PDA_usp_sel_MessageAlert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				Titu
	Date:				06/03/2013 17:50

	Description:		Select record in MessageAlert

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PDA_usp_sel_MessageAlert]
---------Parameters----------

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @CurrentDate DateTime

SET NOCOUNT ON 
SET DATEFORMAT dmy


BEGIN TRY
	/************
	INSERT RECORD
	************/
	SELECT * FROM	PDA_MessageAlert ORDER BY CreateDateTime DESC								
		
		RETURN 1
END TRY
BEGIN CATCH
	IF ISNULL(@ErrorMsg,'') =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = '[PDA_usp_sel_MessageAlert]',
												@Msg = @ErrorMsg

	RETURN -1
GO

----------------------------------------------------------------------------------------------------------------------------------
/****** Object:  StoredProcedure [dbo].[PDA_usp_sel_MessageAlertDetail]    Script Date: 06/03/2013 17:50:24 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PDA_usp_sel_MessageAlertDetail]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PDA_usp_sel_MessageAlertDetail]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				Titu
	Date:				06/03/2013 17:50

	Description:		Select record in MessageAlertDetail

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PDA_usp_sel_MessageAlertDetail]
---------Parameters----------
@MessageID INT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @CurrentDate DateTime

SET NOCOUNT ON 
SET DATEFORMAT dmy


BEGIN TRY
	

	/************
	INSERT RECORD
	************/
	SELECT * FROM	PDA_MessageAlertDetail WHERE MessageID = @MessageID												
		
		RETURN 1
END TRY
BEGIN CATCH
	IF ISNULL(@ErrorMsg,'') =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = '[PDA_usp_sel_MessageAlertDetail]',
												@Msg = @ErrorMsg

	RETURN -1
GO

----------------------------------------------------------------------------------------------------------------------------------
/****** Object:  StoredProcedure [dbo].[RANGER_usp_ins_EmailTo]    Script Date: 06/03/2013 17:50:24 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RANGER_usp_ins_EmailTo]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RANGER_usp_ins_EmailTo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				Titu
	Date:				06/03/2013 17:50

	Description:		Insert record in RANGER_EmailTo

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[RANGER_usp_ins_EmailTo]
---------Parameters----------
@EmailHistoryID int,
@SentToObjectID int = NULL,
@SentToObjectType int = NULL,
@ToEmail nvarchar(max) = NULL,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	BEGIN TRANSACTION
	

	/************
	INSERT RECORD
	************/
	INSERT INTO	RANGER_EmailTo												WITH (ROWLOCK)
			(
			  EmailHistoryID,SentToObjectID,SentToObjectType,ToEmail
			)
	VALUES
			(
			  @EmailHistoryID,@SentToObjectID,@SentToObjectType,@ToEmail
			)
        	
		COMMIT TRANSACTION
		
		
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF ISNULL(@ErrorMsg,'') =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = '[RANGER_usp_ins_EmailTo]',
												@Msg = @ErrorMsg

	RETURN -1
GO

----------------------------------------------------------------------------------------------------------------------------------
/****** Object:  StoredProcedure [dbo].[RANGER_usp_ins_EmailHistory]    Script Date: 06/03/2013 17:40:24 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RANGER_usp_ins_EmailHistory]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RANGER_usp_ins_EmailHistory]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				Titu
	Date:				06/03/2013 17:40

	Description:		Insert record in RANGER_EmailHistory

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[RANGER_usp_ins_EmailHistory]
---------Parameters----------
@Subject nvarchar(250) = NULL,
@Body nvarchar(MAX)= NULL ,
@ObjectId int = NULL,
@ObjectType int = NULL,
@SentTime datetime = NULL,
@SentToObjectID int = NULL,
@SentToObjectType int = NULL,
@ToEmail nvarchar(max) = NULL,
@CreateDate datetime ,
@CreateBy nvarchar(20) =NULL,
@RecordID int OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	BEGIN TRANSACTION
	

	/************
	INSERT RECORD
	************/
	INSERT INTO	RANGER_EmailHistory												WITH (ROWLOCK)
			(
			  Body,[Subject],ObjectId,ObjectType,SentTime,CreateDate,CreateBy
			)
	VALUES
			(
			  @Body,@Subject,@ObjectId,@ObjectType,@SentTime,@CreateDate,@CreateBy
			)

		SET @RecordID = SCOPE_IDENTITY()
        	
		COMMIT TRANSACTION
		
		
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF ISNULL(@ErrorMsg,'') =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = '[RANGER_usp_ins_EmailHistory]',
												@Msg = @ErrorMsg

	RETURN -1
GO

----------------------------------------------------------------------------------------------------------------------------------
/****** Object:  StoredProcedure [dbo].[Ranger_TrainingCourse_usp_sel_TrainingCourse]    Script Date: 01/02/2013 20:10:24 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RANGER_TrainingCourse_usp_sel_TrainingCourse]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RANGER_TrainingCourse_usp_sel_TrainingCourse]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				Titu
	Date:				01/01/2013 13:46

	Description:		Select records from RANGER_TrainingCourse

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[RANGER_TrainingCourse_usp_sel_TrainingCourse]
---------Parameters----------
@IsHistory bit

AS


SET NOCOUNT ON
SET DATEFORMAT dmy
	/*********************
		RETURN ALL RECORDS
	*********************/
	BEGIN
			SELECT		rt.TrainingCourseID, Trainer, CourseName, OrganizerID, AttendeeList, Location, rt.Comments ,rtf.CheckFrequency,us.FirstName as FullName , Reminder ,rt.StartDate,rt.Note,rt.ReminderHour,rt.EndDate 

			FROM		RANGER_TrainingCourse rt								WITH (READUNCOMMITTED)
						LEFT JOIN	dbo.RANGER_TrainingCourse_Frequency rtf ON rt.TrainingCourseID = rtf.TrainingCourseID
						LEFT JOIN	dbo.USER_User us ON rt.OrganizerID = us.UserID
			
			WHERE		(rt.StartDate >= GETDATE() AND @IsHistory = 0) OR (rt.StartDate < GETDATE() AND @IsHistory = 1)
						
						
							
			ORDER BY 	CourseName ASC

		RETURN
	END

GO

----------------------------------------------------------------------------------------------------------------------------------
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RANGER_TrainingCourse_usp_ins_TrainingCourse]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RANGER_TrainingCourse_usp_ins_TrainingCourse]
GO
/****** Object:  StoredProcedure [dbo].[RANGER_TrainingCourse_usp_ins_TrainingCourse]    Script Date: 01/02/2013 20:14:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				Titu
	Date:				01/01/2013 6:56

	Description:		Insert record in RANGER_TrainingCourse

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[RANGER_TrainingCourse_usp_ins_TrainingCourse]
---------Parameters----------
@Trainer nvarchar(100) = NULL,
@CourseName nvarchar(100) ,
@OrganizerID int,
@AttendeeList nvarchar(max) = NULL,
@Location nvarchar(100) = NULL,
@Comments nvarchar(250) = NULL,
@Reminder bit = 0,
@IsFrequencyGiven bit ,
@CheckFrequency nvarchar(50) = NULL,
@StartDate datetime,
@EndDate datetime = NULL,
@CreateDate datetime ,
@CreateBy nvarchar(20),
@Hour int = NULL,
@RecordID int OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 
DECLARE @SequencePosition INT
DECLARE @ListID INT
DECLARE @SequenceNo INT 
DECLARE @Name NVARCHAR(32)

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	BEGIN TRANSACTION
	

	/************
	INSERT RECORD
	************/
	INSERT INTO	RANGER_TrainingCourse												WITH (ROWLOCK)
			(
			  Trainer, CourseName, OrganizerID, AttendeeList, Location, Comments, Reminder ,CreateDate ,CreateBy,StartDate,ReminderHour,EndDate
			)
	VALUES
			(
			@Trainer, @CourseName, @OrganizerID, @AttendeeList, @Location, @Comments ,@Reminder,@CreateDate,@CreateBy,@StartDate,@Hour,@EndDate
			)

		SET @RecordID = SCOPE_IDENTITY()

		
		IF @IsFrequencyGiven = 1  		

		INSERT INTO dbo.RANGER_TrainingCourse_Frequency
		        ( TrainingCourseID ,CheckFrequency )
		VALUES  ( @RecordID ,@CheckFrequency )		

		
		
		COMMIT TRANSACTION
		
		
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF ISNULL(@ErrorMsg,'') =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'RANGER_TrainingCourse_usp_ins_TrainingCourse',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
GO

----------------------------------------------------------------------------------------------------------------------------------
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RANGER_TrainingCourse_usp_sel_Frequency]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RANGER_TrainingCourse_usp_sel_Frequency]
GO
/****** Object:  StoredProcedure [dbo].[RANGER_TrainingCourse_usp_sel_Frequency]    Script Date: 01/02/2013 20:16:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				Titu
	Date:				0w/01/2013 11:46

	Description:		Select records from RANGER_TrainingCourse_Frequency

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[RANGER_TrainingCourse_usp_sel_Frequency]
---------Parameters----------
@TrainingCourseID int = NULL

AS

SET NOCOUNT ON
SET DATEFORMAT dmy


	/*********************
		RETURN ALL RECORDS
	*********************/
	BEGIN
			SELECT		FrequencyID, TrainingCourseID, CheckFrequency

			FROM		RANGER_TrainingCourse_Frequency								WITH (READUNCOMMITTED)

			WHERE 		TrainingCourseID=@TrainingCourseID

		RETURN
	END

GO

----------------------------------------------------------------------------------------------------------------------------------
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RANGER_TrainingCourse_usp_upd_TrainingCourse]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RANGER_TrainingCourse_usp_upd_TrainingCourse]
GO
/****** Object:  StoredProcedure [dbo].[RANGER_TrainingCourse_usp_upd_TrainingCourse]    Script Date: 01/02/2013 20:18:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				Titu
	Date:				02/01/2013 14.42

	Description:		Update record in RANGER_TrainingCourse

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[RANGER_TrainingCourse_usp_upd_TrainingCourse]
---------Parameters----------
@TrainingCourseID int,
@Trainer nvarchar(100) = NULL,
@CourseName nvarchar(100) ,
@OrganizerID int,
@AttendeeList nvarchar(max) = NULL,
@Location nvarchar(100) = NULL,
@Comments nvarchar(250) = NULL,
@Reminder bit = 0,
@IsFrequencyGiven bit ,
@CheckFrequency nvarchar(50) = NULL,
@StartDate datetime,
@Note nvarchar(20) = NULL,
@Hour int =NULL,
@EndDate datetime = NULL,
@RecordID int OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 
DECLARE @SequencePosition INT
DECLARE @ListID INT
DECLARE @SequenceNo INT 
DECLARE @Name NVARCHAR(32)

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	BEGIN TRANSACTION
	

	/************
	UPDATE RECORD
	************/
	UPDATE	RANGER_TrainingCourse SET												
	
			  Trainer=@Trainer, CourseName=@CourseName, OrganizerID=@OrganizerID, AttendeeList=@AttendeeList, Location=@Location, Comments=@Comments, Reminder=@Reminder ,StartDate=@StartDate ,[Note]=@Note , ReminderHour = @Hour ,EndDate = @EndDate

	WHERE
		TrainingCourseID =@TrainingCourseID	

		
		IF @IsFrequencyGiven = 1  		

		IF EXISTS	(
							SELECT 		TrainingCourseID
							FROM		RANGER_TrainingCourse_Frequency							WITH (READUNCOMMITTED)
							WHERE 		TrainingCourseID = @TrainingCourseID
							)
		BEGIN
			UPDATE dbo.RANGER_TrainingCourse_Frequency SET
					 TrainingCourseID = @TrainingCourseID ,CheckFrequency=@CheckFrequency
			WHERE
			TrainingCourseID =@TrainingCourseID	
		END	
		
		IF NOT EXISTS	(
							SELECT 		TrainingCourseID
							FROM		RANGER_TrainingCourse_Frequency							WITH (READUNCOMMITTED)
							WHERE 		TrainingCourseID = @TrainingCourseID
							)
		BEGIN
			INSERT INTO dbo.RANGER_TrainingCourse_Frequency 
			(TrainingCourseID   ,CheckFrequency ) 
			VALUES 
			(@TrainingCourseID,@CheckFrequency)

		END		

		
		
		COMMIT TRANSACTION
		
		
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF ISNULL(@ErrorMsg,'') =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'RANGER_TrainingCourse_usp_upd_TrainingCourse',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
	
	GO
----------------------------------------------------------------------------------------------------------------------------------
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RANGER_TrainingCourse_usp_del_TrainingCourse]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RANGER_TrainingCourse_usp_del_TrainingCourse]
GO
/****** Object:  StoredProcedure [dbo].[RANGER_TrainingCourse_usp_del_TrainingCourse]    Script Date: 01/02/2013 20:20:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				Titu
	Date:				02/01/2013 16:48

	Description:		Delete record from RANGER_TrainingCourse

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[RANGER_TrainingCourse_usp_del_TrainingCourse]
---------Parameters----------
@TrainingCourseID INT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 


SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF @TrainingCourseID > 0
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF EXISTS	(
							SELECT 		TrainingCourseID
							FROM		RANGER_TrainingCourse							WITH (READUNCOMMITTED)
							WHERE 		TrainingCourseID = @TrainingCourseID
							)
			BEGIN
					DELETE	RANGER_TrainingCourse_Frequency	WITH (ROWLOCK)
					WHERE 		TrainingCourseID = @TrainingCourseID
					
					DELETE	RANGER_TrainingCourse							WITH (ROWLOCK)
					WHERE 		TrainingCourseID = @TrainingCourseID
					SET @Success = 1
					RETURN 1
			END
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + @TrainingCourseID
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF ISNULL(@ErrorMsg,'') =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'RANGER_TrainingCourse_usp_del_TrainingCourse',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
	GO
	
----------------------------------------------------------------------------------------------------------------------------------
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RANGER_TrainingCourse_usp_upd_Attendee]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RANGER_TrainingCourse_usp_upd_Attendee]
GO
/****** Object:  StoredProcedure [dbo].[RANGER_TrainingCourse_usp_upd_Attendee]    Script Date: 03/01/2013 12:35:39 ******/

/*
	Author:				Titu
	Date:				03/01/2013 11:24

	Description:		Update Attendee List record in RANGER_Training Course

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[RANGER_TrainingCourse_usp_upd_Attendee]

---------Parameters----------
@TrainingCourseID INT,
@AttendeeIDList NVARCHAR(1024),
@Success bit OUTPUT

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)

BEGIN TRY
	SET @ErrorMsg = ''
	SET @Success = 0


	IF ISNULL(@AttendeeIDList,'') <> ''
		BEGIN
			UPDATE dbo.RANGER_TrainingCourse
			SET		AttendeeList = @AttendeeIDList
			WHERE	TrainingCourseID = @TrainingCourseID
		END
	ELSE
		BEGIN
		
			UPDATE	dbo.RANGER_TrainingCourse
			SET	AttendeeList = NULL
			WHERE	TrainingCourseID = @TrainingCourseID
			
		END	
		
		
			
	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) <> '##'
		BEGIN	
			/*SET @ErrorParamsData =	'@Barcode = ' + @Barcode + ', @Pallet_No = ' +  CAST(@Pallet_No AS nvarchar(8))  + */

			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[RANGER_TrainingCourse_usp_upd_Attendee]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1
	GO
----------------------------------------------------------------------------------------------------------------------------------


/****** Object:  StoredProcedure [dbo].[RANGER_usp_ins_Exception]    Script Date: 09/12/2012 20:30:56 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RANGER_usp_ins_Exception]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RANGER_usp_ins_Exception]
GO

/****** Object:  StoredProcedure [dbo].[RANGER_usp_ins_Exception]    Script Date: 09/12/2012 20:30:56 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
	Author:				TR
	Date:				02/02/2009 11:24

	Description:		Insert record in RANGER_Exception

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[RANGER_usp_ins_Exception]
---------Parameters----------
@ExceptionType int,
@ExceptionMessage nvarchar(2048),
@ExceptionCreateUser nvarchar(16),
@ExceptionPassUser nvarchar(16) = NULL,
@ExceptionDate datetime,
@ObjectID int = NULL,
@TypeID INT = NULL,
@DescIdentity INT = NULL,
@ListDetailID INT = NULL,
@Barcode NVARCHAR(24) = NULL,
@Image VARBINARY(MAX) = NULL,
@Signature VARBINARY(MAX) = NULL,
@CAAudio VARBINARY(MAX) = NULL,
@AssignTo NVARCHAR(16) = NULL,
@Status NVARCHAR(24) = NULL,
@RecordID int OUTPUT,
@Success bit OUTPUT,
@WorkReqNo  NVARCHAR(24) = NULL,
@ResolveBy DATETIME = NULL,
@ActionRequired nvarchar(512)= NULL, 
@ActionTaken nvarchar(512)= NULL,
@PrevActionTaken NVARCHAR(512) = NULL,
@Comments nvarchar(512)= NULL,
@Investigation NVARCHAR(400) = NULL,
@CAType NVARCHAR(20) = NULL,
@FilePath NVARCHAR(300) = NULL,
@CaptureValue NVARCHAR(300) = NULL,
@StepSequencePosition INT = NULL

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @AutoNextWorkReqNo bit
DECLARE @WorkRequestNo int
DECLARE @ListID INT
DECLARE @DaysToResolve INT

DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RecordID = 0
	SET @Success = 0
	SET @ErrorMsg = ''
	SET @ListID = NULL

	SELECT TOP 1 @AutoNextWorkReqNo = ISNULL(AutoNextWorkReqNo,0) from APP_System
	
	IF EXISTS(	SELECT * FROM dbo.RANGER_Exception WHERE Convert(INT, WorkRequestNo) = Convert(INT, @WorkReqNo))
		BEGIN
			SET @ErrorMsg = '##00Request No. already exists'
			RAISERROR(@ErrorMsg,16,1)				
		END	
		
	IF ISNULL(@Status,'') = ''
	SET @Status = 'Outstanding';
	/************
	INSERT RECORD
	************/
	INSERT INTO	RANGER_Exception												WITH (ROWLOCK)
			(
			ExceptionType, ExceptionMessage, ExceptionCreateUser, ExceptionPassUser, ExceptionDate, ObjectID, TypeID, Barcode, Image, Signature, DescIdentity, ListDetailID, Status, AssignTo,WorkRequestNo,ResolveBy,Comments,ActionRequired,ActionTaken,PrevActionTaken, CorrectiveActionType,FilePath,UpdatedOn,Investigation, Audio, CaptureValue, StepSequencePosition
			)
	VALUES
			(
			@ExceptionType, @ExceptionMessage, @ExceptionCreateUser, @ExceptionPassUser, @ExceptionDate, @ObjectID, @TypeID, @Barcode, @Image, @Signature, @DescIdentity, @ListDetailID, @Status, @AssignTo,@WorkReqNo,@ResolveBy,@Comments,@ActionRequired,@ActionTaken,@PrevActionTaken, @CAType ,@FilePath,GETDATE(),@Investigation,@CAAudio, @CaptureValue, @StepSequencePosition
			) 

		SET @RecordID = SCOPE_IDENTITY()
		
		IF @AutoNextWorkReqNo = 1 AND @ExceptionType <> 2
		BEGIN
			SELECT @WorkRequestNo = MAX(ISNULL(Convert(int, WorkRequestNo), 0))+1 from RANGER_Exception
			UPDATE RANGER_Exception SET WorkRequestNo = RIGHT( '000'+ CONVERT(nvarchar(24), @WorkRequestNo),4) WHERE ExceptionID = @RecordID 
		END
		
		SELECT @ListID = ListID FROM PROCEDURE_UserDefinedListDetail WHERE ListDetailID = @ListDetailID
		SELECT @DaysToResolve = DaysToResolve FROM PROCEDURE_UserDefinedList WHERE ListID = @ListID
		
		IF @ResolveBy IS NULL AND @DaysToResolve IS NOT NULL
		BEGIN
			SET @ResolveBy = DATEADD(day, @DaysToResolve, GETDATE())
			UPDATE RANGER_Exception SET ResolveBy = @ResolveBy WHERE ExceptionID = @RecordID 
		END
		
		IF @ResolveBy IS NOT NULL
		BEGIN
			EXEC PROCEDURE_usp_ins_or_upd_ReviewAlert	@StepID = @RecordID,
														@CheckFrequency = 'CorrectiveActionAlert',
														@DateTimeOfAction = @ResolveBy,
														@ActionTaken = 0,
														@AlertType = 13,
														@RecordID = 0,
														@Success = 0
		END
		
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'RANGER_usp_ins_Exception',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO

----------------------------------------------------------------------------------------------------------------------------------


/****** Object:  StoredProcedure [dbo].[REPORT_usp_sel_CommonCAHeader]    Script Date: 09/12/2012 20:30:56 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[REPORT_usp_sel_CommonCAHeader]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[REPORT_usp_sel_CommonCAHeader]
GO

/****** Object:  StoredProcedure [dbo].[REPORT_usp_sel_CommonCAHeader]    Script Date: 09/12/2012 20:30:56 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
	Author:				TR
	Date:				02/02/2009 11:24

	Description:		Select record For CommonCA Report Header

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[REPORT_usp_sel_CommonCAHeader]
---------Parameters----------
@StartDate DATETIME ,
@Enddate DATETIME,
@StepID INT = NULL,
@Success bit OUTPUT,
@FilePath NVARCHAR(300) = NULL

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @AutoNextWorkReqNo bit
DECLARE @WorkRequestNo int

DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	     
	    IF(@StepID = 0)
	    
	    BEGIN

		SELECT   ExceptionMessage, Count(RE.ExceptionID) NoOccurance   
		FROM RANGER_Exception RE
		INNER JOIN PROCEDURE_StepDetail ps ON RE.DescIdentity = ps.StepDetailID
		INNER JOIN PROCEDURE_Step p ON P.StepID = ps.StepID
		WHERE ExceptionType = 0 AND ExceptionDate Between @StartDate AND @Enddate  
		Group By ExceptionMessage 
		ORDER BY Count(RE.ExceptionID) DESC
		
		SET @Success = 1
		RETURN 1
		
		END
		
		ELSE
	    
	    BEGIN

		SELECT   ExceptionMessage, Count(RE.ExceptionID) NoOccurance   
		FROM RANGER_Exception RE
		INNER JOIN PROCEDURE_StepDetail ps ON RE.DescIdentity = ps.StepDetailID
		INNER JOIN PROCEDURE_Step p ON P.StepID = ps.StepID
		WHERE ExceptionType = 0 AND ExceptionDate Between @StartDate AND @Enddate  AND p.StepID = @StepID 
		Group By ExceptionMessage 
		ORDER BY Count(RE.ExceptionID) DESC
		
		SET @Success = 1
		RETURN 1
		
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'REPORT_usp_sel_CommonCAHeader',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO

----------------------------------------------------------------------------------------------------------------------------------


/****** Object:  StoredProcedure [dbo].[REPORT_usp_sel_CommonCADetail]    Script Date: 09/12/2012 20:30:56 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[REPORT_usp_sel_CommonCADetail]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[REPORT_usp_sel_CommonCADetail]
GO

/****** Object:  StoredProcedure [dbo].[REPORT_usp_sel_CommonCADetail]    Script Date: 09/12/2012 20:30:56 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
	Author:				TR
	Date:				02/02/2009 11:24

	Description:		Select record For CommonCA Report

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[REPORT_usp_sel_CommonCADetail]
---------Parameters----------
@StartDate DATETIME ,
@Enddate DATETIME,
@Success bit OUTPUT,
@FilePath NVARCHAR(300) = NULL

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @AutoNextWorkReqNo bit
DECLARE @WorkRequestNo int

DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	SELECT  ExceptionMessage , P.Name , ps.Description , Count(RE.ExceptionID) NoOccurance   FROM RANGER_Exception RE
	LEFT JOIN PROCEDURE_StepDetail ps ON RE.DescIdentity = ps.StepDetailID
	LEFT JOIN PROCEDURE_Step p ON P.StepID = ps.StepID

	WHERE ExceptionType = 0 AND P.Name is not NULL AND ExceptionDate Between @StartDate AND @Enddate
	Group By ExceptionMessage , P.Name, ps.Description
	ORDER BY Count(RE.ExceptionID) DESC
		
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'REPORT_usp_sel_CommonCA',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO



----------------------------------------------------------------------------------------------------------------------------------


/****** Object:  StoredProcedure [dbo].[REPORT_usp_sel_CommonCAByProcedureDetail]    Script Date: 09/12/2012 20:30:56 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[REPORT_usp_sel_CommonCAByProcedureDetail]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[REPORT_usp_sel_CommonCAByProcedureDetail]
GO

/****** Object:  StoredProcedure [dbo].[REPORT_usp_sel_CommonCADetail]    Script Date: 09/12/2012 20:30:56 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
	Author:				TR
	Date:				02/02/2009 11:24

	Description:		Select record For CommonCA by Procedure Report

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[REPORT_usp_sel_CommonCAByProcedureDetail]
---------Parameters----------
@StartDate DATETIME ,
@Enddate DATETIME,
@Success bit OUTPUT,
@FilePath NVARCHAR(300) = NULL

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @AutoNextWorkReqNo bit
DECLARE @WorkRequestNo int

DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	SELECT  ExceptionMessage , P.Name  , Count(RE.ExceptionID) NoOccurance  FROM RANGER_Exception RE
	LEFT JOIN PROCEDURE_StepDetail ps ON RE.DescIdentity = ps.StepDetailID
	LEFT JOIN PROCEDURE_Step p ON P.StepID = ps.StepID

	WHERE ExceptionType = 0 AND P.Name is not NULL AND ExceptionDate Between @StartDate AND @Enddate
	Group By ExceptionMessage , P.Name
	ORDER BY Count(RE.ExceptionID) DESC
		
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = '[REPORT_usp_sel_CommonCAByProcedureDetail]',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO




/****** Object:  StoredProcedure [dbo].[RANGER_usp_sel_Exception]    Script Date: 12/10/2012 19:16:29 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RANGER_usp_sel_Exception]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RANGER_usp_sel_Exception]
GO


/****** Object:  StoredProcedure [dbo].[RANGER_usp_sel_Exception]    Script Date: 12/10/2012 19:16:29 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				TR
	Date:				02/02/2009 11:24

	Description:		Select records from RANGER_Exception

	History		Name		Date		Mod		
	=============================================================================================================================================
	H1			Titu(Junr)	09/07/2012	Change Status = @Status to Status LIKE @Status to allow wild card search


	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[RANGER_usp_sel_Exception]
---------Parameters----------
@Status NVARCHAR(24),
@WorkRequest BIT,
@UserName nvarchar(16) = '',
@ExceptionType int

AS

DECLARE @PermissionOnDepartments NVARCHAR(MAX)
DECLARE @AssignDepartment NVARCHAR(50)

SET NOCOUNT ON
SET DATEFORMAT dmy

SET @PermissionOnDepartments=''	
	IF ISNULL(@UserName,'') <> ''
	SELECT @PermissionOnDepartments=PermissionOnDepartments from USER_User where UserName=@UserName

SELECT @AssignDepartment = 'D-'+ Cast(r.RoleID AS nvarchar(20)) FROM USER_User u 
INNER JOIN dbo.USER_Role r ON u.RoleID = r.RoleID
WHERE u.UserName = @UserName



IF ISNULL(@WorkRequest,0) = 1
	BEGIN
		SELECT		ExceptionID, ExceptionType, ExceptionMessage, ExceptionCreateUser, ExceptionPassUser, ExceptionDate, NonConformance, ActionRequired, ActionTaken, Comments, WorkRequestNo, ResolveBy, Resolved, OB.DescriptionShortName AS Description, RE.Status, AssignTo, '' AS ProcedureName, LO.DescriptionShortName AS Location, Image, RE.CreateDate, RE.CorrectiveActionType,RE.ResolvedImage,RE.FilePath,RE.Investigation,RE.Audio, RE.CaptureValue, RE.StepSequencePosition
		FROM		RANGER_Exception RE
		LEFT JOIN LOCATION_ObjectNew OB ON RE.ObjectID = OB.ObjectID
		LEFT JOIN LOCATION_ObjectNew LO ON LO.ObjectID = OB.LocationID
		WHERE		WorkRequestNo IS NULL AND ExceptionType = @ExceptionType
		ORDER BY 	ExceptionDate DESC			
		RETURN
	END
	
	
	
IF @PermissionOnDepartments=''
	BEGIN 
		SELECT RE.ExceptionID, RE.ExceptionType, RE.ExceptionMessage, RE.ExceptionCreateUser, RE.ExceptionPassUser, RE.ExceptionDate, RE.NonConformance, RE.ActionRequired, RE.ActionTaken, RE.PrevActionTaken, RE.Comments, RE.WorkRequestNo, RE.ResolveBy, RE.Resolved, OB.Description AS Description, RE.Status, RE.AssignTo, PR.Name AS ProcedureName, '' AS Location, RE.Image, RE.CreateDate, RE.CorrectiveActionType,RE.ResolvedImage,RE.FilePath,RE.Investigation,RE.Audio, RE.CaptureValue, RE.StepSequencePosition
		FROM RANGER_Exception RE
		INNER JOIN dbo.PROCEDURE_StepDetail OB ON RE.DescIdentity = OB.StepDetailID	
		INNER JOIN PROCEDURE_Step PR ON OB.StepID = PR.StepID
		WHERE RE.ExceptionType = @ExceptionType 
		AND RE.Status LIKE @Status 
		AND RE.DescIdentity IS NOT NULL		
		RETURN
	 END 
ELSE 
	 BEGIN
		SELECT RE.ExceptionID, RE.ExceptionType, RE.ExceptionMessage, RE.ExceptionCreateUser, RE.ExceptionPassUser, RE.ExceptionDate, RE.NonConformance, RE.ActionRequired, RE.ActionTaken, RE.PrevActionTaken, RE.Comments, RE.WorkRequestNo, RE.ResolveBy, RE.Resolved, OB.Description AS Description, RE.Status, RE.AssignTo, PR.Name AS ProcedureName, '' AS Location, RE.Image, RE.CreateDate, RE.CorrectiveActionType,RE.ResolvedImage,RE.FilePath,RE.Investigation,RE.Audio, RE.CaptureValue, RE.StepSequencePosition
		FROM RANGER_Exception RE
		INNER JOIN dbo.PROCEDURE_StepDetail OB ON RE.DescIdentity = OB.StepDetailID	
		INNER JOIN PROCEDURE_Step PR ON OB.StepID = PR.StepID		
		LEFT JOIN USER_User u on pr.UserName=u.UserName
		--INNER JOIN USER_Role ON USER_Role.RoleID = u.RoleID
		WHERE RE.ExceptionType = @ExceptionType 
		AND RE.Status LIKE @Status 
		AND RE.DescIdentity IS NOT NULL
		AND (u.RoleID in (SELECT FieldValue FROM dbo.fnSplit(',', @PermissionOnDepartments))
		OR RE.AssignTo	= @UserName OR RE.AssignTo = @AssignDepartment)
	 	RETURN
	 END

GO


/****** Object:  Trigger [trg_INSERT]    Script Date: 04/24/2012 18:22:14 ******/
IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[trg_INSERT]'))
DROP TRIGGER [dbo].[trg_INSERT]
GO

/****** Object:  StoredProcedure [dbo].[PDA_usp_CreateMirror]    Script Date: 05/02/2013 18:54:25 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PDA_usp_CreateMirror]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PDA_usp_CreateMirror]
GO



/****** Object:  StoredProcedure [dbo].[PDA_usp_CreateMirror]    Script Date: 05/02/2013 18:54:25 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[PDA_usp_CreateMirror] AS


DECLARE @Success bit

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @ErrorParamsData nvarchar (1024)



SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY	
	INSERT INTO 	PDA_Transactions_Mirror (TranID, [BigText], [TranUserName], [DeviceIP], [TranDate], [Signature], [CAImage],[CAAudio] ,DeviceID,StepImage)
	SELECT 			TranID, [BigText], [TranUserName], [DeviceIP], [TranDate], [Signature], [CAImage],[CAAudio],  DeviceID,StepImage
	FROM 			PDA_Transactions
	SET @Success = 1
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0
	
	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PDA_usp_CreateMirror',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO



/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_ins_StepReading]    Script Date: 04/28/2012 02:24:34 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_ins_StepReading]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_ins_StepReading]
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_ins_StepReading]    Script Date: 04/28/2012 02:24:34 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
	Author:				MR
	Date:				27/04/2012 14:35

	Description:		Insert record in PROCEDURE_StepReading

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_ins_StepReading]
---------Parameters----------
@StepID int,
@StartDateTime datetime,
@EndDateTime datetime,
@TimeTaken time(0),
@ScheduleDownTime time(0),
@UnScheduleDownTime time(0),
@UserName nvarchar(16),
@RecordID int OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int

DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RecordID = 0
	SET @Success = 0

	/************
	INSERT RECORD
	************/
	INSERT INTO	PROCEDURE_StepReading WITH (ROWLOCK)
			(
			StepID, StartDateTime, EndDateTime, TimeTaken, ScheduleDownTime, UnScheduleDownTime, UserName
			)
	VALUES
			(
			@StepID, @StartDateTime, @EndDateTime, @TimeTaken, @ScheduleDownTime, @UnScheduleDownTime, @UserName
			)

	SET @RecordID = SCOPE_IDENTITY()
	SET @Success = 1
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_ins_StepReading',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO



/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_search_Job]    Script Date: 12/10/2012 20:54:10 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_search_Job]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_search_Job]
GO



/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_search_Job]    Script Date: 12/10/2012 20:54:10 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




/*
	Author:				MR
	Date:				7/5/2012 23:30

	Description:		Search records from PROCEDURE_Job

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_search_Job]
---------Parameters----------
@Keyword nvarchar(64) = NULL,
@SearchField nvarchar(32) = NULL,
@TypeProcedure int,
@UserName nvarchar(16) = ''

AS

DECLARE @SQL_STRING nvarchar (MAX)
DECLARE @PermissionOnDepartments NVARCHAR(MAX)
DECLARE @IDToHandle INT
DECLARE @GOODSINNO NVARCHAR(64)
DECLARE @SequencePosition INT
DECLARE @ReadingDate DATETIME
DECLARE @TraceabilityBarcode NVARCHAR(16)


SET NOCOUNT ON
SET DATEFORMAT dmy
SET @PermissionOnDepartments=''
	select @PermissionOnDepartments=PermissionOnDepartments from USER_User where UserName=@UserName
	
    
	
	IF ISNULL(@Keyword,'') <> '' 
		BEGIN
		/*********************************************
			SELECT RECORDS ACCORDING TO SEARCH FIELD AND KEYWORD
		*********************************************/
		
		    SET @SQL_STRING='SELECT distinct j.JobID, j.Name, j.CompleteDate, j.TypeProcedure, j.DeviceID, jd.UserName,j.GoodInNo
								FROM PROCEDURE_Job j WITH (READUNCOMMITTED) 
								INNER join PROCEDURE_JobDetail jd on j.JobID=jd.JobID 
								INNER JOIN dbo.PROCEDURE_StepDetail sd on jd.StepDetailID = sd.StepDetailID 
								LEFT JOIN   STOCKCONTROL_ProductCode pcd ON jd.JobDetailID = pcd.JobDetailID '
			IF(@PermissionOnDepartments<>'')
				 SET @SQL_STRING = @SQL_STRING + 'INNER JOIN PROCEDURE_STEP s on j.STEPID=s.STEPID 
												INNER JOIN USER_User u on s.UserName=u.UserName INNER JOIN USER_Role ON USER_Role.RoleID = u.RoleID '
				
			IF(@SearchField = 'All')
				SET @SQL_STRING = @SQL_STRING+' WHERE j.TypeProcedure = ' + CAST(@TypeProcedure as nvarchar(10)) +
					' AND (J.Name LIKE ''%'+@Keyword+'%'' OR JD.Description LIKE ''%'+@Keyword+'%'' 
					OR JD.CaptureValue LIKE ''%'+@Keyword+'%'' OR JD.CorrectiveAction LIKE ''%'+@Keyword+'%'' 
					OR JD.Comments LIKE ''%'+@Keyword+'%'' OR JD.TraceabilityBarcode LIKE ''%'+@Keyword+'%'' OR JD.UserName LIKE ''%'+@Keyword+'%'' )'								
			
			ELSE IF(@SearchField = 'Procedure Name')
				SET @SQL_STRING = @SQL_STRING + ' WHERE j.TypeProcedure = ' + CAST(@TypeProcedure as nvarchar(10)) + ' AND j.Name LIKE ''%'+@Keyword+'%'''
			
			ELSE IF(@SearchField = 'Description')
				SET @SQL_STRING =  @SQL_STRING + ' WHERE j.TypeProcedure = ' + CAST(@TypeProcedure as nvarchar(10)) + ' AND JD.Description LIKE ''%'+@Keyword+'%'''
			
			ELSE IF(@SearchField = 'Value')
				SET @SQL_STRING =  @SQL_STRING + ' WHERE j.TypeProcedure = ' + CAST(@TypeProcedure as nvarchar(10)) + ' AND JD.CaptureValue LIKE ''%'+@Keyword+'%'''
			
			ELSE IF(@SearchField = 'Corrective Action')
				SET @SQL_STRING =  @SQL_STRING + ' WHERE j.TypeProcedure = ' + CAST(@TypeProcedure as nvarchar(10)) + ' AND JD.CorrectiveAction LIKE ''%'+@Keyword+'%'''
			
			ELSE IF(@SearchField = 'Comments')
				SET @SQL_STRING =  @SQL_STRING + ' WHERE j.TypeProcedure = ' + CAST(@TypeProcedure as nvarchar(10)) + ' AND JD.Comments LIKE ''%'+@Keyword+'%'''
			
			ELSE IF(@SearchField = 'User Name')
				SET @SQL_STRING =  @SQL_STRING + ' WHERE j.TypeProcedure = ' + CAST(@TypeProcedure as nvarchar(10)) + ' AND JD.UserName LIKE ''%'+@Keyword+'%'''	
				
			ELSE IF(@SearchField = 'Traceability Barcode')
				SET @SQL_STRING =  @SQL_STRING + ' WHERE j.TypeProcedure = ' + CAST(@TypeProcedure as nvarchar(10)) + ' AND pcd.TraceabilityCode LIKE ''%'+@Keyword+'%'''	
				
			ELSE IF(@SearchField = 'Batch Code')
				SET @SQL_STRING =  @SQL_STRING + ' WHERE sd.DataTypeName=''Batch Code'' j.TypeProcedure = ' + CAST(@TypeProcedure as nvarchar(10)) + ' AND JD.CaptureValue LIKE ''%'+@Keyword+'%'''
				
			IF @PermissionOnDepartments<>''
				SET @SQL_STRING = @SQL_STRING + ' and USER_Role.RoleID in ('+@PermissionOnDepartments+') '
			PRINT @SQL_STRING
			EXEC(@SQL_STRING)

			RETURN
		END

	/*********************
		RETURN ALL RECORDS
	*********************/
	BEGIN
		
			
		IF @PermissionOnDepartments=''
			BEGIN
				SELECT distinct j.JobID, j.Name, j.CompleteDate, j.TypeProcedure, j.DeviceID, jd.UserName,j.GoodInNo
				FROM PROCEDURE_Job j WITH (READUNCOMMITTED) 
				INNER join PROCEDURE_JobDetail jd on j.JobID=jd.JobID 
				WHERE j.TypeProcedure = @TypeProcedure 				
				ORDER BY j.CompleteDate DESC
				
			  RETURN
			END
		ELSE
			BEGIN
				SELECT distinct j.JobID, j.Name, j.CompleteDate, j.TypeProcedure, j.DeviceID, jd.UserName,j.GoodInNo
				FROM PROCEDURE_Job j WITH (READUNCOMMITTED) 
				INNER join PROCEDURE_JobDetail jd on j.JobID=jd.JobID 
				INNER join USER_User u on jd.UserName=u.UserName
				WHERE j.TypeProcedure = @TypeProcedure 
				and  u.PermissionOnDepartments in (SELECT FieldValue FROM dbo.fnSplit(',', @PermissionOnDepartments))
				ORDER BY j.CompleteDate DESC
				
			  RETURN
			END
			
			
			
			
			 
	END



GO











/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_UserDefinedList' AND column_name = 'SignatureRequired')
ALTER TABLE dbo.PROCEDURE_UserDefinedList ADD
	SignatureRequired bit NOT NULL CONSTRAINT DF_PROCEDURE_UserDefinedList_Signature DEFAULT 0
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_UserDefinedList' AND column_name = 'AssignUser')
ALTER TABLE dbo.PROCEDURE_UserDefinedList ADD
	AssignUser bit NOT NULL CONSTRAINT DF_PROCEDURE_UserDefinedList_AssignUser DEFAULT 0
GO
ALTER TABLE dbo.PROCEDURE_UserDefinedList SET (LOCK_ESCALATION = TABLE)
GO
COMMIT

GO



/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_ins_UserDefinedList]    Script Date: 05/14/2012 19:19:23 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_ins_UserDefinedList]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_ins_UserDefinedList]
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_ins_UserDefinedList]    Script Date: 05/02/2012 15:11:53 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				TR
	Date:				29/06/2009 15:20

	Description:		Insert record in PROCEDURE_UserDefinedList

	History		Name		Date		Mod		
	=============================================================================================================================================
	1.			Titu(Jr)	10-Sep-2012	New columns added including SequenceNo



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_ins_UserDefinedList]
---------Parameters----------
@Name nvarchar(32),
@Active bit,
@CheckDuplicates bit,
@CorrectiveAction bit,
@SignatureRequired bit,
@AssignUser bit,
@DaysToResolve INT = NULL,
@CreatedBy nvarchar(16),
@CreatedDate datetime,
@RecordID int OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @SequenceNo INT 

DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RecordID = 0
	SET @Success = 0

	IF @CheckDuplicates = 1
		BEGIN
			/***************************
			DON'T ALLOW DUPLICATE RECORD
			***************************/
			IF EXISTS	(
						SELECT 		ListID
						FROM		PROCEDURE_UserDefinedList						WITH (READUNCOMMITTED)
						WHERE 		[Name] = @Name
						)
			BEGIN
				SET @ErrorMsg = '##01Duplicate record in PROCEDURE_UserDefinedList ' + @Name + ' was not inserted into the table'
				RAISERROR(@ErrorMsg,16,1)
			RETURN -1
			END
		END

	/************
	INSERT RECORD
	************/
	SET @SequenceNo = (SELECT ISNULL(MAX(SequenceNo),0) FROM PROCEDURE_UserDefinedList WHERE CorrectiveAction = @CorrectiveAction) + 1
	INSERT INTO	PROCEDURE_UserDefinedList												WITH (ROWLOCK)
			( 
			[Name], SequenceNo, Active, CorrectiveAction, SignatureRequired, AssignUser, DaysToResolve, CreatedBy, CreatedDate, UpdatedOn
			)
	VALUES
			(
			@Name, @SequenceNo, @Active, @CorrectiveAction, @SignatureRequired, @AssignUser, @DaysToResolve, @CreatedBy, @CreatedDate, GETDATE()
			)

		SET @RecordID = SCOPE_IDENTITY()
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_ins_UserDefinedList',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
GO


/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_UserDefinedList]    Script Date: 05/14/2012 19:19:23 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_upd_UserDefinedList]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_upd_UserDefinedList]
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_UserDefinedList]    Script Date: 05/02/2012 15:12:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				TR
	Date:				29/06/2009 15:20

	Description:		Update record in PROCEDURE_UserDefinedList

	History		Name		Date			Mod		
	=============================================================================================================================================
	1. 			Titu(Jr)	10-Sep-2012		SequenceNo, UpdatedBy, UpdatedDate columns added



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_upd_UserDefinedList]
---------Parameters----------
@ListID int,
@Name nvarchar(32),
@SequenceNo INT = NULL,
@Active bit,
@SignatureRequired bit,
@AssignUser bit,
@DaysToResolve INT = NULL,
@UpdatedBy nvarchar(16) = NULL,
@UpdatedDate datetime  = NULL,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF @ListID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		ListID
							FROM		PROCEDURE_UserDefinedList				WITH (READUNCOMMITTED)
							WHERE 		ListID = @ListID
							)
			BEGIN
				SET @ErrorMsg = '##01Table PROCEDURE_UserDefinedList - Could not find record ' + CAST(@ListID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			/************
			UPDATE RECORD
			************/
			UPDATE	PROCEDURE_UserDefinedList												WITH (ROWLOCK)

			SET 	[Name] = @Name,
					--SequenceNo = @SequenceNo,
					Active = @Active,
					SignatureRequired = @SignatureRequired,
					AssignUser = @AssignUser,
					DaysToResolve = @DaysToResolve,
					--CreatedBy = @CreatedBy,
					--CreatedDate = @CreatedDate,
					UpdatedBy = @UpdatedBy,
					UpdatedDate = @UpdatedDate,
					UpdatedOn = GETDATE()

			WHERE	ListID = @ListID

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@ListID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_upd_UserDefinedList',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_del_UserDefinedList]    Script Date: 09/20/2012 17:18:55 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_del_UserDefinedList]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_del_UserDefinedList]
GO


/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_del_UserDefinedList]    Script Date: 09/20/2012 17:18:55 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
	Author:				TR
	Date:				29/06/2009 15:20

	Description:		Delete record from PROCEDURE_UserDefinedList

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_del_UserDefinedList]
---------Parameters----------
@ListID int,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @SequenceNo INT
DECLARE @CorrectiveAction BIT
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg = ''
	
	IF @ListID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		ListID
							FROM		PROCEDURE_UserDefinedList							WITH (READUNCOMMITTED)
							WHERE 		ListID = @ListID
							)
			BEGIN
				SET @ErrorMsg = '##01Table PROCEDURE_UserDefinedList - Could not find record ' + CAST(@ListID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END
			
			SELECT @SequenceNo = SequenceNo, @CorrectiveAction = CorrectiveAction
			FROM PROCEDURE_UserDefinedList
			WHERE ListID = @ListID

			DELETE	PROCEDURE_UserDefinedList							WITH (ROWLOCK)
			WHERE 	ListID = @ListID

			UPDATE 	PROCEDURE_UserDefinedList
			SET SequenceNo = SequenceNo - 1
			WHERE SequenceNo > @SequenceNo AND CorrectiveAction = @CorrectiveAction

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@ListID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_del_UserDefinedList',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO



IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_sel_UserDefinedList_SignatureRequired]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_sel_UserDefinedList_SignatureRequired]
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_sel_UserDefinedList_SignatureRequired]    Script Date: 05/04/2012 19:57:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[PROCEDURE_usp_sel_UserDefinedList_SignatureRequired]

---------Parameters----------
@ListID INT,
@SignatureRequired bit OUTPUT

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)

BEGIN TRY
	SET @ErrorMsg = ''
	SET @SignatureRequired = 0

	SELECT @SignatureRequired = SignatureRequired
	FROM		PROCEDURE_UserDefinedList
	WHERE		ListID = @ListID
				
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) <> '##'
		BEGIN	
			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[PROCEDURE_usp_sel_UserDefinedList_SignatureRequired]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1
GO




IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fnGetEmailTo]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[fnGetEmailTo]
GO
/****** Object:  UserDefinedFunction [dbo].[fnGetEmailTo]    Script Date: 03/07/2013 11:58:52 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				Titu(Jr)
	Date:				07-Mar-2013

	Description:		select Emails from EmailTo

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE FUNCTION [dbo].[fnGetEmailTo] ( @EmailHistoryID INT ) 
RETURNS NVARCHAR(MAX)
AS
BEGIN

-- define the last EmailTo ID handled
DECLARE @IDToHandle INT
SET @IDToHandle= 0

-- define the EmailTo ID to be handled now
DECLARE @IsProcessed INT
DECLARE @email NVARCHAR(MAX)
DECLARE @emails NVARCHAR(MAX)
DECLARE @objectType INT
DECLARE @objectID INT
DECLARE @emailTo NVARCHAR(MAX)

SET @emails = NULL
SET @IsProcessed = 1

declare @EmailToTemp table (
										  ID BIGINT ,
										  ToEmail NVARCHAR(MAX),
										  SentToObjectID INT,
										  SentToObjectType INT,
										  IsProcessed BIT)
			

			INSERT INTO @EmailToTemp
			SELECT EmailToID,ToEmail,SentToObjectID,SentToObjectType,0
			FROM Ranger_EmailTo 
			WHERE EmailHistoryID = @EmailHistoryID

-- as long as we have toemails......    
WHILE @IDToHandle IS NOT NULL
BEGIN
    -- call your sproc

    -- set the last customer handled to the one we just handled
    SET @IDToHandle = NULL
       

    -- select the next customer to handle    
    SELECT TOP 1 @IDToHandle = p.ID ,@objectType = p.SentToObjectType,@objectID =p.SentToObjectID,@emailTo=ToEmail
	FROM @EmailToTemp p
	WHERE p.IsProcessed = 0
	ORDER BY p.ID ASC

	IF @IDToHandle IS NOT NULL
	BEGIN
	
	IF @objectType = 1
	  SET @email = ( select (CustomerName + ' ('+ EmailAddress+')')  from STOCKCONTROL_Customer where CustomerID =@objectID )
	  
	IF @objectType = 2
	  SET @email = ( select (SupplierName + ' ('+ EmailAddress+')')  from STOCKCONTROL_Supplier where SupplierID =@objectID )
	  
	IF @objectType = 3
	  SET @email = ( select (FirstName + ' ('+ EmailAddress+')')  from USER_User where UserID =@objectID )
	  
    IF @objectType = 4
	  SET @email = @emailTo
	  
    IF @objectType IS NULL
      SET @email = ISNULL (@emailTo,'')
	  
    SET @emails = ISNULL(@emails + ', ','') +  + ISNULL(@email,'')
	Update @EmailToTemp set IsProcessed = 1 WHERE  ID = @IDToHandle
	SET @email = NULL
	
	END
END

RETURN @emails

END

GO

/****** Object:  UserDefinedFunction [dbo].[fnGetItemLocationName]    Script Date: 08/29/2011 19:28:16 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

ALTER FUNCTION [dbo].[fnGetItemLocationName]
	(
	@DataTypeName nvarchar(512),
	@DefaultValue nvarchar(32)
	)
RETURNS nvarchar(512)
AS
	BEGIN
		DECLARE @ObjectID INT
		DECLARE @LocationName nvarchar(512)
		IF @DataTypeName = 'Scan Only' OR @DataTypeName = 'Scan and Check'
			BEGIN
				
				SELECT @LocationName = L2.DescriptionShortName 
				FROM vwAllObjects OB
				INNER JOIN LOCATION_ObjectNew L1 ON OB.ObjectID = L1.ObjectID
				INNER JOIN LOCATION_ObjectNew L2 ON L1.LocationID = L2.ObjectID
				WHERE OB.Barcode = @DefaultValue				
			END
		ELSE
			SET @LocationName = '';
		RETURN @LocationName;
	END

--SELECT dbo.fnGetItemLocationName('Audit Item','MD000017')

GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[REPORT_usp_Procedures]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[REPORT_usp_Procedures]
GO

CREATE PROCEDURE [dbo].[REPORT_usp_Procedures]

---------Parameters----------
@StepID INT,
@WhereCondition NVARCHAR(MAX)

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)
DECLARE @SQL NVARCHAR(MAX)
BEGIN TRY
	SET @ErrorMsg = ''
--	SET @Success = 0
	IF @StepID > 0
		SELECT DISTINCT
		ROW_NUMBER() OVER (ORDER BY PROCEDURE_JobDetail.ReadingDate ASC) AS StepNumber,
		PROCEDURE_StepDetail.StepID,
		PROCEDURE_StepDetail.StepDetailID, 
		PROCEDURE_StepDetail.Description, 
		PROCEDURE_StepDetail.DefaultValue, 
		(CASE WHEN (SELECT DescriptionShortName FROM  LOCATION_ObjectNew WHERE Barcode= PROCEDURE_JobDetail.CaptureValue) <> '' THEN (SELECT DescriptionShortName FROM  LOCATION_ObjectNew WHERE Barcode = PROCEDURE_JobDetail.CaptureValue) ELSE CaptureValue END) AS CaptureValue,
		PROCEDURE_JobDetail.CorrectiveAction,
		PROCEDURE_JobDetail.Comments,
		PROCEDURE_JobDetail.UserName,
		dbo.fnGetItemLocationName(PROCEDURE_StepDetail.DataTypeName,PROCEDURE_StepDetail.DefaultValue) AS LocationName, 
		PROCEDURE_JobDetail.MinValue, 
		PROCEDURE_JobDetail.MaxValue, 
		PROCEDURE_StepDetail.Mandatory, 
		--CASE PROCEDURE_StepDetail.DataTypeName WHEN 'Scan Only' THEN dbo.fnGetDataType(PROCEDURE_StepDetail.DefaultValue) ELSE PROCEDURE_StepDetail.DataType END AS DataType,
		PROCEDURE_StepDetail.DataTypeName AS DataType,
		PROCEDURE_JobDetail.ReadingDate,
		CONVERT(VARCHAR, PROCEDURE_JobDetail.ReadingDate, 103) + ' ' + CONVERT(VARCHAR, PROCEDURE_JobDetail.ReadingDate, 108) AS ReadingTime,
		PROCEDURE_JobDetail.Signature
	FROM PROCEDURE_StepDetail
	INNER JOIN PROCEDURE_JobDetail ON PROCEDURE_StepDetail.StepDetailID = PROCEDURE_JobDetail.StepDetailID
	INNER JOIN PROCEDURE_Step ON PROCEDURE_Step.StepID = PROCEDURE_StepDetail.StepID
	WHERE PROCEDURE_Step.StepID = @StepID
	ORDER BY PROCEDURE_JobDetail.ReadingDate
	ELSE
		BEGIN
		SET @SQL = 'SELECT DISTINCT
			ROW_NUMBER() OVER (ORDER BY PROCEDURE_JobDetail.ReadingDate ASC) AS StepNumber,
			PROCEDURE_StepDetail.StepID,
			PROCEDURE_StepDetail.StepDetailID, 
			PROCEDURE_StepDetail.Description, 
			PROCEDURE_StepDetail.DefaultValue, 
			(CASE WHEN (SELECT DescriptionShortName FROM  LOCATION_ObjectNew WHERE Barcode= PROCEDURE_JobDetail.CaptureValue) <> '''' THEN (SELECT DescriptionShortName FROM  LOCATION_ObjectNew WHERE Barcode = PROCEDURE_JobDetail.CaptureValue) ELSE CaptureValue END) AS CaptureValue,
			PROCEDURE_JobDetail.CorrectiveAction,
			PROCEDURE_JobDetail.Comments,
			PROCEDURE_JobDetail.UserName,
			dbo.fnGetItemLocationName(PROCEDURE_StepDetail.DataTypeName,PROCEDURE_StepDetail.DefaultValue) AS LocationName, 
			PROCEDURE_JobDetail.MinValue, 
			PROCEDURE_JobDetail.MaxValue, 
			PROCEDURE_StepDetail.Mandatory, 
			--CASE PROCEDURE_StepDetail.DataTypeName WHEN ''Scan Only'' THEN dbo.fnGetDataType(PROCEDURE_StepDetail.DefaultValue) ELSE PROCEDURE_StepDetail.DataType END AS DataType,
			PROCEDURE_StepDetail.DataTypeName AS DataType,
			PROCEDURE_JobDetail.ReadingDate,
			CONVERT(VARCHAR, PROCEDURE_JobDetail.ReadingDate, 103) + '' '' + CONVERT(VARCHAR, PROCEDURE_JobDetail.ReadingDate, 108) AS ReadingTime,
			PROCEDURE_JobDetail.Signature
		FROM PROCEDURE_StepDetail
		INNER JOIN PROCEDURE_JobDetail ON PROCEDURE_StepDetail.StepDetailID = PROCEDURE_JobDetail.StepDetailID
		INNER JOIN PROCEDURE_Step ON PROCEDURE_Step.StepID = PROCEDURE_StepDetail.StepID
		WHERE ' + @WhereCondition +	'	
		ORDER BY PROCEDURE_JobDetail.ReadingDate'
		END
	EXEC (@SQL)
--	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) <> '##'
		BEGIN	
			/*SET @ErrorParamsData =	'@Barcode = ' + @Barcode + ', @Pallet_No = ' +  CAST(@Pallet_No AS nvarchar(8))  + */

			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[REPORT_usp_Procedures]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1


GO


/****** Object:  StoredProcedure [dbo].[REPORT_usp_ProcedureAlert]    Script Date: 01/14/2013 18:20:04 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[REPORT_usp_ProcedureAlert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[REPORT_usp_ProcedureAlert]
GO

/****** Object:  StoredProcedure [dbo].[REPORT_usp_ProcedureAlert]    Script Date: 01/14/2013 18:20:04 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[REPORT_usp_ProcedureAlert]

---------Parameters----------
@StepID INT,
@WhereCondition NVARCHAR(MAX)

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)
DECLARE @SQL NVARCHAR(MAX)

BEGIN TRY
	SET @ErrorMsg = ''
--	SET @Success = 0
	IF @StepID > 0
		SELECT al.DateTimeOfAction, pr.Name ProcedureName, r.RoleDescription
		FROM dbo.Procedure_Alert al
		INNER JOIN PROCEDURE_Step pr on al.StepID = pr.StepID
		LEFT JOIN USER_User u on u.UserName = pr.UserName
		LEFT JOIN USER_Role r on u.RoleID = r.RoleID
		where al.StepID = @StepID
	ELSE
		BEGIN
		SET @SQL = 'SELECT al.DateTimeOfAction, pr.Name ProcedureName, r.RoleDescription
		FROM dbo.Procedure_Alert al
		INNER JOIN PROCEDURE_Step pr on al.StepID = pr.StepID
		LEFT JOIN USER_User u on u.UserName = pr.UserName
		LEFT JOIN USER_Role r on u.RoleID = r.RoleID
		WHERE ' + @WhereCondition 	

		END
	EXEC (@SQL)



	
	
--	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) <> '##'
		BEGIN	

			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[REPORT_usp_ProcedureAlert]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1

GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LOCATION_GetItemLocationName]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[LOCATION_GetItemLocationName]
GO

/****** Object:  StoredProcedure [dbo].[LOCATION_GetItemLocationName]    Script Date: 08/29/2011 19:29:20 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[LOCATION_GetItemLocationName]
	(
	@DataTypeName nvarchar(512),
	@DefaultValue nvarchar(32)
	)
AS
	BEGIN
		DECLARE @LocationName nvarchar(512)
		IF @DataTypeName = 'Scan Only' OR @DataTypeName = 'Scan and Check'
			BEGIN
				DECLARE @TypePrefix nvarchar(10) 
				DECLARE @TableName nvarchar(32)
				DECLARE @SQL nvarchar(max)
				SET @TypePrefix = SUBSTRING(@DefaultValue, 1, 2)
				
				--IF(@TypePrefix = 'GO')
				--	SET @TableName = 'OBJECT_General'
				--ELSE IF(@TypePrefix = 'MD')
				--	SET @TableName = 'OBJECT_MetalDetector'
				SET @SQL = 'SELECT L2.Description 
							FROM ' + @TableName + ' OG
							INNER JOIN LOCATION_ObjectNew L1 ON OG.ObjectID = L1.ObjectID
							INNER JOIN LOCATION_ObjectNew L2 ON L1.LocationID = L2.ObjectID
							WHERE Barcode = '''+ @DefaultValue + '''';
				PRINT @SQL;				
				EXEC(@SQL);
			END
		--ELSE
		--	SET @LocationName = '';
		--RETURN @LocationName;
	END

--EXEC LOCATION_GetItemLocationName 'Audit Location Only','MD000017'

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[REPORTS_usp_sel_Reports]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[REPORTS_usp_sel_Reports]
GO

/****** Object:  StoredProcedure [dbo].[REPORTS_usp_sel_Reports]    Script Date: 08/29/2011 19:29:20 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				MR
	Date:				08/02/2011

	Description:		Select records from REPORT_SavedReports

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[REPORTS_usp_sel_Reports]
---------Parameters----------
@ReportID int = 0,
@SQL_WHERE nvarchar(4000) = NULL

AS

DECLARE @SQL_STRING nvarchar (4000)

SET NOCOUNT ON
SET DATEFORMAT dmy

	IF @ReportID > 0 
		/**************************
			RETURN SPECIFIC RECORDS
		**************************/
		BEGIN
			SELECT		ReportID, ReportName, ProcedureID, StepDetailID, UserName, DateRange, DateFrom, DateTo, ItemID, LocationID, ItemType, StatusSelection, ReportType, CreatedBy ,ProcedureIDList, GP1

			FROM		REPORT_SavedReports								WITH (READUNCOMMITTED)

			WHERE		ReportID = @ReportID
			
			RETURN
		END

	IF ISNULL(@SQL_WHERE,'') <> '' 
		/*********************************************
			SELECT RECORDS ACCORDING TO WHERE CRITERIA
		*********************************************/
		BEGIN
			SET @SQL_STRING = 'SELECT ReportID, ReportName, ProcedureID, StepDetailID, UserName, DateRange, DateFrom, DateTo, ItemID, LocationID, ItemType, StatusSelection, ReportType, CreatedBy, GP1 '
			SET @SQL_STRING = @SQL_STRING + 'FROM REPORT_SavedReports '

			SET @SQL_STRING = @SQL_STRING + @SQL_WHERE
			SET @SQL_STRING = @SQL_STRING + ' ORDER BY ReportName'
			EXEC(@SQL_STRING)

			RETURN
		END

	/*********************
		RETURN ALL RECORDS
	*********************/
	BEGIN
		SELECT		ReportID, ReportName, ProcedureID, StepDetailID, UserName, DateRange, DateFrom, DateTo, ItemID, LocationID, ItemType, StatusSelection, ReportType, CreatedBy, GP1  

		FROM		REPORT_SavedReports								WITH (READUNCOMMITTED)

		ORDER BY 	ReportName ASC

		RETURN
	END


GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[REPORTS_usp_ins_Reports]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[REPORTS_usp_ins_Reports]
GO

/****** Object:  StoredProcedure [dbo].[REPORTS_usp_ins_Reports]    Script Date: 08/29/2011 19:29:20 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				MR
	Date:				08/03/2011

	Description:		Insert record in REPORT_SavedReports

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[REPORTS_usp_ins_Reports]
---------Parameters----------
@ProcedureID int,
@StepDetailID int,
@ReportName varchar(100),
@UserName nvarchar(50),
@DateRange nvarchar(50),
@DateFrom datetime,
@DateTo datetime,
@ItemID int,
@LocationID int,
@ItemType nvarchar(50) = NULL,
@Status nvarchar(50),
@ReportType int,
@CreatedBy nvarchar(50),
@CheckDuplicates bit,
@RecordID int OUTPUT,
@ProcedureIDList nvarchar(max) = null,
@GP1 INT = NULL,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RecordID = 0
	SET @Success = 0

	IF @CheckDuplicates = 1
		BEGIN
			/***************************
			DON'T ALLOW DUPLICATE RECORD
			***************************/
			IF EXISTS	(
						SELECT 		ReportID
						FROM		REPORT_SavedReports						WITH (READUNCOMMITTED)
						WHERE 		ReportName = @ReportName AND CreatedBy = @CreatedBy AND ReportType = @ReportType
						)
			BEGIN
				SET @ErrorMsg = '##01Duplicate Report Name ' + @ReportName
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END
		END

	/************
	INSERT RECORD
	************/
	INSERT INTO	REPORT_SavedReports												WITH (ROWLOCK)
			(
			ProcedureID, StepDetailID, ReportName, UserName, DateRange, DateFrom, DateTo, ItemID, LocationID, ItemType, StatusSelection, ReportType, CreatedBy,ProcedureIDList, GP1
			)
	VALUES
			(
			@ProcedureID, @StepDetailID, @ReportName, @UserName, @DateRange, @DateFrom, @DateTo, @ItemID, @LocationID, @ItemType, @Status, @ReportType, @CreatedBy,@ProcedureIDList, @GP1
			)

		SET @RecordID = SCOPE_IDENTITY()
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'REPORTS_usp_ins_Reports',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1


GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[REPORTS_usp_upd_Reports]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[REPORTS_usp_upd_Reports]
GO

/****** Object:  StoredProcedure [dbo].[REPORTS_usp_upd_Reports]    Script Date: 08/29/2011 19:29:20 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				MR
	Date:				08/03/2011

	Description:		Update record in REPORT_SavedReports

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[REPORTS_usp_upd_Reports]
---------Parameters----------
@ReportID int,
@ProcedureID int,
@StepDetailID int,
@ReportName varchar(100),
@UserName nvarchar(50),
@DateRange nvarchar(50),
@DateFrom datetime,
@DateTo datetime,
@ItemID int,
@LocationID int,
@ItemType nvarchar(50) = NULL,
@Status nvarchar(50),
@CreatedBy nvarchar(50),
@ProcedureIDList nvarchar(max)=null,
@GP1 INT = NULL,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF @ReportID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		ReportID
							FROM		REPORT_SavedReports				WITH (READUNCOMMITTED)
							WHERE 		ReportID = @ReportID
							)
			BEGIN
				SET @ErrorMsg = '##01Table REPORT_SavedReports - Could not find record ' + CAST(@ReportID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			/************
			UPDATE RECORD
			************/
			UPDATE	REPORT_SavedReports												WITH (ROWLOCK)

			SET 	ProcedureID = @ProcedureID,
					StepDetailID = @StepDetailID,
					ReportName = @ReportName, 
					UserName = @UserName,
					DateRange = @DateRange, 
					DateFrom = @DateFrom, 
					DateTo = @DateTo, 
					ItemID = @ItemID, 
					LocationID = @LocationID, 
					ItemType = @ItemType,
					StatusSelection = @Status,
					CreatedBy = @CreatedBy,
					ProcedureIDList = @ProcedureIDList,
					GP1 = @GP1

			WHERE	ReportID = @ReportID

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@ReportID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
			RETURN -1
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'REPORTS_usp_upd_Reports',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1


GO

--/****** Object:  UserDefinedFunction [dbo].[fnGetSupplierNameOfJob]    Script Date: 07/31/2012 19:59:08 ******/
--IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fnGetSupplierNameOfJob]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
--DROP FUNCTION [dbo].[fnGetSupplierNameOfJob]
--GO			
					

--/****** Object:  UserDefinedFunction [dbo].[fnGetSupplierNameOfJob]    Script Date: 07/31/2012 19:59:08 ******/
--SET ANSI_NULLS ON
--GO

--SET QUOTED_IDENTIFIER ON
--GO

--/****** Object:  UserDefinedFunction [dbo].[fnGetSupplierNameOfJob]    Script Date: 3/18/2014 1:20:18 PM ******/
--SET ANSI_NULLS ON
--GO
--SET QUOTED_IDENTIFIER ON
--GO

--CREATE FUNCTION [dbo].[fnGetSupplierNameOfJob] ( @JobID INT, @StepID INT) 
--RETURNS NVARCHAR(MAX)
--AS
--BEGIN

--DECLARE @Result NVARCHAR(MAX)

--SET @Result = ''

--SELECT @Result =  CaptureValue FROM PROCEDURE_JobDetail jd

--WHERE jd.JobID = @JobID AND jd.StepDetailID = (SELECT StepDetailID FROM PROCEDURE_StepDetail WHERE StepID = @StepID AND DataTypeName = 'Suppliers')
----LEFT join PROCEDURE_StepDetail ps on jd.StepDetailID= ps.StepDetailID 

----WHERE ps.DataTypeName = 'Suppliers' AND jd.JobID = @JobID



--RETURN @Result

--END





--GO

/****** Object:  UserDefinedFunction [dbo].[fnGetSuppliersOfProduct]    Script Date: 07/31/2012 19:59:08 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fnGetPurchaseOrderStatus]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[fnGetPurchaseOrderStatus]
GO

/****** Object:  UserDefinedFunction [dbo].[fnGetSuppliersOfProduct]    Script Date: 07/31/2012 19:59:08 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnGetPurchaseOrderStatus] ( @PurchaseOrderID INT ) 
RETURNS NVARCHAR(MAX)
AS
BEGIN

DECLARE @Value Bit 
DECLARE @TotalReceive Decimal(18,2)
DECLARE @Result NVARCHAR(MAX)

SET @Value = 0
SET @Result = 'Outstanding'
--SET @Value =(SELECT CASE WHEN  SUM(p.Quantity) = SUM(p.ReceivedQuantity)  THEN 1 ELSE 0 END FROM STOCKCONTROL_PurchaseOrderDetail  p WHERE( p.POID = @PurchaseOrderID))
SELECT @TotalReceive = ISNULL(SUM(ReceivedQuantity),0) FROM STOCKCONTROL_PurchaseOrderDetail WHERE POID = @PurchaseOrderID

IF @TotalReceive <= 0
	RETURN @Result

SELECT @Value = (CASE WHEN SUM(DetailComplete) = COUNT(PODetailID) THEN 1 ELSE 0 END )
FROM(
	--SELECT p.PODetailID, CASE WHEN  ISNULL(p.Quantity,0) <= ISNULL(p.ReceivedQuantity,0)  THEN 1 ELSE 0 END AS DetailComplete 
	SELECT p.PODetailID, CASE WHEN p.IsComplete = 1  THEN 1 ELSE 0 END AS DetailComplete 
	FROM 
	STOCKCONTROL_PurchaseOrderDetail  p WHERE( p.POID = @PurchaseOrderID)
	) tbl

IF(@Value = 1 )
SET @Result ='Completed'

ELSE
SET @Result ='IN_PROGRESS'

RETURN @Result

END
GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fnGetSalesOrderPickingStatus]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[fnGetSalesOrderPickingStatus]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnGetSalesOrderPickingStatus] ( @SalesOrderID INT ) 
RETURNS INT
AS
BEGIN
 
DECLARE @Result INT
DECLARE @TotalQuantity Decimal(18,2) 
DECLARE @TotalReceived Decimal(18,2) 

SELECT  @TotalQuantity = ISNULL(SUM(od.Pack),0),  @TotalReceived = ISNULL(SUM(od.PickedQty),0)   FROM STOCKCONTROL_SalesOrderDetail  od WHERE od.OrderID = @SalesOrderID

SET @Result = 1

IF(@TotalQuantity = 0 )
	SET @Result = 1
ELSE IF @TotalReceived < @TotalQuantity 
	SET @Result = 2
ELSE IF @TotalQuantity = @TotalReceived	
	SET @Result = 3

RETURN @Result

END

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RANGER_usp_upd_Handset_Label]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RANGER_usp_upd_Handset_Label]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[RANGER_usp_upd_Handset_Label]

---------Parameters----------
@ID INT,
@Label NVARCHAR(256),
@Success BIT OUTPUT

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)
DECLARE @SQL NVARCHAR(MAX)
BEGIN TRY
	SET @ErrorMsg = ''
	SET @Success = 0
	

	UPDATE Ranger_Handset
	SET
	Label = @Label
	WHERE ID = @ID		
		
	
	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) <> '##'
		BEGIN	
			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[RANGER_usp_upd_Handset_Label]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1

GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Ranger_usp_upd_Handset_Data]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[Ranger_usp_upd_Handset_Data]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[Ranger_usp_upd_Handset_Data]

---------Parameters----------
@SerialNumber NVARCHAR(512),
--@Label NVARCHAR(256) = NULL,
@JobID INT = NULL,
@LastStepID INT = NULL,
@LastReceived DATETIME,
@LastUser NVARCHAR(16)

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @Success BIT
DECLARE @ErrorParamsData nvarchar (1024)
DECLARE @SQL NVARCHAR(MAX)
BEGIN TRY
	SET @ErrorMsg = ''
	SET @Success = 0
	
	IF EXISTS (SELECT SerialNumber FROM Ranger_Handset WHERE SerialNumber = @SerialNumber)
		BEGIN
			UPDATE Ranger_Handset
			SET
			JobID = @JobID,
			LastStepID = @LastStepID,
			LastReceived = @LastReceived,
			LastUser = @LastUser
			WHERE SerialNumber = @SerialNumber
			
		END
	ELSE
		BEGIN
			INSERT INTO Ranger_Handset(SerialNumber, JobID, LastStepID, LastReceived, LastUser)
			VALUES(@SerialNumber, @JobID, @LastStepID, @LastReceived, @LastUser)
		END
		
	
	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) <> '##'
		BEGIN	
			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[Ranger_usp_upd_Handset_Data]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RANGER_usp_upd_Handset_LastSent]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RANGER_usp_upd_Handset_LastSent]
GO

/*
	Author:				Titu
	Date:				19/11/2013 
	Description:		

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[RANGER_usp_upd_Handset_LastSent]
---------Parameters----------
@SerialNumber nvarchar(512),
@OffsetSeconds int

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 


SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	--SET @Success = 0
	
	
	IF EXISTS (SELECT SerialNumber FROM Ranger_Handset WHERE SerialNumber = @SerialNumber)
		BEGIN
			UPDATE Ranger_Handset 
			SET LastSent = DATEADD(second, @OffsetSeconds*-1, GETDATE()) 
			WHERE SerialNumber = @SerialNumber
			
		END
	ELSE
		BEGIN
			INSERT INTO Ranger_Handset(SerialNumber, LastSent)
			VALUES(@SerialNumber, DATEADD(second, @OffsetSeconds*-1, GETDATE()))
		END
		

	RETURN 1
		
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	--SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'RANGER_usp_upd_Handset_LastSent',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1


GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RANGER_usp_upd_Handset_LastDocSent]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RANGER_usp_upd_Handset_LastDocSent]
GO

/*
	Author:				Titu
	Date:				19/11/2013 
	Description:		

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[RANGER_usp_upd_Handset_LastDocSent]
---------Parameters----------
@SerialNumber nvarchar(512),
@OffsetSeconds int

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 


SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	--SET @Success = 0
	
	
	IF EXISTS (SELECT SerialNumber FROM Ranger_Handset WHERE SerialNumber = @SerialNumber)
		BEGIN
			UPDATE Ranger_Handset 
			SET LastDocSent = DATEADD(second, @OffsetSeconds*-1, GETDATE()) 
			WHERE SerialNumber = @SerialNumber
			
		END
	ELSE
		BEGIN
			INSERT INTO Ranger_Handset(SerialNumber, LastDocSent)
			VALUES(@SerialNumber, DATEADD(second, @OffsetSeconds*-1, GETDATE()))
		END
		

	RETURN 1
		
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	--SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'RANGER_usp_upd_Handset_LastDocSent',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1


GO

/****** Object:  StoredProcedure [dbo].[PDA_usp_ProcessData]    Script Date: 05/14/2012 18:24:24 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PDA_usp_ProcessData]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PDA_usp_ProcessData]
GO

/****** Object:  StoredProcedure [dbo].[PDA_usp_ProcessData]    Script Date: 05/14/2012 18:24:24 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[PDA_usp_ProcessData] AS

DECLARE @RecordID uniqueidentifier
DECLARE @TranID tinyint
DECLARE @TranUserName nvarchar (32)
DECLARE @TranDate datetime
DECLARE @DeviceIP nvarchar (12)
DECLARE @BigText nvarchar (2000)

DECLARE @ErrorOccurred bit 
DECLARE @ReturnRecordID int
DECLARE @Success bit

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)

DECLARE @ObjectID int
DECLARE @Temperature real
DECLARE @FridgeID nvarchar (8)
DECLARE @ReadingDate datetime
DECLARE @CorrectiveAction nvarchar (128)
DECLARE @Comments nvarchar (300)

DECLARE @FreezerID nvarchar (8) 
DECLARE @TemperatureMin real
DECLARE @ToleranceMin real
DECLARE @TemperatureMax real
DECLARE @ToleranceMax real
DECLARE @Return bit
DECLARE @ID int
DECLARE @DateTime datetime
DECLARE @StockCheckType INT

DECLARE @ScaleID nvarchar (8)
DECLARE @WeightOne real
DECLARE @WeightTwo real
DECLARE @WeightFive real
DECLARE @WeightTen real
DECLARE @WeightTwenty real
DECLARE @WeightFifty real
DECLARE @WeightHundred real
DECLARE @WeightTwoHundred real
DECLARE @WeightFiveHundred real
DECLARE @WeightThousand real

DECLARE @GeneralObjectID nvarchar (8)
DECLARE @GeneralObjectIntact bit

DECLARE @GlassPlasticID nvarchar (8)
DECLARE @GlassPlasticIntact bit

DECLARE @MetalDetectorID nvarchar (8)
DECLARE @MetalDetectorIntact bit

DECLARE @ExceptionID int 
DECLARE @ExceptionType int 
DECLARE @ExceptionMessage nvarchar (4000) 

DECLARE @StepID INT
DECLARE @StepDetailID INT
DECLARE @CaptureValue NVARCHAR(128)
DECLARE @UnsavedData NVARCHAR(128)			
DECLARE @ComboID INT
DECLARE @Description NVARCHAR(110)
DECLARE @JobID INT
DECLARE @ProcedureDate DATETIME
DECLARE @ProcedureDateString NVARCHAR(24)
DECLARE @ProcedureName NVARCHAR(64)
DECLARE @Barcode NVARCHAR(24)
DECLARE @SequencePosition INT
DECLARE @DataName NVARCHAR(4000)
DECLARE @Signature VARBINARY(MAX)
DECLARE @StepImage VARBINARY(MAX)
DECLARE @CASignature VARBINARY(MAX)
DECLARE @CAImage VARBINARY(MAX)
DECLARE @CAAudio VARBINARY(MAX)
--DECLARE @AudioComment VARBINARY(MAX)
DECLARE @CAAssignee NVARCHAR(16)
DECLARE @CAStatus NVARCHAR(24)
DECLARE @CAType NVARCHAR(20)
DECLARE @MinValue real
DECLARE @MaxValue real
DECLARE @TypeProcedure INT
DECLARE @TypeProcedureStr NVARCHAR(50)
DECLARE @GoodsInNo NVARCHAR(20)
DECLARE @TraceabilityCode NVARCHAR(20)
DECLARE @SupplierID INT

DECLARE @ProcedureStartDate DATETIME
DECLARE @ProcedureEndDate DATETIME
DECLARE @ReadingTime TIME(0)
DECLARE @ScheduleDownTime TIME(0)
DECLARE @UnScheduleDownTime TIME(0)
DECLARE @ProcedureAlertID INT
DECLARE @ForceStockCheckID INT

--DECLARE @RackID NVARCHAR(50)
DECLARE @RackLocationID INT
DECLARE @ProductID INT
DECLARE @QtyStock REAL
DECLARE @Qty REAL
DECLARE @StockDateTime DATETIME
DECLARE @DeviceID NVARCHAR(512)
DECLARE @SCMode INT
DECLARE @MoveFromLocationID INT
DECLARE @MoveToLocationID INT
DECLARE @IsPutAway BIT
DECLARE @PickingType INT
DECLARE @SalesOrderID INT
DECLARE @SalesOrderDetailID INT
DECLARE @PickingCompleted BIT
DECLARE	@PurchaseOrderID INT
DECLARE @PurchaseOrderDetailID INT
DECLARE @PurchaseOrderStatus NVARCHAR(50)
DECLARE @MessageAlertID INT
DECLARE @MessageAlertStatus BIT
DECLARE @IsPOComplete BIT
DECLARE @BornIn NVARCHAR(100)
DECLARE @RaisedIn NVARCHAR(100)
DECLARE @SlaughteredIn NVARCHAR(100)
DECLARE @SlaughtereHouseNo NVARCHAR(100)
DECLARE @CutIn NVARCHAR(100)
DECLARE @CutInPlantNo NVARCHAR(100)

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY	
	SET @Success = 0
	SET @ErrorMsg = ''

	CREATE TABLE #Tran	(
						ID int IDENTITY(1,1) NOT NULL,
						RecordID nvarchar(128) NOT NULL,
						TranID int NOT NULL,
						TranUserName nvarchar(16) NULL,
						TranDate datetime,
						DeviceIP nvarchar(16) NULL,
						BigText nvarchar(2000) NULL,
						Signature VARBINARY(MAX),
						CAImage VARBINARY(MAX) NULL,
						CAAudio VARBINARY(MAX) NULL,
						--AudioComment VARBINARY(MAX) NULL,
						StepImage VARBINARY(MAX) NULL,
						DeviceID NVARCHAR(512) NULL,
						Processed bit default 0
						)	
						
	INSERT INTO #Tran(RecordID, TranID, TranUserName, TranDate, DeviceIP, BigText, Signature, CAImage,CAAudio, DeviceID, Processed,StepImage)								
		SELECT		RecordID, TranID, TranUserName, TranDate, DeviceIP, BigText, Signature, CAImage,CAAudio, DeviceID, 0,StepImage
		FROM		PDA_Transactions_Mirror			
		WHERE 		Processed IS NULL
		AND			FailCount < 5
		ORDER BY TranDate ASC
		
--SELECT * FROM #Tran
	--RETURN
	IF NOT EXISTS (SELECT * FROM #Tran) 
		BEGIN
			DROP TABLE #Tran
			RETURN
		END

	WHILE EXISTS(SELECT Processed FROM #Tran WHERE Processed = 0)
		BEGIN
			SET @Success = 0
			SET @Return = 0			
			SET @ErrorOccurred = 0
			SET @ObjectID = 0
			SET @Signature = NULL
			SET @StepImage = NULL
			SET @CAImage = NULL
			SET @CAAudio = NULL
			--SET @AudioComment = NULL
			SET @CAAudio = NULL
			SET @ErrorMsg = NULL
			
			SET @ReturnRecordID = NULL
			
			SELECT	Top 1 @ID = ID,
					@RecordID = RecordID,
					@TranID = TranID,
					@TranUserName = TranUserName,
					@TranDate = TranDate,
					@Signature = Signature,
					@StepImage=StepImage,
					@CAImage = CAImage,
					@CAAudio = CAAudio,
					--@AudioComment = AudioComment,
					@DeviceIP = DeviceIP,
					@BigText = BigText,
					@DeviceID = DeviceID					
			FROM	#Tran
			WHERE	Processed = 0
			ORDER BY TranDate ASC
			
			--PROCEDURES
			IF @TranID = 0
				BEGIN
					BEGIN TRANSACTION
												
					SET @StepID = 0
					
					SELECT * INTO #ProcValue FROM fnSplit('|',@BigText)

					SELECT @StepID = FieldValue FROM #ProcValue WHERE FieldNo = 1
					SELECT @ProcedureDateString = FieldValue FROM #ProcValue WHERE FieldNo = 2
					SET @ProcedureStartDate = CONVERT(DATETIME,@ProcedureDateString,120) 
					SELECT @ProcedureDateString = FieldValue FROM #ProcValue WHERE FieldNo = 3
					SET @ProcedureEndDate = CONVERT(DATETIME,@ProcedureDateString,120) 
					SELECT @ProcedureDateString = FieldValue FROM #ProcValue WHERE FieldNo = 4
					SET @ReadingTime = CONVERT(TIME(0),@ProcedureDateString) 
					SELECT @ProcedureDateString = FieldValue FROM #ProcValue WHERE FieldNo = 5
					SET @ScheduleDownTime = CONVERT(TIME(0),@ProcedureDateString)
					SELECT @ProcedureDateString = FieldValue FROM #ProcValue WHERE FieldNo = 6
					SET @UnScheduleDownTime = CONVERT(TIME(0),@ProcedureDateString)
					SELECT @ProcedureAlertID = FieldValue FROM #ProcValue WHERE FieldNo = 7
					--SET @ProcedureAlertID = CONVERT(INT,@ProcedureDateString)

					DROP TABLE #ProcValue
										
					
					IF @StepID > 0
						BEGIN
							EXEC PROCEDURE_usp_ins_StepReading	@StepID = @StepID,
																@StartDateTime = @ProcedureStartDate,																
																@EndDateTime = @ProcedureEndDate,
																@TimeTaken = @ReadingTime,
																@ScheduleDownTime = @ScheduleDownTime,																
																@UnScheduleDownTime = @UnScheduleDownTime,
																@UserName = @TranUserName,												
																@RecordID = @ReturnRecordID OUTPUT,
																@Success = @Return OUTPUT							
							
							IF @ProcedureAlertID > 0	
							UPDATE Procedure_Alert SET ActionTaken = 1, ResolvedDateTime = @ProcedureEndDate	WHERE ID = @ProcedureAlertID																																																	
						END																					
					ELSE
						BEGIN
							/******************
							PROCEDURE NOT FOUND
							*******************/
							SET @Return = 0
							SET @ErrorMsg = 'Procedure with procedure id = ' + CAST(@StepID AS NVARCHAR(64)) + ' was not found'
							EXEC APP_usp_ins_SQL_Error_Log_Entry	@Source = 'PDA_usp_ProcessData', @Msg = @ErrorMsg, @ParamsData = @ErrorParamsData
						END	

																	
					IF @Return = 0
						SET @ErrorOccurred = 1
					ELSE
						SET @Success = 1
					
			END	
			--AUDIT FRIDGE
			IF @TranID = 1
				BEGIN
					BEGIN TRANSACTION

					SELECT * INTO #FridgeFieldValue FROM fnSplit('|',@BigText)
					
					SELECT @FridgeID = FieldValue FROM #FridgeFieldValue WHERE FieldNo = 1
					SELECT @Temperature = FieldValue FROM #FridgeFieldValue WHERE FieldNo = 2
					SELECT @CorrectiveAction = FieldValue FROM #FridgeFieldValue WHERE FieldNo = 3
					SELECT @Comments = FieldValue FROM #FridgeFieldValue WHERE FieldNo = 4

					DROP TABLE #FridgeFieldValue

					--SELECT	@ObjectID = ObjectID
					--FROM	OBJECT_Fridge
					--WHERE	FridgeID = @FridgeID

					IF ISNULL(@ObjectID,0) <> 0
						BEGIN								
							/******************
							OBJECT FOUND
							*******************/						
							SET @ExceptionID = 0
							
							SELECT  @ExceptionID = ExceptionID
							FROM	dbo.RANGER_Exception
							WHERE	Barcode = @FridgeID AND ExceptionType = 1 AND Resolved IS NULL
							
							IF ISNULL(@ExceptionID,0) <> 0
								BEGIN
									DELETE dbo.RANGER_Exception WHERE Barcode = @FridgeID AND ExceptionType = 1 AND Resolved IS NULL
								END

							IF ISNULL(@CorrectiveAction,'') <> ''
								BEGIN
									SET @DateTime = GETDATE()
									SET @ExceptionMessage = @CorrectiveAction + ' - ' + @Comments
									EXEC	RANGER_usp_ins_Exception	@ExceptionType = 0,
																		@ExceptionMessage = @ExceptionMessage,
																		@ExceptionCreateUser = @TranUserName,
																		@ExceptionPassUser = NULL,
																		@ExceptionDate = @TranDate,--@DateTime,
																		@ObjectID = @ObjectID,
																		@TypeID = 1,
																		@Barcode = @Barcode,
																		@RecordID = @ReturnRecordID OUTPUT,
																		@Success = @Return OUTPUT
								END

							EXEC FRIDGE_usp_ins_FridgeTemperature	@FridgeID = @FridgeID,
																	@Temperature = @Temperature,
																	@ReadingDate = @TranDate,
																	@CorrectiveAction = @CorrectiveAction,
																	@Comments = @Comments,
																	@UserName = @TranUserName,
																	@ExceptionID = @ReturnRecordID,
																	@ExceptionType = @ExceptionType,
																	@Success = @Return OUTPUT							
						END									
					ELSE
						BEGIN
							/******************
							OBJECT NOT FOUND
							*******************/
							SET @Return = 0
							SET @ErrorMsg = 'FRIDGE ' + @FridgeID + ' was not found'
							EXEC APP_usp_ins_SQL_Error_Log_Entry	@Source = 'PDA_usp_ProcessData', @Msg = @ErrorMsg, @ParamsData = @ErrorParamsData
						END	
														
					IF @Return = 0
						SET @ErrorOccurred = 1
					ELSE
						SET @Success = 1										
				END
			--AUDIT FREEZER
			ELSE IF @TranID = 2
				BEGIN
					BEGIN TRANSACTION

					SELECT * INTO #FreezerFieldValue FROM fnSplit('|',@BigText)
					
					SELECT @FreezerID = FieldValue FROM #FreezerFieldValue WHERE FieldNo = 1
					SELECT @Temperature = FieldValue FROM #FreezerFieldValue WHERE FieldNo = 2
					SELECT @CorrectiveAction = FieldValue FROM #FreezerFieldValue WHERE FieldNo = 3
					SELECT @Comments = FieldValue FROM #FreezerFieldValue WHERE FieldNo = 4

					DROP TABLE #FreezerFieldValue

					--SELECT	@ObjectID = ObjectID
					--FROM	OBJECT_Freezer
					--WHERE	FreezerID = @FreezerID

					IF ISNULL(@ObjectID,0) <> 0
						BEGIN
							/******************
							OBJECT FOUND
							*******************/
							SET @ExceptionID = 0
							
							SELECT  @ExceptionID = ExceptionID
							FROM	dbo.RANGER_Exception
							WHERE	Barcode = @FreezerID AND ExceptionType = 1 AND Resolved IS NULL
							
							IF ISNULL(@ExceptionID,0) <> 0
								BEGIN
									DELETE dbo.RANGER_Exception WHERE Barcode = @FreezerID AND ExceptionType = 1 AND Resolved IS NULL								
								END
							
							IF ISNULL(@CorrectiveAction,'') <> ''
								BEGIN
									SET @DateTime = GETDATE()
									SET @ExceptionMessage = @CorrectiveAction + ' - ' + @Comments
									EXEC	RANGER_usp_ins_Exception	@ExceptionType = 0,
																		@ExceptionMessage = @ExceptionMessage,
																		@ExceptionCreateUser = @TranUserName,
																		@ExceptionPassUser = NULL,
																		@ExceptionDate = @TranDate,--@DateTime,
																		@ObjectID = @ObjectID,
																		@TypeID = 2,
																		@Barcode = @Barcode,
																		@RecordID = @ReturnRecordID OUTPUT,
																		@Success = @Return OUTPUT
								END

							EXEC FREEZER_usp_ins_FreezerTemperature	@FreezerID = @FreezerID,
																	@Temperature = @Temperature,
																	@ReadingDate = @TranDate,
																	@CorrectiveAction = @CorrectiveAction,
																	@Comments = @Comments,
																	@UserName = @TranUserName,
																	@ExceptionID = @ExceptionID,
																	@ExceptionType = @ExceptionType,
																	@Success = @Return OUTPUT
						END															
					ELSE
						BEGIN
							/******************
							OBJECT NOT FOUND
							*******************/
							SET @Return = 0
							SET @ErrorMsg = 'FREEZER ' + @FreezerID + ' was not found'
							EXEC APP_usp_ins_SQL_Error_Log_Entry	@Source = 'PDA_usp_ProcessData', @Msg = @ErrorMsg, @ParamsData = @ErrorParamsData
						END	
															
					IF @Return = 0
						SET @ErrorOccurred = 1
					ELSE 
						SET @Success = 1
				END
			--AUDIT SCALE
			ELSE IF @TranID = 3
				BEGIN
					BEGIN TRANSACTION

					SELECT * INTO #ScaleFieldValue FROM fnSplit('|',@BigText)
					
					SELECT @ScaleID = FieldValue FROM #ScaleFieldValue WHERE FieldNo = 1
					SELECT @WeightOne = FieldValue FROM #ScaleFieldValue WHERE FieldNo = 2
					IF @WeightOne = 0
						SET @WeightOne = NULL

					SELECT @WeightTwo = FieldValue FROM #ScaleFieldValue WHERE FieldNo = 3
					IF @WeightTwo = 0
						SET @WeightTwo = NULL

					SELECT @WeightFive = FieldValue FROM #ScaleFieldValue WHERE FieldNo = 4
					IF @WeightFive = 0
						SET @WeightFive = NULL

					SELECT @WeightTen = FieldValue FROM #ScaleFieldValue WHERE FieldNo = 5
					IF @WeightTen = 0
						SET @WeightTen = NULL

					SELECT @WeightTwenty = FieldValue FROM #ScaleFieldValue WHERE FieldNo = 6
					IF @WeightTwenty = 0
						SET @WeightTwenty = NULL

					SELECT @WeightFifty = FieldValue FROM #ScaleFieldValue WHERE FieldNo = 7
					IF @WeightFifty = 0
						SET @WeightFifty = NULL

					SELECT @WeightHundred = FieldValue FROM #ScaleFieldValue WHERE FieldNo = 8 
					IF @WeightHundred = 0
						SET @WeightHundred = NULL

					SELECT @WeightTwoHundred = FieldValue FROM #ScaleFieldValue WHERE FieldNo = 9 
					IF @WeightTwoHundred = 0
						SET @WeightTwoHundred = NULL
						
					SELECT @WeightFiveHundred = FieldValue FROM #ScaleFieldValue WHERE FieldNo = 10
					IF @WeightFiveHundred = 0
						SET @WeightFiveHundred = NULL

					SELECT @WeightThousand = FieldValue FROM #ScaleFieldValue WHERE FieldNo = 11
					IF @WeightThousand = 0
						SET @WeightThousand = NULL

					SELECT @CorrectiveAction = FieldValue FROM #ScaleFieldValue WHERE FieldNo = 12
					SELECT @Comments = FieldValue FROM #ScaleFieldValue WHERE FieldNo = 13

					DROP TABLE #ScaleFieldValue
					
					--SELECT	@ObjectID = ObjectID
					--FROM	OBJECT_Scale
					--WHERE	ScaleID = @ScaleID

					IF ISNULL(@ObjectID,0) <> 0
						BEGIN
							/******************
							OBJECT FOUND
							*******************/
							SET @ExceptionID = 0
							
							SELECT  @ExceptionID = ExceptionID
							FROM	dbo.RANGER_Exception
							WHERE	Barcode = @ScaleID AND ExceptionType = 1 AND Resolved IS NULL
							
							IF ISNULL(@ExceptionID,0) <> 0
								BEGIN
									DELETE dbo.RANGER_Exception WHERE Barcode = @ScaleID AND ExceptionType = 1 AND Resolved IS NULL																
								END
							
							IF ISNULL(@CorrectiveAction,'') <> ''
								BEGIN
									SET @DateTime = GETDATE()
									SET @ExceptionMessage = @CorrectiveAction + ' - ' + @Comments
									EXEC	RANGER_usp_ins_Exception	@ExceptionType = 0,
																		@ExceptionMessage = @ExceptionMessage,
																		@ExceptionCreateUser = @TranUserName,
																		@ExceptionPassUser = NULL,
																		@ExceptionDate = @TranDate,--@DateTime,
																		@ObjectID = @ObjectID,
																		@TypeID = 3,
																		@Barcode = @Barcode,																
																		@RecordID = @ReturnRecordID OUTPUT,
																		@Success = @Return OUTPUT
								END

							EXEC	SCALE_usp_ins_ScaleWeight		@ScaleID = @ScaleID,
																	@WeightOne = @WeightOne,
																	@WeightTwo = @WeightTwo,
																	@WeightFive = @WeightFive,
																	@WeightTen = @WeightTen,
																	@WeightTwenty = @WeightTwenty,
																	@WeightFifty = @WeightFifty,
																	@WeightHundred = @WeightHundred,
																	@WeightTwoHundred = @WeightTwoHundred,
																	@WeightFiveHundred = @WeightFiveHundred,
																	@WeightThousand = @WeightThousand,
																	@ReadingDate = @TranDate,
																	@CorrectiveAction = @CorrectiveAction,
																	@Comments = @Comments,
																	@UserName = @TranUserName,
																	@ExceptionID = @ExceptionID,
																	@ExceptionType = @ExceptionType,
																	@Success = @Return OUTPUT	
						END															
					ELSE
						BEGIN
							/******************
							OBJECT NOT FOUND
							*******************/
							SET @Return = 0
							SET @ErrorMsg = 'SCALE ' + @ScaleID + ' was not found'
							EXEC APP_usp_ins_SQL_Error_Log_Entry	@Source = 'PDA_usp_ProcessData', @Msg = @ErrorMsg, @ParamsData = @ErrorParamsData
						END	
														
					IF @Return = 0
						SET @ErrorOccurred = 1
					ELSE 
						SET @Success = 1
				END			
			--AUDIT OBJECT
			IF @TranID = 4
				BEGIN
					BEGIN TRANSACTION

					SELECT * INTO #ObjectFieldValue FROM fnSplit('|',@BigText)
					
					SELECT @GeneralObjectID = FieldValue FROM #ObjectFieldValue WHERE FieldNo = 1
					SELECT @GeneralObjectIntact = FieldValue FROM #ObjectFieldValue WHERE FieldNo = 2
					SELECT @CorrectiveAction = FieldValue FROM #ObjectFieldValue WHERE FieldNo = 3
					SELECT @Comments = FieldValue FROM #ObjectFieldValue WHERE FieldNo = 4

					DROP TABLE #ObjectFieldValue

					--SELECT	@ObjectID = ObjectID
					--FROM	OBJECT_General
					--WHERE	GeneralObjectID = @GeneralObjectID

					IF ISNULL(@ObjectID,0) <> 0
						BEGIN
							/******************
							OBJECT FOUND
							*******************/
							SET @ExceptionID = 0
							
							SELECT  @ExceptionID = ExceptionID
							FROM	dbo.RANGER_Exception
							WHERE	Barcode = @GeneralObjectID AND ExceptionType = 1 AND Resolved IS NULL
							
							IF ISNULL(@ExceptionID,0) <> 0
								BEGIN
									DELETE dbo.RANGER_Exception WHERE Barcode = @GeneralObjectID AND ExceptionType = 1 AND Resolved IS NULL																
								END
							
							IF ISNULL(@CorrectiveAction,'') <> ''
								BEGIN
									SET @DateTime = GETDATE()
									SET @ExceptionMessage = @CorrectiveAction + ' - ' + @Comments
									EXEC	RANGER_usp_ins_Exception	@ExceptionType = 0,
																		@ExceptionMessage = @ExceptionMessage,
																		@ExceptionCreateUser = @TranUserName,
																		@ExceptionPassUser = NULL,
																		@ExceptionDate = @TranDate,--@DateTime,
																		@ObjectID = @ObjectID,
																		@TypeID = 4,
																		@Barcode = @Barcode,																		
																		@RecordID = @ReturnRecordID OUTPUT,
																		@Success = @Return OUTPUT
								END

							EXEC	GENERALOBJECT_usp_ins_General_Detail 	@GeneralObjectID = @GeneralObjectID,
																			@Intact = @GeneralObjectIntact,
																			@ReadingDate = @TranDate,
																			@CorrectiveAction = @CorrectiveAction,
																			@Comments = @Comments,
																			@UserName = @TranUserName,
																			@ExceptionID = @ReturnRecordID,
																			@ExceptionType = @ExceptionType,
																			@Success = @Return OUTPUT							
						END									
					ELSE
						BEGIN
							/******************
							OBJECT NOT FOUND
							*******************/
							SET @Return = 0
							SET @ErrorMsg = 'General Object ' + @GeneralObjectID + ' was not found'
							EXEC APP_usp_ins_SQL_Error_Log_Entry	@Source = 'PDA_usp_ProcessData', @Msg = @ErrorMsg, @ParamsData = @ErrorParamsData
						END	
														
					IF @Return = 0
						SET @ErrorOccurred = 1
					ELSE
						SET @Success = 1						
				END
			--AUDIT GLASS PLASTIC
			IF @TranID = 5
				BEGIN
					BEGIN TRANSACTION

					SELECT * INTO #GlassPlasticFieldValue FROM fnSplit('|',@BigText)
					
					SELECT @GlassPlasticID = FieldValue FROM #GlassPlasticFieldValue WHERE FieldNo = 1
					SELECT @GlassPlasticIntact = FieldValue FROM #GlassPlasticFieldValue WHERE FieldNo = 2
					SELECT @CorrectiveAction = FieldValue FROM #GlassPlasticFieldValue WHERE FieldNo = 3
					SELECT @Comments = FieldValue FROM #GlassPlasticFieldValue WHERE FieldNo = 4

					DROP TABLE #GlassPlasticFieldValue

					--SELECT	@ObjectID = ObjectID
					--FROM	OBJECT_GlassPlastic
					--WHERE	GlassPlasticID = @GlassPlasticID
					
					IF ISNULL(@ObjectID,0) <> 0
						BEGIN
							/******************
							OBJECT FOUND
							*******************/							
							SET @ExceptionID = 0
							
							SELECT  @ExceptionID = ExceptionID
							FROM	dbo.RANGER_Exception
							WHERE	Barcode = @GlassPlasticID AND ExceptionType = 1 AND Resolved IS NULL
							
							IF ISNULL(@ExceptionID,0) <> 0
								BEGIN
									DELETE dbo.RANGER_Exception WHERE Barcode = @GlassPlasticID AND ExceptionType = 1 AND Resolved IS NULL																
								END							
							IF ISNULL(@CorrectiveAction,'') <> ''
								BEGIN
									SET @DateTime = GETDATE()
									SET @ExceptionMessage = @CorrectiveAction + ' - ' + @Comments
									EXEC	RANGER_usp_ins_Exception	@ExceptionType = 0,
																		@ExceptionMessage = @ExceptionMessage,
																		@ExceptionCreateUser = @TranUserName,
																		@ExceptionPassUser = NULL,
																		@ExceptionDate = @TranDate,--@DateTime,
																		@ObjectID = @ObjectID,
																		@TypeID = 5,
																		@Barcode = @Barcode,																	
																		@RecordID = @ReturnRecordID OUTPUT,
																		@Success = @Return OUTPUT
								END

							EXEC	GLASSPLASTIC_usp_ins_GlassPlastic_Detail 	@GlassPlasticID = @GlassPlasticID,
																				@Intact = @GlassPlasticIntact,
																				@ReadingDate = @TranDate,
																				@CorrectiveAction = @CorrectiveAction,
																				@Comments = @Comments,
																				@UserName = @TranUserName,
																				@ExceptionID = @ReturnRecordID,
																				@ExceptionType = @ExceptionType,
																				@Success = @Return OUTPUT							
						END									
					ELSE
						BEGIN
							/******************
							OBJECT NOT FOUND
							*******************/
							SET @Return = 0
							SET @ErrorMsg = 'Glass Plastic ' + @GlassPlasticID + ' was not found'
							EXEC APP_usp_ins_SQL_Error_Log_Entry	@Source = 'PDA_usp_ProcessData', @Msg = @ErrorMsg, @ParamsData = @ErrorParamsData
						END	
														
					IF @Return = 0
						SET @ErrorOccurred = 1
					ELSE
						SET @Success = 1						
				END
			--PROCEDURE STEPS
			IF @TranID = 6
				BEGIN
					BEGIN TRANSACTION
					DECLARE @CurrentDate DateTime							
					SET @Comments = NULL
					SET @CorrectiveAction = NULL
					SET @ComboID = NULL
					SET @CaptureValue = NULL
					SET @CASignature = NULL
					SET @CAAssignee = NULL
					SET @CAStatus = NULL
					SET @CAType = NULL
					SET @TypeProcedure = NULL
					SET @TypeProcedureStr = NULL
					SET @GoodsInNo = NULL
					SET @ExceptionType = 0
					
					SELECT * INTO #ProcFieldValue FROM fnSplit('|',@BigText)

					SELECT @ProcedureDateString = FieldValue FROM #ProcFieldValue WHERE FieldNo = 1
					SELECT @StepDetailID = FieldValue FROM #ProcFieldValue WHERE FieldNo = 2
					SELECT @CaptureValue = FieldValue FROM #ProcFieldValue WHERE FieldNo = 3
					SELECT @TypeProcedureStr = FieldValue FROM #ProcFieldValue WHERE FieldNo = 4
					IF CHARINDEX('-',@TypeProcedureStr) > 0
					BEGIN
						SELECT @TypeProcedure = FieldValue FROM fnSplit('-',@TypeProcedureStr) WHERE FieldNo = 1
						SELECT @GoodsInNo = FieldValue FROM fnSplit('-',@TypeProcedureStr) WHERE FieldNo = 2
					END
					ELSE
					BEGIN
						SELECT @TypeProcedure = FieldValue FROM #ProcFieldValue WHERE FieldNo = 4
					END
					SELECT @UnsavedData = FieldValue FROM #ProcFieldValue WHERE FieldNo = 5
					SELECT @ComboID = FieldValue FROM #ProcFieldValue WHERE FieldNo = 6
					SELECT @CorrectiveAction = FieldValue FROM #ProcFieldValue WHERE FieldNo = 7
					SELECT @Comments = FieldValue FROM #ProcFieldValue WHERE FieldNo = 8
					SELECT @CAStatus = FieldValue FROM #ProcFieldValue WHERE FieldNo = 9
					--SELECT @CAAssignee = FieldValue FROM #ProcFieldValue WHERE FieldNo = 9
					SELECT @CAAssignee = Case FieldValue When '' THEN NULL ELSE FieldValue END FROM #ProcFieldValue WHERE FieldNo = 10
					SELECT @CAType = FieldValue FROM #ProcFieldValue WHERE FieldNo = 11	
					SELECT @ExceptionType = FieldValue FROM #ProcFieldValue WHERE FieldNo = 12	
					
									

					DROP TABLE #ProcFieldValue
					IF LEN(@ProcedureDateString) = 2
						BEGIN
							SET @Return = 0
							SET @ErrorMsg = 'Error on datetime conversion for stepdetailid' + CAST(@StepDetailID AS NVARCHAR(64))
							--EXEC APP_usp_ins_SQL_Error_Log_Entry	@Source = 'PDA_usp_ProcessData', @Msg = @ErrorMsg, @ParamsData = @ErrorParamsData
						END
					ELSE IF NOT EXISTS(SELECT StepID FROM	PROCEDURE_StepDetail WHERE	StepDetailID = @StepDetailID)
						BEGIN
							SET @Return = 0
							SET @ErrorMsg = 'Step row might have deleted from PC - StepDetailID ' + CAST(@StepDetailID AS NVARCHAR(64)) 
							--EXEC APP_usp_ins_SQL_Error_Log_Entry	@Source = 'PDA_usp_ProcessData', @Msg = @ErrorMsg, @ParamsData = 'N/A'
						END
					ELSE
						BEGIN
							SET @ProcedureDate = CONVERT(DATETIME,@ProcedureDateString,120) 

							SELECT	@JobID = JobID,
									@DateTime = CompleteDate
							FROM	PROCEDURE_Job
							WHERE	CompleteDate = @ProcedureDate AND DeviceID = @DeviceID

							SELECT	@StepID = StepID
							FROM	PROCEDURE_StepDetail
							WHERE	StepDetailID = @StepDetailID

							DECLARE @VerifyStatus BIT

							--SET @VerifyStatus = dbo.fnGetProcudureVerificationStatus(@StepID)
							SELECT	@Description = CASE WHEN DataTypeName = 'Message' Then GP10 ELSE [Description] END,
									@DataName = DataTypeName,
									@MinValue = MinValue,
									@MaxValue = MaxValue,
									@SequencePosition = SequencePosition
							FROM	PROCEDURE_StepDetail
							WHERE	StepDetailID = @StepDetailID
							
							IF ISNULL(@DateTime,'') = '' 
								BEGIN													
									SELECT	@ProcedureName = Name, @VerifyStatus = NeedToVerify
									FROM	PROCEDURE_Step
									WHERE	StepID = @StepID
									
									EXEC	PROCEDURE_usp_ins_Job	@Name = @ProcedureName,
																	@CompleteDate = @ProcedureDate,
																	@ProcedureType = @TypeProcedure,
																	@DeviceID = @DeviceID,	
																	@StepID = @StepID,
																	@GoodInNo = @GoodsInNo,	
																	@UserName = @TranUserName,
																	@Verified = 0,
																	@VerifiyNeeded = @VerifyStatus,					
																	@RecordID = @ReturnRecordID OUTPUT,
																	@Success = @Return OUTPUT															

									SET @JobID = @ReturnRecordID	
									SET @CurrentDate = GETDATE()
									
									
									EXEC [Ranger_usp_upd_Handset_Data]	@SerialNumber = @DeviceID,
																				@JobID = @JobID,
																				@LastStepID = @StepID,
																				@LastReceived = @CurrentDate,
																				@LastUser = @TranUserName															
								END	
							ELSE
								BEGIN
									IF @ProcedureDate <> @DateTime	
										BEGIN																

											SELECT	@ProcedureName = Name
											FROM	PROCEDURE_Step
											WHERE	StepID = @StepID								
											EXEC	PROCEDURE_usp_ins_Job	@Name = @ProcedureName,
																			@CompleteDate = @ProcedureDate,
																			@ProcedureType = @TypeProcedure,
																			@DeviceID = @DeviceID,
																			@StepID = @StepID,	
																			@GoodInNo = @GoodsInNo,	
																			@UserName = @TranUserName,
																			@Verified = 0,
																			@VerifiyNeeded = @VerifyStatus,																					
																			@RecordID = @ReturnRecordID OUTPUT,
																			@Success = @Return OUTPUT															

											SET @JobID = @ReturnRecordID
											SET @CurrentDate = GETDATE()
											
											EXEC [Ranger_usp_upd_Handset_Data]	@SerialNumber = @DeviceID,
																				@JobID = @JobID,
																				@LastStepID = @StepID,
																				@LastReceived = @CurrentDate,
																				@LastUser = @TranUserName																		
										END
								END	

							IF (ISNULL(@CorrectiveAction,'') <> '' OR @ExceptionType = 2)
								BEGIN																					
									SET @Barcode = NULL
									
									SELECT	@DataName = DataTypeName,
											@Barcode = DefaultValue
									FROM	PROCEDURE_StepDetail
									WHERE	StepDetailID = @StepDetailID
																						
									IF @DataName <> 'Scan Only' OR @DataName <> 'Scan and Check'
										BEGIN
											SET @Barcode = NULL
										END					
									
									DECLARE @Temp AS NVARCHAR(MAX)
									SET @Temp = @ProcedureDateString + '|'+ CONVERT(NVARCHAR(6), @StepDetailID) + '|CASIG%'
									IF EXISTS(SELECT * FROM #Tran WHERE BigText LIKE @Temp)
										BEGIN
											SELECT @CASignature = Signature 
											FROM #Tran 
											WHERE BigText LIKE @Temp
											
										END	
									SET @DateTime = GETDATE()
									IF ISNULL(@CorrectiveAction , '') <> ''
										SET @ExceptionMessage = ISNULL(@CorrectiveAction + ' - ' , '') + @Comments
									ELSE
										SET @ExceptionMessage = @Comments
									EXEC	RANGER_usp_ins_Exception	@ExceptionType = @ExceptionType,
																		@ExceptionMessage = @ExceptionMessage,
																		@ExceptionCreateUser = @TranUserName,
																		@ExceptionPassUser = NULL,
																		@ExceptionDate = @TranDate,--@DateTime,
																		@ObjectID = NULL,
																		@ListDetailID = @ComboID,
																		@TypeID = NULL,																		
																		@DescIdentity = @StepDetailID,
																		@Barcode = @Barcode,
																		@Image = @CAImage,
																		@CAAudio = @CAAudio,
																		@Signature = @CASignature,
																		@AssignTo = @CAAssignee,
																		@Status = @CAStatus,
																		@CAType = @CAType,
																		@CaptureValue = @CaptureValue,
																		@StepSequencePosition = @SequencePosition,
																		@RecordID = @ReturnRecordID OUTPUT,
																		@Success = @Return OUTPUT
								END

							DELETE dbo.RANGER_Exception WHERE ExceptionType = 1 AND Barcode IS NULL AND ObjectID = @StepID
																																					
							IF ISNULL(@Description,'') <> ''
								BEGIN	
								
									IF SUBSTRING(@CaptureValue, 1, 4) = 'CADO'
									BEGIN									
									   EXEC PROCEDURE_usp_ins_JobDetail	@JobID =@JobID,
																				@StepDetailID = @StepDetailID,																
																				@Description = 'Audio Comments',
																				@CaptureValue = @CaptureValue,
																				@ReadingDate = @TranDate,																
																				@UserName = @TranUserName,
																				@Signature = @Signature,
																				@SequencePosition = 1025,																
																				@CorrectiveAction = @CorrectiveAction,
																				@Comments = NULL,
																				@StepImage = @StepImage,	
																				@UnsavedData = @UnsavedData,
																				@RecordID = @ReturnRecordID OUTPUT,
																				@Success = @Return OUTPUT	
																				
									
									END	
									ELSE IF SUBSTRING(@CaptureValue, 1, 4) = 'CIMG'
									BEGIN									
									   EXEC PROCEDURE_usp_ins_JobDetail	@JobID =@JobID,
																				@StepDetailID = @StepDetailID,																
																				@Description = 'Image Comments',
																				@CaptureValue = @CaptureValue,
																				@ReadingDate = @TranDate,																
																				@UserName = @TranUserName,
																				@Signature = @Signature,
																				@SequencePosition = 1026,																
																				@CorrectiveAction = @CorrectiveAction,
																				@Comments = NULL,
																				@StepImage = @StepImage,	
																				@UnsavedData = @UnsavedData,
																				@RecordID = @ReturnRecordID OUTPUT,
																				@Success = @Return OUTPUT	
																													
									END											
									ELSE IF SUBSTRING(@CaptureValue, 1, 4) <> 'CMN0' AND SUBSTRING(@CaptureValue, 1, 5) <> 'CASIG'
										BEGIN								
											IF @DataName = 'Products'
												BEGIN
													SET @SupplierID = NULL
													SELECT @ProductID = FieldValue FROM fnSplit('-',@CaptureValue) WHERE FieldNo = 1
													SELECT @TraceabilityCode = FieldValue FROM fnSplit('-',@CaptureValue) WHERE FieldNo = 2
													SELECT @SupplierID = FieldValue FROM fnSplit('-',@CaptureValue) WHERE FieldNo = 3
													SELECT @BornIn = FieldValue FROM fnSplit('-',@CaptureValue) WHERE FieldNo = 4
													SELECT @RaisedIn = FieldValue FROM fnSplit('-',@CaptureValue) WHERE FieldNo = 5
													SELECT @SlaughteredIn = FieldValue FROM fnSplit('-',@CaptureValue) WHERE FieldNo = 6
													SELECT @SlaughtereHouseNo = FieldValue FROM fnSplit('-',@CaptureValue) WHERE FieldNo = 7
													SELECT @CutIn = FieldValue FROM fnSplit('-',@CaptureValue) WHERE FieldNo = 8
													SELECT @CutInPlantNo = FieldValue FROM fnSplit('-',@CaptureValue) WHERE FieldNo = 9
													SELECT @CaptureValue = Description FROM STOCKCONTROL_Product WHERE ProductID = @ProductID
													

													IF(@SupplierID IS NOT NULL)
													BEGIN
														UPDATE PROCEDURE_Job SET SupplierName = (SELECT SupplierName FROM STOCKCONTROL_Supplier WHERE SupplierID = @SupplierID) WHERE JobID = @JobID
													END
												END
												
											EXEC PROCEDURE_usp_ins_JobDetail	@JobID = @JobID,
																				@StepDetailID = @StepDetailID,																
																				@Description = @Description,
																				@CaptureValue = @CaptureValue,
																				@MinValue = @MinValue,
																				@MaxValue = @MaxValue,
																				@ReadingDate = @TranDate,																
																				@UserName = @TranUserName,
																				@Signature = @Signature,
																				@SequencePosition = @SequencePosition,																
																				@CorrectiveAction = @CorrectiveAction,
																				@Comments = @Comments,	
																				@StepImage = @StepImage,
																				@UnsavedData = @UnsavedData,															
																				@RecordID = @ReturnRecordID OUTPUT,
																				@Success = @Return OUTPUT							
										
											IF @DataName = 'Products'
												BEGIN
												SET @DateTime = GETDATE()
													EXEC STOCKCONTROL_usp_ins_ProductCode	@ProductID = @ProductID,
																							@TraceabilityCode = @TraceabilityCode,
																							@JobDetailID = @ReturnRecordID,
																							@SupplierID = @SupplierID,
																							@RecordID = @ReturnRecordID OUTPUT,
																							@BornIn = @BornIn,
																							@RaisedIn = @RaisedIn,
																							@SlaughteredIn = @SlaughteredIn,
																							@SlaughtereHouseNo = @SlaughtereHouseNo ,
																							@CutIn = @CutIn,
																							@CutInPlantNo = @CutInPlantNo,

																							@Success = @Return OUTPUT																							
												END		
										END	
									ELSE IF SUBSTRING(@CaptureValue, 1, 4) <> 'CMN0'
										BEGIN
											SET @CaptureValue = SUBSTRING(@CaptureValue, 6, LEN(@CaptureValue))
																			
											EXEC PROCEDURE_usp_ins_JobDetail	@JobID = @JobID,
																				@StepDetailID = @StepDetailID,																
																				@Description = @Description,
																				@CaptureValue = @CaptureValue,
																				@ReadingDate = @TranDate,																
																				@UserName = @TranUserName,
																				@Signature = @Signature,
																				@SequencePosition = @SequencePosition,																
																				@CorrectiveAction = @CorrectiveAction,
																				@Comments = 'Manager Signature for above Corrective Action',
																				@StepImage = @StepImage,
																				@UnsavedData = @UnsavedData,																
																				@RecordID = @ReturnRecordID OUTPUT,
																				@Success = @Return OUTPUT							
										END	
									ELSE
										BEGIN								
											SET @CaptureValue = SUBSTRING(@CaptureValue, 5, LEN(@CaptureValue))	
											IF(CHARINDEX(':', @CaptureValue) = 11)
												BEGIN
													SET @Comments = SUBSTRING(@CaptureValue, 12, LEN(@CaptureValue))
													SET @CaptureValue = RTRIM(SUBSTRING(@CaptureValue, 1, 10))
												END
											ELSE IF(CHARINDEX(':', @CaptureValue) = 17)
												BEGIN
													SET @Comments = SUBSTRING(@CaptureValue, 18, LEN(@CaptureValue))
													SET @CaptureValue = RTRIM(SUBSTRING(@CaptureValue, 1, 16))
												END
											--ELSE
											--	BEGIN
											--		SET @Comments = @CaptureValue
											--		SET @CaptureValue = ''	
											--	END
											
											EXEC PROCEDURE_usp_ins_JobDetail	@JobID = @JobID,
																				@StepDetailID = @StepDetailID,																
																				@Description = 'Comments',
																				@CaptureValue = @CaptureValue,
																				@ReadingDate = @TranDate,																
																				@UserName = @TranUserName,
																				@Signature = @Signature,
																				@SequencePosition = 1024,																
																				@CorrectiveAction = @CorrectiveAction,
																				@Comments = @Comments,
																				@StepImage = @StepImage,	
																				@UnsavedData = @UnsavedData,															
																				@RecordID = @ReturnRecordID OUTPUT,
																				@Success = @Return OUTPUT							
										END																		
								END																					
							ELSE
								BEGIN
									/******************
									PROCEDURE NOT FOUND
									*******************/
									SET @Return = 0
									SET @ErrorMsg = 'Procedure StepID ' + CAST(@StepDetailID AS NVARCHAR(64)) + ' was not found'
									EXEC APP_usp_ins_SQL_Error_Log_Entry	@Source = 'PDA_usp_ProcessData', @Msg = @ErrorMsg, @ParamsData = @ErrorParamsData
								END	

							
																			
							IF @Return = 0
								SET @ErrorOccurred = 1
							ELSE
								SET @Success = 1
					END
				END
			--AUDIT METAL DETECTOR
			IF @TranID = 7
				BEGIN
					BEGIN TRANSACTION

					SELECT * INTO #MetalDetectorFieldValue FROM fnSplit('|',@BigText)
					
					SELECT @MetalDetectorID = FieldValue FROM #MetalDetectorFieldValue WHERE FieldNo = 1
					SELECT @MetalDetectorIntact = FieldValue FROM #MetalDetectorFieldValue WHERE FieldNo = 2
					SELECT @CorrectiveAction = FieldValue FROM #MetalDetectorFieldValue WHERE FieldNo = 3
					SELECT @Comments = FieldValue FROM #MetalDetectorFieldValue WHERE FieldNo = 4

					DROP TABLE #MetalDetectorFieldValue

					--SELECT	@ObjectID = ObjectID
					--FROM	OBJECT_MetalDetector
					--WHERE	MetalDetectorID = @MetalDetectorID

					IF ISNULL(@ObjectID,0) <> 0
						BEGIN
							/******************
							OBJECT FOUND
							*******************/
							IF ISNULL(@CorrectiveAction,'') <> ''
								BEGIN
									SET @DateTime = GETDATE()
									SET @ExceptionMessage = @CorrectiveAction + ' - ' + @Comments
									EXEC	RANGER_usp_ins_Exception	@ExceptionType = 0,
																		@ExceptionMessage = @ExceptionMessage,
																		@ExceptionCreateUser = @TranUserName,
																		@ExceptionPassUser = NULL,
																		@ExceptionDate = @TranDate,--@DateTime,
																		@ObjectID = @ObjectID,
																		@TypeID = 6,
																		@Barcode = @Barcode,																		
																		@RecordID = @ReturnRecordID OUTPUT,
																		@Success = @Return OUTPUT
								END

							EXEC	METALDETECTOR_usp_ins_MetalDetector_Detail 	@MetalDetectorID = @MetalDetectorID,
																				@Intact = @MetalDetectorIntact,
																				@ReadingDate = @TranDate,
																				@CorrectiveAction = @CorrectiveAction,
																				@Comments = @Comments,
																				@UserName = @TranUserName,
																				@ExceptionID = @ReturnRecordID,
																				@ExceptionType = @ExceptionType,
																				@Success = @Return OUTPUT							
						END									
					ELSE
						BEGIN
							/******************
							OBJECT NOT FOUND
							*******************/
							SET @Return = 0
							SET @ErrorMsg = 'Metal Detector ' + @MetalDetectorID + ' was not found'
							EXEC APP_usp_ins_SQL_Error_Log_Entry	@Source = 'PDA_usp_ProcessData', @Msg = @ErrorMsg, @ParamsData = @ErrorParamsData
						END	
														
					IF @Return = 0
						SET @ErrorOccurred = 1
					ELSE
						SET @Success = 1						
				END
			--STOCKCHECK
		   IF @TranID = 20
			BEGIN
			 BEGIN TRANSACTION
		     SET @StockCheckType = NULL
		     SET @ProcedureAlertID = NULL
			 SELECT * INTO #StockCheckValue FROM fnSplit('|',@BigText)

			 --SELECT @RackID = FieldValue FROM #StockCheckValue WHERE FieldNo = 1
			 SELECT @RackLocationID = CAST(FieldValue AS INT) FROM #StockCheckValue WHERE FieldNo = 1
			 SELECT @ProductID = FieldValue FROM #StockCheckValue WHERE FieldNo = 2     
			 SELECT @Qty = fieldValue FROM #StockCheckValue WHERE FieldNo = 3   
			 SELECT @StockDateTime = CONVERT(DATETIME,FieldValue,121) FROM #StockCheckValue WHERE FieldNo = 4
			 SELECT @SCMode = FieldValue FROM #StockCheckValue WHERE FieldNo = 5
			 SELECT @StockCheckType = CAST(FieldValue AS INT) FROM #StockCheckValue WHERE FieldNo = 6
			 SELECT @ProcedureAlertID = FieldValue FROM #StockCheckValue WHERE FieldNo = 7
			 SELECT @ForceStockCheckID = FieldValue FROM #StockCheckValue WHERE FieldNo = 8

			 DROP TABLE #StockCheckValue
			--rack2|pc1|137|2012-6-8 11:53:44  
			 SET @QtyStock = NULL
		     
			 --SELECT  @QtyStock = Qty
			 --FROM  dbo.STOCKCONTROL_RackProduct
			 ----WHERE  RackID = @RackID AND ProductID = @ProductID 
			 --WHERE  RackLocationID = @RackLocationID AND ProductID = @ProductID 
		     
		    IF NOT EXISTS(SELECT RackLocationID FROM	STOCKCONTROL_Rack WHERE	RackLocationID = @RackLocationID)
			BEGIN
					SET @Return = 0
					SET @ErrorMsg = 'Rack row might have deleted from PC - RackLocationID ' + CAST(@RackLocationID AS NVARCHAR(64)) 
			END
			ELSE
			BEGIN
				INSERT INTO dbo.STOCKCONTROL_StockCheck
					 ( RackLocationID ,
					   ProductID ,
					   ScanDateTime ,
					   Quantity ,
					   UserName,
					   CheckType,
					   ForceStockCheckID
					 )
			 VALUES  ( @RackLocationID ,
					   @ProductID ,
					   @StockDateTime ,
					   @Qty ,
					   @TranUserName ,
					   @StockCheckType,
					   @ForceStockCheckID
					 )
		     
			 --IF ISNULL(@QtyStock,0) = 0
			 -- BEGIN
			 --  INSERT INTO dbo.STOCKCONTROL_RackProduct
				--	   ( RackLocationID, ProductID, Qty )
			 --  VALUES  ( @RackLocationID,
				--		 @ProductID,
				--		 @Qty 
				--		 )
			 -- END
			 --ELSE
			 -- BEGIN
		      
			 --  UPDATE dbo.STOCKCONTROL_RackProduct
			 --  SET  Qty = @Qty + @QtyStock 
			 --  WHERE RackLocationID = @RackLocationID AND ProductID = @ProductID
		    
			 -- END
			 IF NOT EXISTS(SELECT ID FROM dbo.STOCKCONTROL_RackProduct WHERE RackLocationID = @RackLocationID AND ProductID = @ProductID) 
				 BEGIN
					INSERT INTO dbo.STOCKCONTROL_RackProduct
							( RackLocationID, ProductID, Qty, LastScanTime, HandsetUserName, UpdatedOn)
					VALUES  ( @RackLocationID, @ProductID, @Qty,@StockDateTime,@TranUserName, Getdate())
				 END
			 ELSE
				 BEGIN
					IF @SCMode = 1
							BEGIN
								UPDATE dbo.STOCKCONTROL_RackProduct
								SET  Qty = Qty + @Qty, UpdatedOn = Getdate()
								WHERE  RackLocationID = @RackLocationID AND ProductID = @ProductID
							END
						ELSE
							BEGIN
								UPDATE dbo.STOCKCONTROL_RackProduct
								SET  Qty = @Qty ,LastScanTime = @StockDateTime,HandsetUserName=@TranUserName,
								UpdatedOn = Getdate()
								WHERE  RackLocationID = @RackLocationID AND ProductID = @ProductID
							END
					 END
					 					
					EXEC STOCKCONTROL_usp_upd_ProductQuantityInStock @ProductID, 0
					
					 IF @ProcedureAlertID > 0	
							UPDATE Procedure_Alert SET ActionTaken = 1, ResolvedDateTime = @StockDateTime, UpdatedOn = Getdate()	WHERE ID = @ProcedureAlertID
				      
					 SET @Success = 1  
			END
		     			    
		   END	
		   --PUP AWAY/ Stock Transfer
		   IF @TranID = 21
		   BEGIN
			BEGIN TRANSACTION
			 SELECT * INTO #TblStockTransfer FROM fnSplit('|',@BigText)
			 SELECT @MoveFromLocationID = CAST(FieldValue AS INT) FROM #TblStockTransfer WHERE FieldNo = 1
			 SELECT @MoveToLocationID = CAST(FieldValue AS INT) FROM #TblStockTransfer WHERE FieldNo = 2
			 SELECT @ProductID =  CAST(FieldValue AS INT) FROM #TblStockTransfer WHERE FieldNo = 3     
			 SELECT @Qty = CAST(fieldValue AS REAL) FROM #TblStockTransfer WHERE FieldNo = 4   
			 SELECT @StockDateTime = CONVERT(DATETIME,FieldValue,121) FROM #TblStockTransfer WHERE FieldNo = 5
			 SELECT @IsPutAway = CAST(FieldValue AS BIT) FROM #TblStockTransfer WHERE FieldNo = 6
			 
			 DROP TABLE #TblStockTransfer
			 
			 IF @IsPutAway = 1
				BEGIN
					SELECT 	 @MoveFromLocationID = RackLocationID 
					FROM dbo.STOCKCONTROL_Rack
					WHERE [Description] = 'TO BE PUT AWAY' 	
				END
			 
			IF NOT EXISTS(SELECT RackLocationID FROM	STOCKCONTROL_Rack WHERE	RackLocationID = @MoveFromLocationID)
			BEGIN
				SET @Return = 0
				SET @ErrorMsg = 'Rack row might have deleted from PC - RackLocationID ' + CAST(@MoveFromLocationID AS NVARCHAR(64)) 
			END
			ELSE IF NOT EXISTS(SELECT RackLocationID FROM	STOCKCONTROL_Rack WHERE	RackLocationID = @MoveToLocationID)
			BEGIN
				SET @Return = 0
				SET @ErrorMsg = 'Rack row might have deleted from PC - RackLocationID ' + CAST(@MoveToLocationID AS NVARCHAR(64)) 
			END
			ELSE
			BEGIN
					 
				IF NOT EXISTS(SELECT ID FROM dbo.STOCKCONTROL_RackProduct WHERE RackLocationID = @MoveToLocationID AND ProductID = @ProductID) 
					 BEGIN
						INSERT INTO dbo.STOCKCONTROL_RackProduct
								( RackLocationID, ProductID, Qty, UpdatedOn )
						VALUES  ( @MoveToLocationID, @ProductID, @Qty, Getdate())
					 END
				 ELSE
					 BEGIN					
						UPDATE dbo.STOCKCONTROL_RackProduct
						SET  Qty = Qty + @Qty, UpdatedOn = Getdate()
						WHERE  RackLocationID = @MoveToLocationID AND ProductID = @ProductID						
					 END
					
				
				
				IF (@MoveFromLocationID IS NOT NULL) AND EXISTS(SELECT ID FROM dbo.STOCKCONTROL_RackProduct WHERE RackLocationID = @MoveFromLocationID AND ProductID = @ProductID)
				BEGIN
					UPDATE dbo.STOCKCONTROL_RackProduct
					SET  Qty = Qty - @Qty, UpdatedOn = Getdate()
					WHERE  RackLocationID = @MoveFromLocationID AND ProductID = @ProductID	
					
					INSERT INTO dbo.STOCKCONTROL_StockTransfer
						 ( 
						   ProductID,
						   MoveFromLocationID,
						   MoveToLocationID,
						   MovedQuantity,
						   IsPutAway,
						   TransferDateTime,
						   UserName
						 )
					VALUES( 
						   @ProductID,
						   @MoveFromLocationID,
						   @MoveToLocationID,
						   @Qty,	
						   @IsPutAway,				   
						   @StockDateTime ,
						   @TranUserName 
						 )
				END
				  
				 SET @Success = 1
			 END
		   END
		    --PICKING
		   IF @TranID = 22
			BEGIN
			 BEGIN TRANSACTION
		     --SET @PickID = NULL
		     SET @ProductID = NULL
		     SET @PickingType = NULL
		     SET @SalesOrderID = NULL
		     SET @PickingCompleted = NULL
		     
			 SELECT * INTO #PickingValue FROM fnSplit('|',@BigText)

			 --SELECT @RackID = FieldValue FROM #StockCheckValue WHERE FieldNo = 1
			 SELECT @RackLocationID = CAST(FieldValue AS INT) FROM #PickingValue WHERE FieldNo = 1
			 SELECT @ProductID = FieldValue FROM #PickingValue WHERE FieldNo = 2     
			 SELECT @Qty = fieldValue FROM #PickingValue WHERE FieldNo = 3   
			 SELECT @StockDateTime = CONVERT(DATETIME,FieldValue,121) FROM #PickingValue WHERE FieldNo = 4
			 SELECT @PickingType = FieldValue FROM #PickingValue WHERE FieldNo = 5
			 SELECT @SalesOrderID = FieldValue FROM #PickingValue WHERE FieldNo = 6
			 SELECT @SalesOrderDetailID = FieldValue FROM #PickingValue WHERE FieldNo = 7
			 SELECT @PickingCompleted = FieldValue FROM #PickingValue WHERE FieldNo = 8
			 

			 DROP TABLE #PickingValue		     
		     
			 INSERT INTO dbo.STOCKCONTROL_Picking
					 ( RackLocationID,
					   ProductID ,
					   ScanDateTime ,
					   Quantity ,
					   UserName,
					   PickingType,
					   SalesOrderID,
					   SalesOrderDetailID
					 )
			 VALUES  ( @RackLocationID,
					   @ProductID,
					   @StockDateTime,
					   @Qty,
					   @TranUserName,
					   @PickingType,
					   @SalesOrderID,
					   @SalesOrderDetailID
					 )
			
			
			 UPDATE STOCKCONTROL_SalesOrderDetail SET PickedQty = ISNULL(PickedQty,0) + @Qty WHERE OrderDetailID = @SalesOrderDetailID
			 
			 IF	@PickingCompleted = 1 AND @SalesOrderID > 0
			 BEGIN
				UPDATE STOCKCONTROL_SalesOrder SET PickingCompleted = 1 WHERE OrderID = @SalesOrderID
			 END
			 
			UPDATE STOCKCONTROL_SalesOrder SET PickingStatus = dbo.fnGetSalesOrderPickingStatus(@SalesOrderID) WHERE OrderID = @SalesOrderID 	 
		     
			 IF EXISTS(SELECT ID FROM dbo.STOCKCONTROL_RackProduct WHERE RackLocationID = @RackLocationID AND ProductID = @ProductID) 
				 BEGIN
					UPDATE dbo.STOCKCONTROL_RackProduct
					SET  Qty = Qty - @Qty
					WHERE  RackLocationID = @RackLocationID AND ProductID = @ProductID
				 END
				
			--UPDATE STOCKCONTROL_Product SET QtyInStock = (SELECT ISNULL(SUM(Qty),0) FROM dbo.STOCKCONTROL_RackProduct WHERE ProductID = @ProductID)	 
			--WHERE ProductID = @ProductID
			EXEC STOCKCONTROL_usp_upd_ProductQuantityInStock @ProductID, 0
		      
			 SET @Success = 1     
		   END
		   	
		   IF @TranID = 23
			BEGIN
			 BEGIN TRANSACTION
		     --SET @PickID = NULL
		     SET @RackLocationID = NULL
		     SET @ProductID = NULL
		     SET @PurchaseOrderID = NULL
		     SET @PurchaseOrderStatus = NULL
		     
			 SELECT * INTO #PurchaseValue FROM fnSplit('|',@BigText)

			 --SELECT @RackID = FieldValue FROM #StockCheckValue WHERE FieldNo = 1
			 SELECT @RackLocationID = CAST(FieldValue AS INT) FROM #PurchaseValue WHERE FieldNo = 1
			 SELECT @ProductID = CAST(FieldValue AS INT) FROM #PurchaseValue WHERE FieldNo = 2     
			 SELECT @Qty = fieldValue FROM #PurchaseValue WHERE FieldNo = 3   
			 --SELECT @StockDateTime = CONVERT(DATETIME,FieldValue,121) FROM #PurchaseValue WHERE FieldNo = 4
			 SELECT @PurchaseOrderID = CAST(FieldValue AS INT) FROM #PurchaseValue WHERE FieldNo = 4
			 SELECT @PurchaseOrderDetailID = CAST(FieldValue AS INT) FROM #PurchaseValue WHERE FieldNo = 5
			 SELECT @IsPOComplete = CAST(FieldValue AS BIT) FROM #PurchaseValue WHERE FieldNo = 6
			 
			 IF @IsPOComplete IS NULL
				SET @IsPOComplete = 0

			 DROP TABLE #PurchaseValue
			 
			 IF @PurchaseOrderDetailID = 0 AND @PurchaseOrderID > 0
				 BEGIN
					EXEC STOCKCONTROL_usp_ins_PurchaseOrderDetail	    @POID = @PurchaseOrderID,
																		@ProductID = @ProductID,
																		@Quantity = @Qty,
																		@CostPrice = 0.00,
																		@RecordID = @PurchaseOrderDetailID OUTPUT,
																		@Success = @Return OUTPUT 					
				 END
			 
			 UPDATE STOCKCONTROL_PurchaseOrderDetail SET ReceivedQuantity = ReceivedQuantity + ISNULL(@Qty,0), UpdatedOn = Getdate(), IsComplete = @IsPOComplete WHERE PODetailID = @PurchaseOrderDetailID
				
			 IF EXISTS (SELECT 	RackLocationID FROM STOCKCONTROL_Rack WHERE RackLocationID = @RackLocationID)
			 BEGIN
				IF EXISTS(SELECT ID FROM dbo.STOCKCONTROL_RackProduct WHERE RackLocationID = @RackLocationID AND ProductID = @ProductID) 
				 BEGIN
					UPDATE dbo.STOCKCONTROL_RackProduct
					SET  Qty = Qty + @Qty, UpdatedOn = Getdate()
					WHERE  RackLocationID = @RackLocationID AND ProductID = @ProductID
				 END
				ELSE
				INSERT INTO STOCKCONTROL_RackProduct(RackLocationID, ProductID, Qty, UpdatedOn)
				VALUES(@RackLocationID, @ProductID, @Qty, Getdate())
				
			    --IF NOT EXISTS(SELECT ID FROM dbo.STOCKCONTROL_PurchaseOrderCheck WHERE PODetailID = @PurchaseOrderDetailID AND RackLocationID = @RackLocationID AND IsReturn = 0 ) 
				 --BEGIN
					INSERT INTO STOCKCONTROL_PurchaseOrderCheck(PODetailID, RackLocationID,ProductID, Quantity ,IsReturn ,CreateDate , CreatedBy  )
					VALUES(@PurchaseOrderDetailID , @RackLocationID,@ProductID, @Qty , 0 ,GETDATE() ,@TranUserName)
				 --END
			  END	 
			 
				 
			set @PurchaseOrderStatus = dbo.fnGetPurchaseOrderStatus(@PurchaseOrderID)
			
			UPDATE  STOCKCONTROL_PurchaseOrder SET Status= @PurchaseOrderStatus, UpdatedOn = GETDATE()  WHERE POID = @PurchaseOrderID	
			
			IF(@PurchaseOrderStatus = 'Completed')
			   UPDATE  STOCKCONTROL_PurchaseOrder SET BookedIn= @TranDate, BookedBy = @TranUserName, UpdatedOn = GETDATE()  WHERE POID = @PurchaseOrderID

			--UPDATE STOCKCONTROL_Product SET QtyInStock = (SELECT ISNULL(SUM(Qty),0) FROM dbo.STOCKCONTROL_RackProduct WHERE ProductID = @ProductID)	 
			--WHERE ProductID = @ProductID
			EXEC STOCKCONTROL_usp_upd_ProductQuantityInStock @ProductID, 0
		      
			 SET @Success = 1     
		   END
		   
		   IF @TranID = 24 --MessageAlert
			BEGIN
			 BEGIN TRANSACTION
		     --SET @PickID = NULL
		     SET @MessageAlertID = NULL
		     SET @MessageAlertStatus = NULL
		     
			 SELECT * INTO #MessageAlertValue FROM fnSplit('|',@BigText)

			 --SELECT @RackID = FieldValue FROM #StockCheckValue WHERE FieldNo = 1
			 SELECT @MessageAlertID = CAST(FieldValue AS INT) FROM #MessageAlertValue WHERE FieldNo = 1
			 SELECT @MessageAlertStatus = CAST(FieldValue AS BIT) FROM #MessageAlertValue WHERE FieldNo = 2 
			 

			 DROP TABLE #MessageAlertValue		     
			
			 UPDATE PDA_MessageAlertDetail SET IsShown = @MessageAlertStatus ,Showndatetime= @TranDate  WHERE MessageDetailID = @MessageAlertID
			 
			 SET @Success = 1 
			 
			 END
		   
									
			IF @ErrorOccurred = 0
				BEGIN		
					IF @Success = 1 
						BEGIN
							UPDATE PDA_Transactions_Mirror SET Processed = GetDate() WHERE RecordID = @RecordID
							COMMIT TRANSACTION				
						END
					ELSE
						BEGIN
							ROLLBACK TRANSACTION							
							UPDATE PDA_Transactions_Mirror SET FailCount =  FailCount + 1 WHERE RecordID = @RecordID
							IF @ErrorMsg IS NOT NULL		
								EXEC APP_usp_ins_SQL_Error_Log_Entry	@Source = 'PDA_usp_ProcessData', @Msg = @ErrorMsg, @ParamsData = 'N/A'						
						END				
				END
			ELSE
				BEGIN
					ROLLBACK TRANSACTION		
					UPDATE PDA_Transactions_Mirror SET FailCount = FailCount + 1 WHERE RecordID = @RecordID	
					IF @ErrorMsg IS NOT NULL	
						EXEC APP_usp_ins_SQL_Error_Log_Entry	@Source = 'PDA_usp_ProcessData', @Msg = @ErrorMsg, @ParamsData = 'N/A'			
				END

				/*****************
					PROCESSED
				*****************/
				UPDATE	#Tran
				SET		Processed =	1						
				WHERE 	ID = @ID	
		END

	DROP TABLE #Tran
	
	RETURN 1
END TRY
BEGIN CATCH
	IF ISNULL(@ErrorMsg,'') = ''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0
	
	DROP TABLE #Tran

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PDA_usp_ProcessData',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_StepDetail_Active]    Script Date: 05/14/2012 19:19:23 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_upd_StepDetail_Active]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_upd_StepDetail_Active]
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_StepDetail_Active]    Script Date: 05/14/2012 19:18:43 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				MR
	Date:				9/05/2012 

	Description:		Update (active/inactive) record in PROCEDURE_StepDetail

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_upd_StepDetail_Active]
---------Parameters----------
@StepDetailID int,
@Active bit = NULL,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 


SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF @StepDetailID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		StepDetailID
							FROM		PROCEDURE_StepDetail				WITH (READUNCOMMITTED)
							WHERE 		StepDetailID = @StepDetailID
							)
			BEGIN
				SET @ErrorMsg = '##01Table PROCEDURE_StepDetail - Could not find record ' + CAST(@StepDetailID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END
			
			UPDATE	PROCEDURE_StepDetail												WITH (ROWLOCK)
			SET 	Active = @Active,
					UpdatedOn = GETDATE()
			WHERE	StepDetailID = @StepDetailID
			
			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@StepDetailID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_upd_StepDetail_Active',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1



GO

/****** Object:  StoredProcedure [dbo].[REPORT_usp_CorrectiveActions]    Script Date: 05/14/2012 19:19:23 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[REPORT_usp_CorrectiveActions]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[REPORT_usp_CorrectiveActions]
GO

/****** Object:  StoredProcedure [dbo].[REPORT_usp_CorrectiveActions]    Script Date: 05/14/2012 19:19:23 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[REPORT_usp_CorrectiveActions]

---------Parameters----------
@WhereCondition NVARCHAR(MAX) = NULL

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)
DECLARE @SQL NVARCHAR(MAX)
BEGIN TRY
	SET @ErrorMsg = ''
--	SET @Success = 0
	IF ISNULL(@WhereCondition,'') = ''
		SELECT DISTINCT
			ExceptionID, 
			ExceptionDate, 
			WorkRequestNo, 
			PROCEDURE_Step.Name AS [Procedure], 
			CASE WHEN Descidentity IS NULL THEN LOCATION_ObjectNew.DescriptionLongName  ELSE PROCEDURE_StepDetail.Description END AS Description,
			ExceptionMessage,
			ExceptionCreateUser, 
			ResolveBy, 
			AssignTo,
			dbo.[fnGetFullnameOfUserOrDept](AssignTo) AS FullName,
			ActionRequired, 
			ActionTaken, 
			Comments,
			RANGER_Exception.Status, 
			Image, 
			Signature, 
			FilePath,
			LOCATION_ObjectNew.DescriptionLongName AS Location 
		FROM RANGER_Exception
			LEFT JOIN PROCEDURE_StepDetail ON RANGER_Exception.Descidentity = PROCEDURE_StepDetail.StepDetailID
			LEFT JOIN PROCEDURE_Step ON PROCEDURE_Step.StepID = PROCEDURE_StepDetail.StepID
			LEFT JOIN LOCATION_ObjectNew ON RANGER_Exception.ObjectID = LOCATION_ObjectNew.ObjectID
		WHERE ExceptionType = 0
		ORDER BY RANGER_Exception.ExceptionID
	ELSE
		BEGIN
		SET @SQL = 'SELECT DISTINCT
			ExceptionID, 
			ExceptionDate, 
			WorkRequestNo, 
			PROCEDURE_Step.Name AS [Procedure], 
			CASE WHEN Descidentity IS NULL THEN LOCATION_ObjectNew.DescriptionLongName  ELSE PROCEDURE_StepDetail.Description END AS Description,
			ExceptionMessage,
			ExceptionCreateUser, 
			ResolveBy, 
			AssignTo,
			dbo.[fnGetFullnameOfUserOrDept](AssignTo) AS FullName,
			ActionRequired, 
			ActionTaken, 
			Comments,
			RANGER_Exception.Status, 
			Image, 
			Signature, 
			FilePath,
			LOCATION_ObjectNew.DescriptionLongName AS Location 
		FROM RANGER_Exception
			LEFT JOIN PROCEDURE_StepDetail ON RANGER_Exception.Descidentity = PROCEDURE_StepDetail.StepDetailID
			LEFT JOIN PROCEDURE_Step ON PROCEDURE_Step.StepID = PROCEDURE_StepDetail.StepID
			LEFT JOIN LOCATION_ObjectNew ON RANGER_Exception.ObjectID = LOCATION_ObjectNew.ObjectID
			
		WHERE ExceptionType = 0 AND ' + @WhereCondition +	'	
		ORDER BY RANGER_Exception.ExceptionID'
		END
	EXEC (@SQL)
--	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) <> '##'
		BEGIN	
			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[REPORT_usp_CorrectiveActions]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1

GO

-------------------------------------------------------------------------------------------------
------------------------------------------- GO TO STEP ------------------------------------------
-------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_StepDetail' AND column_name = 'GoToStep')
ALTER TABLE dbo.PROCEDURE_StepDetail ADD
	GoToStep NVARCHAR(64) NULL
GO


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_StepDetail' AND column_name = 'NoOfChecks')
BEGIN
	ALTER TABLE dbo.PROCEDURE_StepDetail ADD
		NoOfChecks int NULL
End	
GO


IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_PROCEDURE_StepDetail_NoOfChecks]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[PROCEDURE_StepDetail] ADD  CONSTRAINT [DF_PROCEDURE_StepDetail_NoOfChecks]  DEFAULT 1 FOR NoOfChecks
END
GO

--Update existing rows
UPDATE PROCEDURE_StepDetail
SET NoOfChecks = 1
WHERE NoOfChecks IS NULL

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_StepDetail' AND column_name = 'IsCAApplicable')
ALTER TABLE dbo.PROCEDURE_StepDetail ADD
	IsCAApplicable bit NULL
GO
UPDATE PROCEDURE_StepDetail SET IsCAApplicable = 1 WHERE IsCAApplicable IS NULL

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_StepDetail' AND column_name = 'MatchStepNo')
ALTER TABLE dbo.PROCEDURE_StepDetail ADD
	MatchStepNo INT NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_StepDetail' AND column_name = 'PromptForStepNo')
ALTER TABLE dbo.PROCEDURE_StepDetail ADD
	PromptForStepNo BIT NULL
GO

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_PROCEDURE_StepDetail_PromptForStepNo]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[PROCEDURE_StepDetail] ADD  CONSTRAINT [DF_PROCEDURE_StepDetail_PromptForStepNo]  DEFAULT ((1)) FOR [PromptForStepNo]
END
GO

--Update existing rows
UPDATE PROCEDURE_StepDetail
SET PromptForStepNo = 1
WHERE PromptForStepNo IS NULL

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_StepDetail]    Script Date: 05/18/2012 23:45:48 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_upd_StepDetail]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_upd_StepDetail]
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_ins_StepDetail]    Script Date: 05/18/2012 23:45:48 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_ins_StepDetail]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_ins_StepDetail]
GO


/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_StepDetail]    Script Date: 05/28/2012 13:28:14 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*
	Author:				TR
	Date:				29/06/2009 15:11

	Description:		Update record in PROCEDURE_StepDetail

	History		Name		Date		Mod		
	=============================================================================================================================================
	Add @NoOfChecks			Titu(Jr)	10/07/2012


	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_upd_StepDetail]
---------Parameters----------
@StepDetailID int,
@Description nvarchar(110),
@DataTypeName nvarchar(max),
@DataType nvarchar(64) = NULL,
@ListID int = NULL,
@MinValue real = NULL,
@MaxValue real = NULL,
@DefaultValue nvarchar(32) = NULL,
@Mandatory bit,
@CorrectActionListID int = null,
@Picture varbinary(MAX) = null,
@PictureName nvarchar(64) = NULL,
@GP1 nvarchar(32) = NULL,
@GP2 nvarchar(32) = NULL,
@GP3 nvarchar(32) = NULL,
@GP4 nvarchar(32) = NULL,
@GP5 nvarchar(32) = NULL,
@GP6 nvarchar(32) = NULL,
@GP7 nvarchar(32) = NULL,
@GP8 nvarchar(32) = NULL,
@GP9 nvarchar(32) = NULL,
@GP10 nvarchar(4000) = NULL,
@GP11 nvarchar(32) = NULL,
@PauseTime int = NULL,

@LoopStep INT,
@ClearBeforeComplete BIT,
@ReferenceDate DATETIME = NULL,
@StartFromDay INT = NULL,
@ContinueTillDay INT = NULL,
@NoOfChecks INT,
@IsCAApplicable BIT,
@MatchStepNo INT = NULL,
@GoToStep nvarchar(64) = NULL,
@PromptForStepNo BIT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF @StepDetailID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		StepDetailID
							FROM		PROCEDURE_StepDetail				WITH (READUNCOMMITTED)
							WHERE 		StepDetailID = @StepDetailID
							)
			BEGIN
				SET @ErrorMsg = '##01Table PROCEDURE_StepDetail - Could not find record ' + CAST(@StepDetailID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			/************
			UPDATE RECORD
			************/
			UPDATE	PROCEDURE_StepDetail												WITH (ROWLOCK)

			SET 	[Description] = @Description,
					DataTypeName = @DataTypeName,
					--DataType = @DataType,
					ListID = @ListID,
					MinValue = @MinValue,
					MaxValue = @MaxValue,
					DefaultValue = @DefaultValue,
					Mandatory = @Mandatory,
					CorrectActionListID = @CorrectActionListID,
					Picture = @Picture,
					PictureName = @PictureName,
					GP1 = @GP1,
					GP2 = @GP2,
					GP3 = @GP3,
					GP4 = @GP4,					
					GP5 = @GP5,
					GP6 = @GP6,
					GP7 = @GP7,
					GP8 = @GP8,
					GP9 = @GP9,
					GP10 = @GP10,
					GP11 = @GP11,
					PauseTime = @PauseTime,										

					LoopStep = @LoopStep,
					ClearBeforeComplete = @ClearBeforeComplete,
					ReferenceDate = @ReferenceDate,
					StartFromDay= @StartFromDay,
					ContinueTillDay= @ContinueTillDay,
					GoToStep = @GoToStep,
					PromptForStepNo = @PromptForStepNo,
					NoOfChecks = @NoOfChecks,
					IsCAApplicable = @IsCAApplicable,
					MatchStepNo = @MatchStepNo,
					UpdatedOn = GETDATE()
			WHERE	StepDetailID = @StepDetailID

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@StepDetailID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_upd_StepDetail',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1



GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_ins_StepDetail]    Script Date: 05/28/2012 13:28:14 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*
	Author:				TR
	Date:				29/06/2009 15:11

	Description:		Insert record in PROCEDURE_StepDetail

	History				Name		Date		Mod		  
	=============================================================================================================================================
	Adding Col			MSH			09/26/2011
	Add @NoOfChecks		Titu(jr)	10/07/2012

	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_ins_StepDetail]
---------Parameters----------
@StepID int,
@Description nvarchar(110),
@DataTypeName nvarchar(2048),
@DataType NVARCHAR(32) = NULL,
@ListID int = NULL,
@MinValue real = NULL,
@MaxValue real = NULL,
@DefaultValue nvarchar(32) = NULL,
@Mandatory bit,
@SequencePosition int,
@Active bit,
@CheckDuplicates bit,
@CorrectActionListID int = null,
@Picture varbinary(MAX) = null,
@PictureName nvarchar(64) = NULL,
@GP1 nvarchar(32) = NULL,
@GP2 nvarchar(32) = NULL,
@GP3 nvarchar(32) = NULL,
@GP4 nvarchar(32) = NULL,
@GP5 nvarchar(32) = NULL,
@GP6 nvarchar(32) = NULL,
@GP7 nvarchar(32) = NULL,
@GP8 nvarchar(32) = NULL,
@GP9 nvarchar(32) = NULL,
@GP10 nvarchar(4000) = NULL,
@GP11 nvarchar(32) = NULL,
@PauseTime int = NULL,

@LoopStep INT = NULL,
@ClearBeforeComplete BIT,
@ReferenceDate DATETIME = NULL,
@StartFromDay INT = NULL,
@ContinueTillDay INT = NULL,
@GoToStep nvarchar(64) = NULL,
@PromptForStepNo BIT,
@NoOfChecks INT,
@IsCAApplicable BIT,
@MatchStepNo INT = NULL,
@RecordID int OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RecordID = 0
	SET @Success = 0

	/************
	INSERT RECORD
	************/
	IF ISNULL(@DefaultValue,'') <> ''
		BEGIN
			IF @DataTypeName = 'Scan and Check'		
				BEGIN
					IF SUBSTRING(@DefaultValue,1,2) = 'FG'
						BEGIN
							SET @DataType = 'Temperature'
						END
					ELSE IF SUBSTRING(@DefaultValue,1,2) = 'FZ'
						BEGIN
							SET @DataType = 'Temperature'
						END
					ELSE IF SUBSTRING(@DefaultValue,1,2) = 'TM'
						BEGIN
							SET @DataType = 'Temperature'
						END	
					ELSE IF SUBSTRING(@DefaultValue,1,2) = 'SC'
						BEGIN
							SET @DataType = 'Scale'
						END
					ELSE IF SUBSTRING(@DefaultValue,1,2) = 'GO'
						BEGIN
							SET @DataType = 'General Object'
						END
					ELSE IF SUBSTRING(@DefaultValue,1,2) = 'GP'
						BEGIN
							SET @DataType = 'Glass Plastic Item'
						END
					ELSE IF SUBSTRING(@DefaultValue,1,2) = 'MD'
						BEGIN
							SET @DataType = 'Metal Detector'					
						END	
					ELSE IF SUBSTRING(@DefaultValue,1,2) = 'PB'														
						BEGIN
							SET @DataType = 'Probe'
						END
				
				END
		END
	
	INSERT INTO	PROCEDURE_StepDetail												WITH (ROWLOCK)
			(
			StepID, [Description], DataTypeName, ListID, CorrectActionListID, MinValue, MaxValue, DefaultValue, Mandatory, SequencePosition, Picture, PictureName, Active, GP1, GP2, GP3, GP4, GP5, GP6, GP7, GP8, GP9, GP10, GP11, LoopStep, DataType, ClearBeforeComplete, ReferenceDate , StartFromDay , ContinueTillDay, GoToStep, NoOfChecks, IsCAApplicable, MatchStepNo, PromptForStepNo , PauseTime,UpdatedOn 
			)
	VALUES
			(
			@StepID, @Description, @DataTypeName, @ListID, @CorrectActionListID, @MinValue, @MaxValue, @DefaultValue, @Mandatory, @SequencePosition, @Picture, @PictureName, @Active, @GP1, @GP2, @GP3, @GP4, @GP5, @GP6, @GP7, @GP8, @GP9, @GP10, @GP11, @LoopStep, @DataType, @ClearBeforeComplete, @ReferenceDate , @StartFromDay , @ContinueTillDay, @GoToStep, @NoOfChecks, @IsCAApplicable, @MatchStepNo, @PromptForStepNo , @PauseTime,GETDATE()
			)

	SET @RecordID = SCOPE_IDENTITY()
	SET @Success = 1
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_ins_StepDetail',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1



GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_sel_StepDetail]    Script Date: 05/04/2012 16:10:30 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_sel_StepDetail]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_sel_StepDetail]
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_sel_StepDetail]    Script Date: 05/04/2012 16:10:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
	Author:				TR
	Date:				29/06/2009 15:11

	Description:		Select records from PROCEDURE_StepDetail

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_sel_StepDetail]
---------Parameters----------
@StepID int = NULL,
@SQL_WHERE nvarchar(4000) = NULL

AS

DECLARE @SQL_STRING nvarchar (4000)

SET NOCOUNT ON
SET DATEFORMAT dmy

	IF ISNULL(@StepID,'') <> '' 
		/**************************
			RETURN SPECIFIC RECORDSCASE WHEN DataTypeName<>''Message'' THEN  Description ELSE GP10 END
		**************************/
		--added a logic on 10/06/2011
		
		BEGIN
			SELECT		StepDetailID, StepID, Description, DataTypeName, ListID, CorrectActionListID, MinValue, MaxValue, DefaultValue, Mandatory, SequencePosition, Picture, PictureName, Active, GP1, GP2, GP3, GP4, GP5, GP6, GP7, GP8, GP9, GP10, GP11, LoopStep, ClearBeforeComplete, ReferenceDate, StartFromDay, ContinueTillDay, GoToStep, NoOfChecks, ISNULL(IsCAApplicable,1) IsCAApplicable, MatchStepNo, PromptForStepNo ,PauseTime
			--SELECT		StepDetailID, StepID, CASE WHEN DataTypeName<>''Message'' THEN  Description ELSE GP10 END AS ''Description'', DataTypeName, ListID, CorrectActionListID, MinValue, MaxValue, DefaultValue, Mandatory, SequencePosition, Picture, PictureName, Active, GP1, GP2, GP3, GP4, GP5, GP6, GP7, GP8, GP9, GP10, GP11, LoopStep, ClearBeforeComplete, ReferenceDate, StartFromDay, ContinueTillDay

			FROM		PROCEDURE_StepDetail								WITH (READUNCOMMITTED)

			WHERE		StepID = @StepID

			ORDER BY 	StepID ASC
	
			
			
			
			RETURN
		END

	IF ISNULL(@SQL_WHERE,'') <> ''
		/*********************************************
			SELECT RECORDS ACCORDING TO WHERE CRITERIA
		*********************************************/
		--added a logic on 10/06/2011
		BEGIN
			SET @SQL_STRING = 'SELECT StepDetailID, StepID, Description, DataTypeName, ListID, CorrectActionListID, MinValue, MaxValue, DefaultValue, Mandatory, SequencePosition, Picture, PictureName, Active, GP1, GP2, GP3, GP4, GP5, GP6, GP7, GP8, GP9, GP10, GP11, LoopStep, ClearBeforeComplete, ReferenceDate, StartFromDay, ContinueTillDay, GoToStep, NoOfChecks, ISNULL(IsCAApplicable,1) IsCAApplicable, MatchStepNo, PromptForStepNo , PauseTime '
			SET @SQL_STRING = @SQL_STRING + 'FROM PROCEDURE_StepDetail '

			SET @SQL_STRING = @SQL_STRING + @SQL_WHERE

			EXEC(@SQL_STRING)

			RETURN
		END

	/*********************
		RETURN ALL RECORDS
	*********************/
	--added a logic on 10/06/2011
	BEGIN
		SELECT		StepDetailID, StepID, Description, DataTypeName, ListID, CorrectActionListID, MinValue, MaxValue, DefaultValue, Mandatory, SequencePosition, Picture, PictureName,  Active, GP1, GP2, GP3, GP4, GP5, GP6, GP7, GP8, GP9, GP10, GP11, LoopStep, ClearBeforeComplete, ReferenceDate, StartFromDay, ContinueTillDay, GoToStep, NoOfChecks, ISNULL(IsCAApplicable,1) IsCAApplicable, MatchStepNo, PromptForStepNo , PauseTime

		FROM		PROCEDURE_StepDetail								WITH (READUNCOMMITTED)

		ORDER BY 	StepID ASC

		RETURN
	END

GO




/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_sel_JobDetail]    Script Date: 05/02/2013 19:47:38 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_sel_JobDetail]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_sel_JobDetail]
GO


/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_sel_JobDetail]    Script Date: 05/02/2013 19:47:38 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




/*
	Author:				TR
	Date:				29/06/2009 14:35

	Description:		Select records from PROCEDURE_JobDetail

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_sel_JobDetail]
---------Parameters----------
@JobID int = NULL,
@SQL_WHERE nvarchar(4000) = NULL

AS

DECLARE @SQL_STRING nvarchar (4000)
DECLARE @IDToHandle INT
DECLARE @GOODSINNO NVARCHAR(64)
DECLARE @temp INT
DECLARE @ReadingDate DATETIME
DECLARE @TraceabilityBarcode NVARCHAR(16)
DECLARE @SerialNo INT
DECLARE @JID INT 

SET NOCOUNT ON
SET DATEFORMAT dmy



	IF ISNULL(@JobID,'') <> '' 
		/**************************
			RETURN SPECIFIC RECORDS
		**************************/
		BEGIN
			SELECT		jd.JobDetailID, jd.JobID, jd.StepDetailID, jd.SequencePosition, jd.Description, (CASE WHEN (SELECT DescriptionShortName FROM  LOCATION_ObjectNew WHERE Barcode= CaptureValue) <> '' THEN (SELECT DescriptionShortName FROM  LOCATION_ObjectNew WHERE Barcode = CaptureValue) ELSE CaptureValue END) AS CaptureValue, jd.MinValue, jd.MaxValue, jd.ReadingDate, jd.UserName, jd.CorrectiveAction, jd.Comments, jd.[Signature], pcd.TraceabilityCode,jd.StepImage, (case when jd.StepImage is not null then 'Available' else '' end)   IsAvailableStepImage, UnsavedData ,ps.DataTypeName

			FROM		PROCEDURE_JobDetail		jd	--	WITH (READUNCOMMITTED)
			
			LEFT JOIN   STOCKCONTROL_ProductCode pcd ON jd.JobDetailID = pcd.JobDetailID
			
			LEFT JOIN   PROCEDURE_StepDetail ps ON jd.StepDetailID = ps.StepDetailID
			
			WHERE		JobID = @JobID

			ORDER BY 	ReadingDate ASC

			RETURN
		END

	IF ISNULL(@SQL_WHERE,'') <> '' 
		/*********************************************
			SELECT RECORDS ACCORDING TO WHERE CRITERIA
		*********************************************/
		BEGIN
		    
			
			SET @SQL_STRING = 'SELECT		jd.JobDetailID, jd.JobID, jd.StepDetailID, jd.SequencePosition, jd.Description, (CASE WHEN (SELECT DescriptionShortName FROM  LOCATION_ObjectNew WHERE Barcode= CaptureValue) <> '''' THEN (SELECT DescriptionShortName FROM  LOCATION_ObjectNew WHERE Barcode = CaptureValue) ELSE CaptureValue END) AS CaptureValue, jd.MinValue, jd.MaxValue, jd.ReadingDate, jd.UserName, jd.CorrectiveAction, jd.Comments, jd.[Signature], pcd.TraceabilityCode,jd.StepImage, (case when jd.StepImage is not null then ''Available'' else '''' end)   IsAvailableStepImage, UnsavedData,ps.DataTypeName '
			SET @SQL_STRING = @SQL_STRING + 'FROM		PROCEDURE_JobDetail		jd '
			SET @SQL_STRING = @SQL_STRING + 'LEFT JOIN   STOCKCONTROL_ProductCode pcd ON jd.JobDetailID = pcd.JobDetailID '
			SET @SQL_STRING = @SQL_STRING + 'LEFT JOIN   PROCEDURE_StepDetail ps ON jd.StepDetailID = ps.StepDetailID '

			SET @SQL_STRING = @SQL_STRING + @SQL_WHERE
			PRINT(@SQL_STRING)
			EXEC(@SQL_STRING)

			RETURN
		END

	/*********************
		RETURN ALL RECORDS
	*********************/
	BEGIN
			SELECT		jd.JobDetailID, jd.JobID, jd.StepDetailID, jd.SequencePosition, jd.Description, (CASE WHEN (SELECT DescriptionShortName FROM  LOCATION_ObjectNew WHERE Barcode= CaptureValue) <> '' THEN (SELECT DescriptionShortName FROM  LOCATION_ObjectNew WHERE Barcode = CaptureValue) ELSE CaptureValue END) AS CaptureValue, jd.MinValue, jd.MaxValue, jd.ReadingDate, jd.UserName, jd.CorrectiveAction, jd.Comments, jd.[Signature], pcd.TraceabilityCode,jd.StepImage, UnsavedData

			FROM		PROCEDURE_JobDetail		jd	
			
			LEFT JOIN   STOCKCONTROL_ProductCode pcd ON jd.JobDetailID = pcd.JobDetailID

			ORDER BY 	ReadingDate ASC

		RETURN
	END




GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RANGER_usp_sel_Handset]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RANGER_usp_sel_Handset]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				Titu
	Date:				30/09/2013

	Description:		Select handset record from Procedure_Job

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[RANGER_usp_sel_Handset]
---------Parameters----------

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 


SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	
	--SELECT Distinct  DeviceID as SerialNumber,CompleteDate as LastReceived,Name as LastProcedure,UserName as LastUsedBy
	--FROM PROCEDURE_Job Table1
	--WHERE CompleteDate in (Select Max(z.CompleteDate)From PROCEDURE_Job z Where z.DeviceID=Table1.DeviceID Group by DeviceID)
	--Order By CompleteDate Desc
	
	SELECT hs.ID, hs.SerialNumber, hs.Label PDALabel, hs.JobID, hs.LastStepID, stp.Name AS LastProcedure, hs.LastReceived, hs.LastSent, hs.LastUser 
	FROM Ranger_Handset hs
	INNER JOIN PROCEDURE_Step stp ON hs.LastStepID =  stp.StepID
	ORDER BY hs.SerialNumber
	
	
	RETURN 1
END TRY
BEGIN CATCH
	IF ISNULL(@ErrorMsg,'') =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'RANGER_usp_sel_Handset',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
GO


/****** Object:  StoredProcedure [dbo].[REPORT_usp_Procedure]    Script Date: 06/06/2012 16:30:14 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[REPORT_usp_Procedure]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[REPORT_usp_Procedure]
GO

/****** Object:  StoredProcedure [dbo].[REPORT_usp_Procedure]    Script Date: 06/06/2012 16:30:14 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[REPORT_usp_Procedure]

---------Parameters----------
@StepID INT
--@Success bit OUTPUT

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)

BEGIN TRY
	SET @ErrorMsg = ''
--	SET @Success = 0

	SELECT	SequencePosition, StepDetailID, Description, DataTypeName, DataType, MinValue, MaxValue, Mandatory
	FROM	dbo.PROCEDURE_StepDetail
	WHERE	StepID = @StepID
	ORDER BY SequencePosition
	
--	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) <> '##'
		BEGIN	
			/*SET @ErrorParamsData =	'@Barcode = ' + @Barcode + ', @Pallet_No = ' +  CAST(@Pallet_No AS nvarchar(8))  + */

			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[REPORT_usp_Procedure]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1


GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_JobDetail]    Script Date: 07/17/2013 14:19:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_upd_JobDetail]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_upd_JobDetail]
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_JobDetail]    Script Date: 07/17/2013 14:19:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
	Author:				TR
	Date:				29/06/2009 14:35

	Description:		Update record in PROCEDURE_JobDetail

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_upd_JobDetail]
---------Parameters----------
@JobDetailID int,
@JobID int,
@StepDetailID int,
@Description nvarchar(110),
@CaptureValue nvarchar(128),
@ReadingDate datetime,
@CorrectiveAction NVARCHAR(128),
@Comments NVARCHAR(300),
@UserName nvarchar(16),
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF @JobDetailID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		JobDetailID
							FROM		PROCEDURE_JobDetail				WITH (READUNCOMMITTED)
							WHERE 		JobDetailID = @JobDetailID
							)
			BEGIN
				SET @ErrorMsg = '##01Table PROCEDURE_JobDetail - Could not find record ' + CAST(@JobDetailID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			/************
			UPDATE RECORD
			************/
			UPDATE	PROCEDURE_JobDetail												WITH (ROWLOCK)

			SET 	JobID = @JobID,
					StepDetailID = @StepDetailID,
					[Description] = @Description,
					CaptureValue = @CaptureValue,
					ReadingDate = @ReadingDate,
					CorrectiveAction = @CorrectiveAction,
					Comments = @Comments,
					UserName = @UserName

			WHERE	JobDetailID = @JobDetailID

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@JobDetailID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_upd_JobDetail',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_ins_JobDetail]    Script Date: 05/02/2013 18:52:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_ins_JobDetail]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_ins_JobDetail]
GO



/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_ins_JobDetail]    Script Date: 05/02/2013 18:52:27 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				TR
	Date:				29/06/2009 14:35

	Description:		Insert record in PROCEDURE_JobDetail

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_ins_JobDetail]
---------Parameters----------
@JobID int,
@StepDetailID int,
@Description nvarchar(110),
@CaptureValue nvarchar(128),
@MinValue real = NULL,
@MaxValue real = NULL,
@ReadingDate datetime,
@UserName nvarchar(16),
@Signature VARBINARY(MAX) = NULL,
@SequencePosition INT,
@CorrectiveAction NVARCHAR(128),
@Comments NVARCHAR(300),
@StepImage VARBINARY(MAX) = NULL,
@UnsavedData NVARCHAR(128) = NULL,
@RecordID int OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
--DECLARE @BarcodeStepId
DECLARE @DataTypeName  nvarchar (2048) 
DECLARE @ObjectID INT
DECLARE @CaptureValueTemp nvarchar (128) 

DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RecordID = 0
	SET @Success = 0
	SET @ErrorMsg =''

	/************
	INSERT RECORD
	************/
	SELECT @DataTypeName = DataTypeName FROM PROCEDURE_StepDetail WHERE StepDetailID = @StepDetailID
	IF @DataTypeName IN ( 'Temperature' ,'Accept/Reject' ,'Accept/Reject (White Boxes)','Batch Code' , 'Yes/No' , 'Yes/No (White Boxes)','Yes/Caution/No','Condition Factor','Pass/Fail','Pass/Fail (White Boxes)','Satisfactory/Unsatisfactory','Tick/Cross','List','Image','High/Medium/Low','Grade','Free Text','Weight Check','Numeric','Quantity/Weight','Decimal','Date','No/Yes','No/Yes (White Boxes)','No/Caution/Yes' )
	BEGIN
		SELECT @CaptureValueTemp = FieldValue FROM fnSplit('~',@CaptureValue) WHERE FieldNo = 1
		SELECT @ObjectID = FieldValue FROM fnSplit('~',@CaptureValue) WHERE FieldNo = 2
		SET @CaptureValue = @CaptureValueTemp
	END	
	
	INSERT INTO	PROCEDURE_JobDetail												WITH (ROWLOCK)
			(
			JobID, StepDetailID, [Description], CaptureValue, MinValue, MaxValue, ReadingDate, Signature, UserName, CorrectiveAction, Comments, SequencePosition,StepImage, UnsavedData, ObjectID
			)
	VALUES
			(
			@JobID, @StepDetailID, @Description, @CaptureValue, @MinValue, @MaxValue, @ReadingDate, @Signature, @UserName, @CorrectiveAction, @Comments, @SequencePosition,@StepImage, @UnsavedData, @ObjectID
			)

	DECLARE @StepID INT
	SELECT @StepID = StepID FROM PROCEDURE_StepDetail WHERE  StepDetailID = @StepDetailID
	
	UPDATE	Procedure_Alert	WITH (ROWLOCK)
	SET 	ActionTaken = 1, ResolvedDateTime = @ReadingDate
	WHERE StepID = @StepID  AND ActionTaken = 0 AND AlertType = 1 AND ISNULL(IsHistory,0) = 0
	AND DateTimeOfAction <= @ReadingDate AND ActionFinishTime >= @ReadingDate

	SET @RecordID = SCOPE_IDENTITY()
	SET @Success = 1
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_ins_JobDetail',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1


GO









/****** Object:  StoredProcedure [dbo].[OBJECT_usp_sel_All_Objects]    Script Date: 06/08/2012 12:30:35 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[OBJECT_usp_sel_All_Objects]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[OBJECT_usp_sel_All_Objects]
GO

/****** Object:  StoredProcedure [dbo].[OBJECT_usp_sel_All_Objects]    Script Date: 06/08/2012 12:30:35 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
	Author:				TR
	Date:				12/01/2009 15:57

	Description:		Select records from LOCATION_Object

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[OBJECT_usp_sel_All_Objects]
---------Parameters----------
@SQL_WHERE nvarchar(4000) = NULL

AS

DECLARE @SQL_STRING nvarchar (4000)

SET NOCOUNT ON
SET DATEFORMAT dmy

	IF ISNULL(@SQL_WHERE,'') <> '' 
		/*********************************************
			SELECT RECORDS ACCORDING TO WHERE CRITERIA
		*********************************************/
		BEGIN
			SET @SQL_STRING = 'ObjectID, Barcode, Description, MinValue, MaxValue, DataType, GP1, GP2, GP3, GP4, GP5, GP6, GP7, GP8, GP9, GP10, ListID '
			SET @SQL_STRING = @SQL_STRING + ' FROM vwAllObjects '

			SET @SQL_STRING = @SQL_STRING + @SQL_WHERE

			SET @SQL_STRING = @SQL_STRING + ' ORDER BY ObjectID ASC'
			EXEC(@SQL_STRING)

			RETURN
		END

	/*********************
		RETURN ALL RECORDS
	*********************/
	BEGIN
		------------------------------------ Delete old records --------------------------------------
		DELETE PDA_AllObjects
		
		------------------------------------ Insert records --------------------------------------
		INSERT INTO PDA_AllObjects (ObjectID, Barcode, Description, MinValue, MaxValue, DataType, GP1, GP2, GP3, GP4, GP5, GP6, GP7, GP8, GP9, GP10, ListID)
		
		SELECT		ObjectID, Barcode, Description, MinValue, MaxValue, DataType, GP1, GP2, GP3, GP4, GP5, GP6, GP7, GP8, GP9, GP10, ListID

		FROM		vwAllObjects

		ORDER BY 	ObjectID ASC

		------------------------------------ Select records -----------------------------------------------
		SELECT ObjectID, Barcode, Description, MinValue, MaxValue, DataType, GP1, GP2, GP3, GP4, GP5, GP6, GP7, GP8, GP9, GP10, ListID
		
		FROM PDA_AllObjects
		
		RETURN
	END

GO


/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_ins_Document]    Script Date: 10/10/2012 19:50:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_ins_Document]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_ins_Document]
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_ins_Document]    Script Date: 10/10/2012 19:50:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





/*
	Author:				MSH
	Date:				29/06/2009 15:11

	Description:		Insert record in PROCEDURE_StepDetail

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_ins_Document]
---------Parameters----------
@ID int=0,
@ObjectID int,
@DocumentTitle varchar(250),
@DocumentPath varchar(250),
@DocumentContent varbinary(max),
@LastChangeDateFromSytem Datetime,
@LastChangeDateOutsideSystem Datetime,
@IsSaveOrEdit BIT,
@ObjectType int,
@AllowMultiple int=0,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

DECLARE @DataType NVARCHAR(32)
DECLARE @ReferenceID INT
DECLARE @ChildID INT
DECLARE @PSDID INT

SET NOCOUNT ON
SET DATEFORMAT dmy
SET @ReferenceID = NULL
SET @ChildID = NULL

DECLARE @DocumentTitleTemp VARCHAR(250)

BEGIN TRY
	SET @Success = 0
	SET @DocumentTitleTemp = ''
	SELECT @ReferenceID = ID FROM PROCEDURE_Step_Associated_Document WHERE DocumentContent = @DocumentContent 
	SELECT @PSDID =  (SELECT TOP 1 ID FROM PROCEDURE_Step_Associated_Document WHERE ObjectID = @ObjectID AND ObjectType = @ObjectType )
	
	/************
	INSERT RECORD
	************/
	IF NOT EXISTS(SELECT ID FROM PROCEDURE_Step_Associated_Document WHERE ObjectID = @ObjectID AND ObjectType = @ObjectType and @AllowMultiple=0)
	BEGIN
		IF @IsSaveOrEdit <> 0
		BEGIN
			INSERT INTO	PROCEDURE_Step_Associated_Document												WITH (ROWLOCK)
					(
						ObjectID, DocumentTitle, DocumentPath, DocumentContent, LastChangeDateFromSytem, LastChangeDateOutsideSystem,ObjectType,UpdatedOn,ReferenceDocID
					)
			VALUES
					(
						@ObjectID, @DocumentTitle, @DocumentPath, CASE  WHEN @ReferenceID IS NULL THEN @DocumentContent ELSE NULL END, @LastChangeDateFromSytem, @LastChangeDateOutsideSystem,@ObjectType,GETDATE(), @ReferenceID 
					)
		END	
		ELSE IF @ID>0	
		BEGIN
			SELECT TOP(1) @ChildID = ID FROM PROCEDURE_Step_Associated_Document WHERE ReferenceDocID = @ID AND ID <> @ID

			IF(@ChildID IS NULL)
				UPDATE PROCEDURE_Step_Associated_Document SET DocumentContent = @DocumentContent , ReferenceDocID = NULL WHERE ReferenceDocID = @ID

			ELSE
				BEGIN
					UPDATE PROCEDURE_Step_Associated_Document SET ReferenceDocID = @ChildID ,UpdatedOn = GETDATE() WHERE ReferenceDocID = @ID AND ID <> @ID
					UPDATE PROCEDURE_Step_Associated_Document SET DocumentContent = (SELECT DocumentContent FROM PROCEDURE_Step_Associated_Document WHERE ID = @ID) ,ReferenceDocID = NULL, UpdatedOn = GETDATE()
					WHERE ID = @ChildID
				END


			--UPDATE PROCEDURE_Step_Associated_Document SET CASE WHEN @ChildID IS NULL THEN DocumentContent = @DocumentContent ELSE ReferenceDocID = @ChildID END, ReferenceDocID = NULL WHERE ReferenceDocID = (SELECT ID FROM PROCEDURE_Step_Associated_Document WHERE ObjectID = @ObjectID AND ObjectType = @ObjectType )
			DELETE FROM PROCEDURE_Step_Associated_Document WHERE  ID=@ID
		END 
	END
	ELSE 
	BEGIN
		IF @IsSaveOrEdit <> 1
		BEGIN
			SELECT TOP(1) @ChildID = ID FROM PROCEDURE_Step_Associated_Document WHERE ReferenceDocID = @PSDID AND ID <> @PSDID

			IF(@ChildID IS NULL)
				UPDATE PROCEDURE_Step_Associated_Document SET DocumentContent = @DocumentContent ,UpdatedOn = GETDATE(), ReferenceDocID = NULL WHERE ReferenceDocID = @PSDID
			ELSE
				BEGIN
					UPDATE PROCEDURE_Step_Associated_Document SET ReferenceDocID = @ChildID,UpdatedOn = GETDATE() WHERE ReferenceDocID = @PSDID AND ID <> @PSDID
					UPDATE PROCEDURE_Step_Associated_Document SET DocumentContent = (SELECT DocumentContent FROM PROCEDURE_Step_Associated_Document WHERE ID = @PSDID) ,ReferenceDocID = NULL,UpdatedOn = GETDATE()
					WHERE ID = @ChildID
			END

			--UPDATE PROCEDURE_Step_Associated_Document SET DocumentContent = @DocumentContent , ReferenceDocID = NULL WHERE ReferenceDocID = (SELECT ID FROM PROCEDURE_Step_Associated_Document WHERE ObjectID = @ObjectID AND ObjectType = @ObjectType )
			DELETE FROM PROCEDURE_Step_Associated_Document WHERE ObjectID = @ObjectID AND ObjectType = @ObjectType
		END
		ELSE
		BEGIN
			SELECT @DocumentTitleTemp = DocumentTitle FROM PROCEDURE_Step_Associated_Document WHERE ObjectID = @ObjectID AND ObjectType = @ObjectType

			IF 	@DocumentTitleTemp	<> @DocumentTitle
			BEGIN

			SELECT TOP(1) @ChildID = ID FROM PROCEDURE_Step_Associated_Document WHERE ReferenceDocID = @PSDID AND ID <> @PSDID

			IF(@ChildID IS NULL)
				UPDATE PROCEDURE_Step_Associated_Document SET DocumentContent = @DocumentContent , ReferenceDocID = NULL ,UpdatedOn = GETDATE() WHERE ReferenceDocID = @PSDID

			ELSE
				BEGIN
				UPDATE PROCEDURE_Step_Associated_Document SET ReferenceDocID = @ChildID ,UpdatedOn = GETDATE() WHERE ReferenceDocID = @PSDID
				UPDATE PROCEDURE_Step_Associated_Document SET DocumentContent = (SELECT DocumentContent FROM PROCEDURE_Step_Associated_Document WHERE ID = @PSDID) ,ReferenceDocID = NULL ,UpdatedOn = GETDATE()
				WHERE ID = @ChildID
				END
				
				UPDATE	PROCEDURE_Step_Associated_Document
				SET  DocumentTitle = @DocumentTitle
					,DocumentPath = @DocumentPath
					,DocumentContent = CASE WHEN @ReferenceID IS NULL  THEN @DocumentContent ELSE NULL END
					,LastChangeDateFromSytem = @LastChangeDateFromSytem
					,LastChangeDateOutsideSystem= @LastChangeDateOutsideSystem
					,UpdatedOn = GETDATE()
					,ReferenceDocID =  @ReferenceID 
					
				WHERE ObjectID = @ObjectID AND ObjectType = @ObjectType
			END
		END

	END
	SET @Success = 1
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_ins_Document',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_del_AssociatedDocument]    Script Date: 10/10/2012 19:50:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_del_AssociatedDocument]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_del_AssociatedDocument]
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_del_AssociatedDocument]    Script Date: 3/28/2014 5:04:46 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





/*
	Author:				MSH
	Date:				29/0/2011 15:11

	Description:		Delete record from PROCEDURE_StepDetail_Document

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_del_AssociatedDocument]
---------Parameters----------
@ObjectID int,
@ObjectType int,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 
DECLARE @ReferenceID INT
DECLARE @ChildID INT
DECLARE @PSDID INT
DECLARE @DocumentContent varbinary(MAX)


SET NOCOUNT ON
SET DATEFORMAT dmy
SET @ReferenceID = NULL
SET @ChildID = NULL


BEGIN TRY
	SET @Success = 0
	SELECT @PSDID =  (SELECT ID FROM PROCEDURE_Step_Associated_Document WHERE ObjectID = @ObjectID AND ObjectType = @ObjectType )
	SELECT @DocumentContent = DocumentContent FROM PROCEDURE_Step_Associated_Document WHERE ID = @PSDID
	SELECT @ReferenceID = ID FROM PROCEDURE_Step_Associated_Document WHERE DocumentContent = @DocumentContent 

	IF @ObjectID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF EXISTS	(
							SELECT 		ObjectID
							FROM		PROCEDURE_Step_Associated_Document							WITH (READUNCOMMITTED)
							WHERE 		ObjectID = @ObjectID AND ObjectType= @ObjectType
							)
			BEGIN

			SELECT TOP(1) @ChildID = ID FROM PROCEDURE_Step_Associated_Document WHERE ReferenceDocID = @PSDID AND ID <> @PSDID

			IF(@ChildID IS NULL)
				UPDATE PROCEDURE_Step_Associated_Document SET DocumentContent = @DocumentContent ,UpdatedOn = GETDATE(), ReferenceDocID = NULL WHERE ReferenceDocID = @PSDID

			ELSE
				BEGIN
					UPDATE PROCEDURE_Step_Associated_Document SET ReferenceDocID = @ChildID,UpdatedOn = GETDATE() WHERE ReferenceDocID = @PSDID AND ID <> @PSDID
					UPDATE PROCEDURE_Step_Associated_Document SET DocumentContent = (SELECT DocumentContent FROM PROCEDURE_Step_Associated_Document WHERE ID = @PSDID) ,ReferenceDocID = NULL,UpdatedOn = GETDATE()
					WHERE ID = @ChildID
				END

			DELETE FROM PROCEDURE_Step_Associated_Document WHERE ObjectID = @ObjectID AND ObjectType = @ObjectType
			
				
			END

			

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@ObjectID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_del_AssociatedDocument',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1





GO




/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_ins_Document]    Script Date: 10/10/2012 19:50:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_upd_Document]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_upd_Document]
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_ins_Document]    Script Date: 10/10/2012 19:50:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*
	Author:				MSH
	Date:				29/06/2009 15:11

	Description:		Insert record in PROCEDURE_StepDetail

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_upd_Document]
---------Parameters----------
@ID int=0,
@ObjectID int,
@DocumentTitle varchar(250),
@DocumentPath varchar(250),
@DocumentContent varbinary(max),
@LastChangeDateFromSytem Datetime,
@LastChangeDateOutsideSystem Datetime,
@ObjectType int,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

DECLARE @DataType NVARCHAR(32)
DECLARE @ChildID INT
DECLARE @PSDID INT
DECLARE @ReferenceID INT

SET NOCOUNT ON
SET DATEFORMAT dmy

DECLARE @DocumentTitleTemp VARCHAR(250)

BEGIN TRY
	SET @Success = 0
	SET @DocumentTitleTemp = ''
	SET @ErrorMsg =''
	
	/************
	INSERT RECORD
	************/
	IF @ID>0
	BEGIN

	SELECT TOP(1) @ReferenceID = ID FROM PROCEDURE_Step_Associated_Document WHERE DocumentContent = @DocumentContent 
	SELECT @PSDID =  (SELECT TOP(1) ID FROM PROCEDURE_Step_Associated_Document WHERE ObjectID = @ObjectID AND ObjectType = @ObjectType )

	SELECT TOP(1) @ChildID = ID FROM PROCEDURE_Step_Associated_Document WHERE ReferenceDocID = @PSDID AND ID <> @PSDID

			IF(@ChildID IS NULL)
				UPDATE PROCEDURE_Step_Associated_Document SET DocumentContent = @DocumentContent , ReferenceDocID = NULL ,UpdatedOn = GETDATE() WHERE ReferenceDocID = @PSDID

			ELSE
				BEGIN
				UPDATE PROCEDURE_Step_Associated_Document SET ReferenceDocID = @ChildID ,UpdatedOn = GETDATE() WHERE ReferenceDocID = @PSDID
				UPDATE PROCEDURE_Step_Associated_Document SET DocumentContent = (SELECT DocumentContent FROM PROCEDURE_Step_Associated_Document WHERE ID = @PSDID) ,ReferenceDocID = NULL ,UpdatedOn = GETDATE()
				WHERE ID = @ChildID
				END

	UPDATE	PROCEDURE_Step_Associated_Document
				SET  DocumentTitle = @DocumentTitle
					,DocumentPath = @DocumentPath
					,DocumentContent = CASE WHEN @ReferenceID IS NULL  THEN @DocumentContent ELSE NULL END
					,LastChangeDateFromSytem = @LastChangeDateFromSytem
					,LastChangeDateOutsideSystem= @LastChangeDateOutsideSystem
					,UpdatedOn = GETDATE()
					,ReferenceDocID =  @ReferenceID 
					
				WHERE ObjectID = @ObjectID AND ObjectType = @ObjectType
					

	END
	SET @Success = 1
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_upd_Document',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO



/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_sel_AssociatedDocument]    Script Date: 06/08/2012 16:45:44 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_sel_AssociatedDocument]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_sel_AssociatedDocument]
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_sel_AssociatedDocument]    Script Date: 06/08/2012 16:45:44 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[PROCEDURE_usp_sel_AssociatedDocument]
---------Parameters----------
@ObjectID int = NULL,
@ObjectType int=NULL,
@SQL_WHERE nvarchar(4000) = NULL

AS

DECLARE @SQL_STRING nvarchar (4000)

SET NOCOUNT ON
SET DATEFORMAT dmy

	IF ISNULL(@ObjectID,'') <> '' 
		/**************************
			RETURN SPECIFIC RECORDS
		**************************/
		BEGIN
			SELECT		ID, ObjectID, ReferenceDocID ,DocumentTitle, DocumentPath,(CASE WHEN ReferenceDocID IS NULL THEN DocumentContent ELSE (SELECT psd2.DocumentContent FROM  PROCEDURE_Step_Associated_Document psd2 WHERE psd2.ID = psd.ReferenceDocID) END) AS DocumentContent, LastChangeDateFromSytem, LastChangeDateOutsideSystem

			FROM		PROCEDURE_Step_Associated_Document		psd			

			WHERE		ObjectID = @ObjectID AND ObjectType = @ObjectType

			ORDER BY 	ObjectID ASC

			RETURN
		END

	IF ISNULL(@SQL_WHERE,'') <> '' 
		/*********************************************
			SELECT RECORDS ACCORDING TO WHERE CRITERIA
		*********************************************/
		BEGIN
			SET @SQL_STRING = 'SELECT		ID, ObjectID, ReferenceDocID ,DocumentTitle, DocumentPath,(CASE WHEN ReferenceDocID IS NULL THEN DocumentContent ELSE (SELECT psd2.DocumentContent FROM  PROCEDURE_Step_Associated_Document psd2 WHERE psd2.ID = psd.ReferenceDocID) END) AS DocumentContent, LastChangeDateFromSytem, LastChangeDateOutsideSystem '

			SET @SQL_STRING = @SQL_STRING + 'FROM		PROCEDURE_Step_Associated_Document		psd		'

			SET @SQL_STRING = @SQL_STRING + @SQL_WHERE

			EXEC(@SQL_STRING)

			RETURN
		END
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_del_StepDetail]    Script Date: 06/11/2012 20:52:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_del_StepDetail]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_del_StepDetail]
GO


/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_del_StepDetail]    Script Date: 06/11/2012 20:52:27 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
	Author:				TR
	Date:				29/06/2009 15:11

	Description:		Delete record from PROCEDURE_StepDetail

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_del_StepDetail]
---------Parameters----------
@StepDetailID int,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 
DECLARE @StepID INT
DECLARE @SequencePosition INT

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF @StepDetailID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		StepDetailID
							FROM		PROCEDURE_StepDetail							WITH (READUNCOMMITTED)
							WHERE 		StepDetailID = @StepDetailID
							)
			BEGIN
				SET @ErrorMsg = '##01Table PROCEDURE_StepDetail - Could not find record ' + CAST(@StepDetailID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END
			
			IF EXISTS	(
						SELECT * FROM RANGER_Exception
						WHERE Descidentity = @StepDetailID AND (Status = 'Outstanding' OR Status = 'Pending')
						)
			BEGIN
				SET @ErrorMsg = '##03Corrective action associated with this step is not resolved yet. Please resolve the corrective action before deleting this step.'
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END
			--Select StepID
			SELECT @StepID = StepID, @SequencePosition = SequencePosition 
			FROM PROCEDURE_StepDetail 
			WHERE StepDetailID = @StepDetailID
			
			DELETE	PROCEDURE_StepDetail							WITH (ROWLOCK)
			WHERE 	StepDetailID = @StepDetailID
			
			UPDATE 	PROCEDURE_StepDetail
			SET SequencePosition = SequencePosition - 1
			WHERE StepID = @StepID AND SequencePosition > @SequencePosition

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@StepDetailID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_del_StepDetail',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_sel_AuditItem]    Script Date: 06/15/2012 00:14:35 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_sel_AuditItem]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_sel_AuditItem]
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_sel_AuditItem]    Script Date: 06/15/2012 00:14:35 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[PROCEDURE_usp_sel_AuditItem]

---------Parameters----------
@ObjectID int = 0,
@SQL_WHERE nvarchar(4000) = NULL
AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)

DECLARE @SQL_STRING nvarchar (4000)

SET NOCOUNT ON
SET DATEFORMAT dmy

	IF @ObjectID > 0 
		/**************************
			RETURN SPECIFIC RECORDS
		**************************/
		BEGIN
			SELECT		Barcode, Description, MinValue, MaxValue, DataType, GP1, GP2, GP3, GP4, GP5, GP6, GP7, GP8, GP9, GP10, ListID

			FROM		vwAllObjects								WITH (READUNCOMMITTED)

			WHERE		ObjectID = @ObjectID

			RETURN
		END

	IF ISNULL(@SQL_WHERE,'') <> '' 
		/*********************************************
			SELECT RECORDS ACCORDING TO WHERE CRITERIA
		*********************************************/
		BEGIN
			SET @SQL_STRING = 'Barcode, Description, MinValue, MaxValue, DataType, GP1, GP2, GP3, GP4, GP5, GP6, GP7, GP8, GP9, GP10, ListID '
			
			SET @SQL_STRING = @SQL_STRING + 'FROM vwAllObjects '

			SET @SQL_STRING = @SQL_STRING + @SQL_WHERE

			EXEC(@SQL_STRING)

			RETURN
		END

	/*********************
		RETURN ALL RECORDS
	*********************/
	BEGIN
		SELECT		Barcode, Description, MinValue, MaxValue, DataType, GP1, GP2, GP3, GP4, GP5, GP6, GP7, GP8, GP9, GP10, ListID 

		FROM		vwAllObjects								WITH (READUNCOMMITTED)

		ORDER BY 	ObjectID ASC

		RETURN
	END


GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_upd_Step_Frequency]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE PROCEDURE_usp_upd_Step_Frequency
END
GO



SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				TR
	Date:				29/06/2009 15:00

	Description:		Update record in PROCEDURE_Step

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_upd_Step_Frequency]
---------Parameters----------
@StepID int,
@Name NVARCHAR(200),
@Complete DATETIME = NULL,
@NextCheckDueDate DATETIME = NULL,
@CheckFrequency nvarchar(50) = NULL,
@CheckFrequencyMins int = NULL,
@CheckFirstOfDay datetime = NULL,
@CheckFinish DATETIME = NULL,
@DayNo INT = NULL,
@Month NVARCHAR(16) = NULL,
@DayOfWeek VARCHAR(150) = NULL,
@WeekNo INT = NULL,
@Active bit,
@MonthStep INT = NULL,
@DayStep INT = NULL,
@Comment NVARCHAR(1024) = NULL,
@CorrespondingProcedureID INT,
@IsScoreProcedure BIT  = NULL,
@TotalMinimumValue INT = NULL,
@TotalMaximumValue INT = NULL,
@ReviewDate DATETIME,
@DocRefNo NVARCHAR(20) = NULL,
@IssueNo NVARCHAR(10) = NULL,
@IssueDate DATETIME = NULL,
@Tolerance INT = NULL,
@Author NVARCHAR(16) = NULL,
@AuthorText NVARCHAR(16) = NULL,
@RevisionNo NVARCHAR(8) = NULL,
@Success bit OUTPUT

AS


DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

DECLARE @ObjectType INT
DECLARE @EventID INT
DECLARE @ObjectID INT
DECLARE @PreviousCorrespondingProcedure INT
SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	
	IF @StepID > 0 
		BEGIN
			SELECT @PreviousCorrespondingProcedure = CorrespondingProcedureID FROM PROCEDURE_Step WHERE StepID = @StepID
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		StepID
							FROM		PROCEDURE_Step				WITH (READUNCOMMITTED)
							WHERE 		StepID = @StepID
							)
			BEGIN
				SET @ErrorMsg = '##01Table PROCEDURE_Step - Could not find record ' + CAST(@StepID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END			
		
			IF @CheckFrequency = 'Minutes'			        
				BEGIN
					SET @DayOfWeek = NULL SET @DayNo = NULL SET @Month = NULL SET @WeekNo = NULL
				END
			ELSE IF @CheckFrequency = 'Hourly'				
				BEGIN
					SET @DayOfWeek = NULL SET @DayNo = NULL SET @Month = NULL SET @WeekNo = NULL
				END
			ELSE IF @CheckFrequency = 'Daily'				
				BEGIN
					--SET @DayOfWeek = NULL SET @DayNo = NULL SET @Month = NULL
					SET @DayNo = NULL SET @Month = NULL SET @WeekNo = NULL
				END
			ELSE IF @CheckFrequency = 'Weekly'				
				BEGIN
					SET @DayNo = NULL SET @Month = NULL SET @CheckFrequencyMins = NULL SET @CheckFinish = NULL 
				END
			ELSE IF @CheckFrequency = 'Monthly'			
				BEGIN
					SET @DayOfWeek = NULL SET @Month = NULL SET @CheckFrequencyMins = NULL SET @CheckFinish = NULL	SET @WeekNo = NULL									
				END
			ELSE IF @CheckFrequency = 'Yearly'			
				BEGIN					
					SET @CheckFrequencyMins = NULL SET @CheckFinish = NULL SET @DayOfWeek = NULL SET @WeekNo = NULL
				END

			UPDATE	PROCEDURE_Step												WITH (ROWLOCK)
			SET 	Name = @Name,
					Complete = @Complete,
					NextCheckDueDate = @NextCheckDueDate,
					CheckFrequency = @CheckFrequency,
					CheckFrequencyMins = @CheckFrequencyMins,
					CheckFirstOfDay = @CheckFirstOfDay,
					CheckFinish = @CheckFinish,
					DayOfWeek = @DayOfWeek,
					DayNo = @DayNo,
					Active = @Active,
					[Month] = @Month,
					WeekNo = @WeekNo,
					MonthStep = @MonthStep,
					DayStep = @DayStep,
					Comment = @Comment,
					CorrespondingProcedureID = @CorrespondingProcedureID,
					IsScoreProcedure = @IsScoreProcedure,
					TotalMinimumValue = @TotalMinimumValue,
					TotalMaximumValue = @TotalMaximumValue,
					ReviewDate = @ReviewDate,
					DocRefNo = @DocRefNo,
					IssueNo = @IssueNo,
					IssueDate = @IssueDate,
					Tolerance = @Tolerance,
					Author = @Author,
					AuthorText = @AuthorText,
					RevisionNo = @RevisionNo,
					UpdatedOn = GETDATE()

			WHERE	StepID = @StepID	

			IF ISNULL(@CheckFrequency,'') <> ''
				BEGIN
					SELECT	@EventID = EventID
					FROM	dbo.EVENT_Obj
					WHERE	ObjectID = @StepID AND ObjectTypeID IS NULL
					
					IF ISNULL(@EventID,0) = 0
						BEGIN
							INSERT INTO dbo.EVENT_Obj
									( Barcode ,
									  LastCheckDate ,
									  NextCheckDueDate ,
									  CheckFrequency ,
									  CheckFrequencyMins ,
									  CheckFirstOfDay ,
									  CheckFinish,
									  ObjectTypeID,
									  ObjectID,
									  Description,
									  DayOfWeek,
									  [Month],
									  DayNo,	
									  WeekNo,
									  DayStep,
									  MonthStep,
									  Comment,
									  CorrespondingProcedureID	,
									  IsScoreProcedure,
									TotalMinimumValue,
									TotalMaximumValue							  
									)
							VALUES  ( NULL,
									  NULL,
									  @CheckFirstOfDay,
									  @CheckFrequency,
									  @CheckFrequencyMins,
									  @CheckFirstOfDay,
									  @CheckFinish,
									  NULL,
									  @StepID,
									  @Name,
							          @DayOfWeek,
							          @Month,
							          @DayNo,
							          @WeekNo,
							          @DayStep,
							          @MonthStep,
							          @Comment,
							          @CorrespondingProcedureID	,
							           @IsScoreProcedure,
					   				@TotalMinimumValue,
									@TotalMaximumValue											  
									)
						END
					ELSE
						BEGIN
							UPDATE	dbo.EVENT_Obj
							SET		NextCheckDueDate = @CheckFirstOfDay,
									CheckFrequency = @CheckFrequency,
									CheckFirstOfDay = @CheckFirstOfDay,
									CheckFinish = @CheckFinish,
									CheckFrequencyMins = @CheckFrequencyMins,
									DayOfWeek = @DayOfWeek,
									DayNo = @DayNo,
									[Month] = @Month,
									WeekNo = @WeekNo,	
									MonthStep = @MonthStep,
									DayStep = @DayStep,
									Comment = @Comment,
									CorrespondingProcedureID = @CorrespondingProcedureID	,
									IsScoreProcedure = @IsScoreProcedure,
									TotalMinimumValue = @TotalMinimumValue,
									TotalMaximumValue = @TotalMaximumValue																									
							WHERE	EventID = @EventID																		
						END
		END
	ELSE	
		BEGIN
			DELETE	dbo.EVENT_Obj
			WHERE	ObjectID = @StepID AND ObjectTypeID IS NULL
			
			DELETE	dbo.RANGER_Exception
			WHERE	ObjectID = @StepID AND ExceptionType = 1 AND Resolved IS NULL
		END
			
			
			--Start: New functionality to implement corresponding procedure
		IF ISNULL(@CorrespondingProcedureID,0) <> 0
		BEGIN
		
			--IF @CorrespondingProcedureID <= 0
			--BEGIN
			--	SET @CorrespondingProcedureID = 0
			--END
			
			DECLARE @IsProcedureActive BIT

			SELECT @IsProcedureActive =  Active FROM PROCEDURE_Step WHERE StepID = @StepID
		
		
			
			--update Procedure_Step + also update active column of Corresponding Procedure
			IF @CorrespondingProcedureID = -1 --OR @PreviousCorrespondingProcedure <> @CorrespondingProcedureID
			BEGIN 
				UPDATE PROCEDURE_Step
				SET CorrespondingProcedureID = -1
				, Active = CASE WHEN @IsProcedureActive = 1 THEN 0 ELSE 1 END
				WHERE StepID = @PreviousCorrespondingProcedure
				
				--update EVENT_Obj
				UPDATE EVENT_Obj
				SET @CorrespondingProcedureID = -1
				WHERE ObjectID = @PreviousCorrespondingProcedure
			
			END
			
		  ELSE 
			BEGIN
				UPDATE PROCEDURE_Step
				SET CorrespondingProcedureID = @StepID
				, Active = CASE WHEN @IsProcedureActive = 1 THEN 0 ELSE 1 END
				WHERE StepID = @CorrespondingProcedureID
				
				--update EVENT_Obj
				UPDATE EVENT_Obj
				SET @CorrespondingProcedureID = @StepID
				WHERE ObjectID = @CorrespondingProcedureID
			END
			
		END	
		--End: New functionality to implement corresponding procedure

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@StepID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_upd_Step_Frequency',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
GO


IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LOCATION_usp_search_location]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE LOCATION_usp_search_location
END
GO



SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_del_UserDefinedListDetail]    Script Date: 08/30/2012 12:04:12 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_del_UserDefinedListDetail]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_del_UserDefinedListDetail]
GO


/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_del_UserDefinedListDetail]    Script Date: 08/30/2012 12:04:12 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
	Author:				TR
	Date:				29/06/2009 15:45

	Description:		Delete record from PROCEDURE_UserDefinedListDetail

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_del_UserDefinedListDetail]
---------Parameters----------
@ListDetailID int,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 
DECLARE @ListID INT
DECLARE @SequencePosition INT

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF @ListDetailID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		ListDetailID
							FROM		PROCEDURE_UserDefinedListDetail							WITH (READUNCOMMITTED)
							WHERE 		ListDetailID = @ListDetailID
							)
			BEGIN
				SET @ErrorMsg = '##01Table PROCEDURE_UserDefinedListDetail - Could not find record ' + CAST(@ListDetailID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			--Select StepID
			SELECT @ListID = ListID, @SequencePosition = SequencePosition 
			FROM PROCEDURE_UserDefinedListDetail 
			WHERE ListDetailID = @ListDetailID
			
			DELETE	PROCEDURE_UserDefinedListDetail							WITH (ROWLOCK)
			WHERE 	ListDetailID = @ListDetailID
			
			UPDATE 	PROCEDURE_UserDefinedListDetail
			SET SequencePosition = SequencePosition - 1
			WHERE ListID = @ListID AND SequencePosition > @SequencePosition
			
			

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@ListDetailID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_del_UserDefinedListDetail',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO


/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_ListDetail_Sequence]    Script Date: 08/30/2012 12:11:23 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_upd_ListDetail_Sequence]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_upd_ListDetail_Sequence]
GO


/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_ListDetail_Sequence]    Script Date: 08/30/2012 12:11:23 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

Create PROCEDURE [dbo].[PROCEDURE_usp_upd_ListDetail_Sequence]

---------Parameters----------
@ListID int,
@NewPosition int,
@OldPosition int,
@Success bit OUTPUT

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)
DECLARE @CurrentListDetailID int

BEGIN TRY
	SET @ErrorMsg = ''
	SET @Success = 0

	SELECT @CurrentListDetailID = ListDetailID 
	FROM PROCEDURE_UserDefinedListDetail 
	WHERE SequencePosition = @OldPosition AND ListID = @ListID
	
	IF @NewPosition > @OldPosition
	BEGIN
		-- Decreasing 1 position for each between old and new position values
		UPDATE	PROCEDURE_UserDefinedListDetail
		SET		SequencePosition = SequencePosition - 1
		WHERE	ListID = @ListID AND SequencePosition <= @NewPosition AND SequencePosition > @OldPosition
	END
	ELSE
	BEGIN
		-- Increasing 1 position for each between old and new position values
		UPDATE	PROCEDURE_UserDefinedListDetail
		SET		SequencePosition = SequencePosition + 1
		WHERE	ListID = @ListID AND SequencePosition >= @NewPosition AND SequencePosition < @OldPosition
	END
	
	--Update sequence position of the selected step with new value
	UPDATE	PROCEDURE_UserDefinedListDetail
	SET		SequencePosition = @NewPosition
	WHERE	ListID = @ListID AND ListDetailID = @CurrentListDetailID
	
	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) = '##'
		BEGIN	
			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[PROCEDURE_usp_upd_ListDetail_Sequence]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1


GO





-- =============================================
-- Author:		MSH
-- Create date: 03/06/2012
-- Description:	Search Location Object
-- =============================================
CREATE PROCEDURE [dbo].[LOCATION_usp_search_location]
	-- Add the parameters for the stored procedure here
	@Keyword VARCHAR(200), 
	@Type VARCHAR(20)
AS
BEGIN
		DECLARE @Query NVARCHAR(MAX)

		DECLARE @Location TABLE
		(
		ObjectID INT, 
		TypeID INT, 
		IconID INT, 
		Description VARCHAR(200),
		LocationID INT, 
		LastAuditDate DATETIME,
		ParentLocationID INT, 
		Level INT, 
		FullPath VARCHAR(500),
		ChildSequence INT
		,Processed BIT
		)

		DECLARE @TypeCondition VARCHAR(250)

		--SET @Keyword = 'oo';
		--SET @Type = 'ALL';

		SET @Query = N'SELECT obj.ObjectID, obj.TypeID, obj.IconID, obj.Description, obj.LocationID, obj.LastAuditDate, obj.ParentLocationID, obj.[Level], obj.FullPath, obj.ChildSequence,0
					 FROM LOCATION_Object obj
					 INNER JOIN dbo.LOCATION_ObjectType obt
					 ON obj.TypeID = obt.ObjectTypeID
					 WHERE obj.Description LIKE ''%' + @Keyword + '%'''

		IF @Type = 'Fridge'
			SET @TypeCondition = ' AND obt.Description = ''Fridge'''
		ELSE IF @Type = 'Freezer'
			SET @TypeCondition = ' AND obt.Description = ''Freezer'''
		ELSE IF @Type = 'Scale'
			SET @TypeCondition = ' AND obt.Description = ''Scale'''
		ELSE IF @Type = 'General Object'
			SET @TypeCondition = ' AND obt.Description = ''General Object'''
		ELSE IF @Type = 'Glass Plastic Item'
			SET @TypeCondition = ' AND obt.Description = ''Glass Plastic Item'''
		ELSE IF @Type = 'Metal Detector'
			SET @TypeCondition = ' AND obt.Description = ''Metal Detector'''
		ELSE IF @Type = 'Probe'
			SET @TypeCondition = ' AND obt.Description = ''Probe'''
		ELSE
			SET @TypeCondition = ' AND (obt.Description = ''Fridge'' OR obt.Description = ''Freezer'' OR obt.Description = ''Scale''' 
								 + ' OR obt.Description = ''General Object'' OR obt.Description = ''Glass Plastic Item'''
								 + ' OR obt.Description = ''Metal Detector'' OR obt.Description = ''Probe'')'	

		
		SET @Query = @Query + @TypeCondition
		print @Query
		
		INSERT INTO @Location EXECUTE (@Query)

		DECLARE @ObjectID INT
		DECLARE @ParentID INT
		DECLARE @Temp INT

		WHILE (SELECT COUNT(ObjectID) FROM @Location WHERE Processed =0) > 0
		BEGIN
			 SELECT TOP 1 @ObjectID = ObjectID FROM @Location WHERE Processed = 0
			 
			 SELECT @ParentID = ParentLocationID FROM @Location WHERE ObjectID = @ObjectID
			 
			 WHILE @ParentID  > 0
			 BEGIN
			 
				IF NOT EXISTS (SELECT ObjectID FROM @Location WHERE ObjectID = @ParentID)
				BEGIN
					INSERT INTO @Location
					SELECT obj.ObjectID, obj.TypeID, obj.IconID, obj.Description, obj.LocationID, obj.LastAuditDate, obj.ParentLocationID, obj.[Level], obj.FullPath, obj.ChildSequence,1
					FROM LOCATION_Object obj
					WHERE obj.ObjectID = @ParentID
				END
				SET @Temp = @ParentID
				SELECT @ParentID = ParentLocationID FROM @Location WHERE ObjectID = @Temp
				
			 END
			 
			 UPDATE @Location SET Processed = 1 WHERE ObjectID = @ObjectID
		END

		
		--INSERT INTO @Location
		--SELECT obj.ObjectID, obj.TypeID, obj.IconID, obj.Description, obj.LocationID, obj.LastAuditDate, obj.ParentLocationID, obj.[Level], obj.FullPath, obj.ChildSequence,1
		--FROM LOCATION_Object obj
		--WHERE obj.ObjectID = 1
		
				
		SELECT ObjectID, TypeID, IconID, Description, LocationID, LastAuditDate, ParentLocationID, [Level], FullPath, ChildSequence FROM @Location ORDER BY ChildSequence ASC
		--SELECT ObjectID, TypeID, IconID, Description, LocationID, LastAuditDate, ParentLocationID, [Level], FullPath, ChildSequence FROM LOCATION_Object
		--WHERE ObjectID NOT IN (Select ObjectID FROM @Location) 
		
END
GO


IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_sel_GetLastActionDateTime]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE PROCEDURE_usp_sel_GetLastActionDateTime
END
GO



SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				MSH
	Date:				16/11/2011 15:57

	Description:	select last action time of an alert	

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_sel_GetLastActionDateTime]
---------Parameters----------
@StepID INT,
@AlertType INT = 1,
@LastActionDateTime Datetime OUTPUT,
@Success bit OUTPUT

AS


DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

DECLARE @TypeID int

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	--IF NOT EXISTS(	SELECT ID
	--				FROM Procedure_Alert 
	--				WHERE StepID = @StepID)
	--	BEGIN
	--		SET @ErrorMsg = '##01Cannot find objectID ' + CAST(@StepID AS nvarchar(9))
	--		RAISERROR(@ErrorMsg,16,1)
	--		RETURN -1		
	--	END

	SELECT @LastActionDateTime = MAX(DateTimeOfAction)
	FROM Procedure_Alert
	WHERE StepID = @StepID	AND AlertType = @AlertType
		
	SET @Success = 1
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_sel_GetLastActionDateTime',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_Copy_Step_Associated_Document]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE PROCEDURE_usp_Copy_Step_Associated_Document
END
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[PROCEDURE_usp_Copy_Step_Associated_Document]
---------Parameters----------
@ObjectID INT,
@CopyToObjectID INT,
@ObjectType INT,
@Success bit OUTPUT

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)


BEGIN TRY
	SET @ErrorMsg = ''
	SET @Success = 0

	DECLARE @DocID INT
	DECLARE @DocumentTitle VARCHAR(250)
	DECLARE @DocumentPath VARCHAR(250)
	DECLARE @LastChangeDateFromSytem DATETIME
	DECLARE @LastChangeDateOutsideSystem DATETIME
	DECLARE @DocumentContent Varbinary(MAX)
	DECLARE @ReferenceDocID INT
	
	--IF EXISTS(SELECT ID FROM PROCEDURE_Step_Associated_Document WHERE ObjectID = @ObjectID AND ObjectType = @ObjectType)
	--		BEGIN
	--			SELECT	@DocID = ID,
	--					@DocumentTitle = DocumentTitle,
	--					@DocumentPath = DocumentPath,
	--					@LastChangeDateFromSytem = LastChangeDateFromSytem,
	--					@LastChangeDateOutsideSystem = LastChangeDateOutsideSystem,
	--					@DocumentContent = DocumentContent, 
	--					@ReferenceDocID = ReferenceDocID
	--			FROM	dbo.PROCEDURE_Step_Associated_Document					
	--			WHERE	ObjectID = @ObjectID AND ObjectType = @ObjectID
				
	--			IF @DocumentContent IS NULL
	--			BEGIN
	--				INSERT INTO PROCEDURE_Step_Associated_Document
	--					(   ObjectID,
	--						DocumentTitle ,
	--						DocumentPath,
	--						LastChangeDateFromSytem ,
	--						LastChangeDateOutsideSystem,
	--						ObjectType,
	--						ReferenceDocID,
	--						UpdatedOn)
	--				VALUES(	@CopyToObjectID,
	--						@DocumentTitle ,
	--						@DocumentPath,
	--						@LastChangeDateFromSytem ,
	--						@LastChangeDateOutsideSystem,
	--						@ObjectType,
	--						@ReferenceDocID,
	--						GETDATE()
	--					  )
	--			END
	--			ELSE
					
	--			BEGIN
	--				INSERT INTO PROCEDURE_Step_Associated_Document
	--					(   ObjectID,
	--						DocumentTitle ,
	--						DocumentPath,
	--						LastChangeDateFromSytem ,
	--						LastChangeDateOutsideSystem,
	--						ObjectType,
	--						ReferenceDocID,
	--						UpdatedOn)
	--				VALUES(	@CopyToObjectID,
	--						@DocumentTitle ,
	--						@DocumentPath,
	--						@LastChangeDateFromSytem ,
	--						@LastChangeDateOutsideSystem,
	--						@ObjectType,
	--						@DocID,
	--						GETDATE()
	--					  )
	--			END
				
	--		END
	
	IF EXISTS(SELECT ID FROM PROCEDURE_Step_Associated_Document WHERE ObjectID = @ObjectID AND ObjectType = @ObjectType )
		BEGIN
											
			INSERT INTO PROCEDURE_Step_Associated_Document
				(   ObjectID,
					DocumentTitle ,
					DocumentPath,
					LastChangeDateFromSytem ,
					LastChangeDateOutsideSystem,
					ObjectType,
					DocumentContent,
					ReferenceDocID,
					UpdatedOn)
			SELECT	@CopyToObjectID,
					DocumentTitle,
					DocumentPath,
					LastChangeDateFromSytem,
					LastChangeDateOutsideSystem,
					ObjectType,
					NULL,
					CASE WHEN DocumentContent IS NULL THEN ReferenceDocID ELSE ID END,
					GETDATE()
			FROM PROCEDURE_Step_Associated_Document 
			WHERE ObjectID = @ObjectID AND ObjectType = @ObjectType
			
		END
					
	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) <> '##'
		BEGIN	
			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[PROCEDURE_usp_Copy_Step_Associated_Document]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_ins_Copy_Step]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE PROCEDURE_usp_ins_Copy_Step
END
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[PROCEDURE_usp_ins_Copy_Step]

---------Parameters----------
@StepDetail NVARCHAR(MAX),
@StepID INT,
@Success bit OUTPUT

AS


/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)

DECLARE @ID INT
DECLARE @Active BIT
DECLARE @CorrectActionListID INT
DECLARE @DataType NVARCHAR(32)
DECLARE @DataTypeName NVARCHAR(32)
DECLARE @DefaultValue NVARCHAR(32)
DECLARE @Description NVARCHAR(64)
DECLARE @GP1 NVARCHAR(32)
DECLARE @GP10 NVARCHAR(4000)
DECLARE @GP11 NVARCHAR(32)
DECLARE @GP2 NVARCHAR(32)
DECLARE @GP3 NVARCHAR(32)
DECLARE @GP4 NVARCHAR(32)
DECLARE @GP5 NVARCHAR(32)
DECLARE @GP6 NVARCHAR(32)
DECLARE @GP7 NVARCHAR(32)
DECLARE @GP8 NVARCHAR(32)
DECLARE @GP9 NVARCHAR(32)
DECLARE @ListID INT
DECLARE @LoopStep BIT
DECLARE @Mandatory BIT
DECLARE @MaxValue REAL
DECLARE @MinValue REAL
DECLARE @PC BIT
DECLARE @Picture VARBINARY(MAX)
DECLARE @PictureName NVARCHAR(64)
DECLARE @SequencePosition INT
--DECLARE @StepID INT
DECLARE @Validation NVARCHAR(16) 
DECLARE @TempStepID INT
DECLARE @ReferenceDate DATETIME
DECLARE @StartFromDay INT
DECLARE @ContinueTillDay INT
DECLARE @GoToStep nvarchar(64)
DECLARE @NoOfChecks INT
DECLARE @IsCAApplicable BIT
DECLARE @MatchStepNo INT
DECLARE @PromptForStepNo BIT
--step associated document -- 09/01/2010
--start
DECLARE @DocumentTitle VARCHAR(250)
DECLARE @DocumentPath VARCHAR(250)
DECLARE @LastChangeDateFromSytem DATETIME
DECLARE @LastChangeDateOutsideSystem DATETIME
DECLARE @StepDetailID INT
--end

BEGIN TRY
	SET @ErrorMsg = ''
	SET @Success = 0

	SELECT FieldNo, FieldValue AS StepDetail, 0 AS Processed INTO #Rec 
	FROM fnSplit('|',@StepDetail)	 
	ORDER BY FieldNo --DESC

	--SELECT @TempStepID = StepDetail FROM	#Rec WHERE FieldNo = 1


	--SELECT @StepID = StepID FROM	dbo.PROCEDURE_StepDetail WHERE StepDetailID = @TempStepID
				
	SELECT	@SequencePosition = MAX(SequencePosition)
	FROM	dbo.PROCEDURE_StepDetail
	WHERE	StepID = @StepID
	
	IF @SequencePosition IS NULL
	BEGIN
		 SET @SequencePosition = 0
	END 
	
	WHILE EXISTS(SELECT Processed FROM #Rec WHERE Processed = 0)
		BEGIN
			SELECT	TOP 1 @ID = StepDetail
			FROM	#Rec	
			WHERE	Processed = 0	
			--ORDER BY SequencePosition		

			SET @SequencePosition = @SequencePosition + 1
			
			SELECT	@Active = Active ,
			        @CorrectActionListID = CorrectActionListID ,
			        @DataType = DataType ,
			        @DataTypeName = DataTypeName ,
			        @DefaultValue = DefaultValue ,
			        @Description = Description ,
			        @GP1 = GP1 ,
			        @GP10 = GP10 ,
			        @GP11 = GP11 ,
			        @GP2 = GP2 ,
			        @GP3 = GP3 ,
			        @GP4 = GP4 ,
			        @GP5 = GP5 ,
			        @GP6 = GP6 ,
			        @GP7 = GP7 ,
			        @GP8 = GP8 ,
			        @GP9 = GP9 ,
			        @ListID = ListID ,
			        @LoopStep = LoopStep ,
			        @Mandatory = Mandatory ,
			        @MaxValue = MaxValue ,
			        @MinValue = MinValue, 
			        @Picture = Picture ,
			        @PictureName = PictureName ,
			        @Validation = Validation,
			        @ReferenceDate = ReferenceDate, 
			        @StartFromDay = StartFromDay,
			        @ContinueTillDay = ContinueTillDay,
			        @GoToStep = GoToStep,
					@NoOfChecks = NoOfChecks,
					@IsCAApplicable = IsCAApplicable,
					@MatchStepNo = MatchStepNo,
					@PromptForStepNo = PromptForStepNo
			FROM	dbo.PROCEDURE_StepDetail					
			WHERE	StepDetailID = @ID

			INSERT	INTO	dbo.PROCEDURE_StepDetail
			        ( StepID ,
			          Description ,
			          DataTypeName ,
			          DataType ,
			          ListID ,
			          CorrectActionListID ,
			          MinValue ,
			          MaxValue ,
			          DefaultValue ,
			          Validation ,
			          Mandatory ,
			          SequencePosition ,
			          Picture ,
			          PictureName ,
			          Active ,
			          GP1 ,
			          GP2 ,
			          GP3 ,
			          GP4 ,
			          GP5 ,
			          GP6 ,
			          GP7 ,
			          GP8 ,
			          GP9 ,
			          GP10 ,
			          GP11 ,
			          LoopStep,
			          ReferenceDate,
			          StartFromDay,
			          ContinueTillDay,
			          GoToStep,
			          NoOfChecks,
			          IsCAApplicable,
			          MatchStepNo,
			          PromptForStepNo,
			          UpdatedOn
			        )
			VALUES  ( @StepID ,
			          @Description ,
			          @DataTypeName ,
			          @DataType ,
			          @ListID ,
			          @CorrectActionListID ,
			          @MinValue ,
			          @MaxValue ,
			          @DefaultValue ,
			          @Validation ,
			          @Mandatory ,
			          @SequencePosition ,
			          @Picture ,
			          @PictureName ,
			          @Active ,
			          @GP1 ,
			          @GP2 ,
			          @GP3 ,
			          @GP4 ,
			          @GP5 ,
			          @GP6 ,
			          @GP7 ,
			          @GP8 ,
			          @GP9 ,
			          @GP10 ,
			          @GP11 ,
			          @LoopStep,
			          @ReferenceDate,
			          @StartFromDay,
			          @ContinueTillDay,
			          @GoToStep,
			          @NoOfChecks,
			          @IsCAApplicable,
			          @MatchStepNo,
			          @PromptForStepNo,
			          GETDATE()
			        )
			
			-- added to accomodate step associated change -- 09/01/2010
			--start
			SET @StepDetailID =	SCOPE_IDENTITY()			        
						
			EXEC	PROCEDURE_usp_Copy_Step_Associated_Document	@ObjectID = @ID,
																@CopyToObjectID = @StepDetailID,
																@ObjectType = 4,
																@Success = 0
																
			EXEC	PROCEDURE_usp_Copy_Step_Associated_Document	@ObjectID = @ID,
																@CopyToObjectID = @StepDetailID,
																@ObjectType = 7,
																@Success = 0
			
			--end
			
			UPDATE	#Rec
			SET		Processed =	1						
			WHERE 	StepDetail = @ID	
		END
					
	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) <> '##'
		BEGIN	
			/*SET @ErrorParamsData =	'@Barcode = ' + @Barcode + ', @Pallet_No = ' +  CAST(@Pallet_No AS nvarchar(8))  + */

			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[PROCEDURE_usp_ins_Copy_Step]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1
GO



IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_CopyLinked_Step]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [PROCEDURE_usp_CopyLinked_Step]
END
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[PROCEDURE_usp_CopyLinked_Step]

---------Parameters----------
@StepDetailID INT,
--@CurrentSequence INT,
@CopyToStepID INT,
@Success bit OUTPUT

AS


/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)

DECLARE @CopyFromStepID INT
DECLARE @CopyToStepDetailID INT
DECLARE @Active BIT
DECLARE @CorrectActionListID INT
DECLARE @DataType NVARCHAR(32)
DECLARE @DataTypeName NVARCHAR(32)
DECLARE @DefaultValue NVARCHAR(32)
DECLARE @Description NVARCHAR(64)
DECLARE @GP1 NVARCHAR(32)
DECLARE @GP10 NVARCHAR(4000)
DECLARE @GP11 NVARCHAR(32)
DECLARE @GP2 NVARCHAR(32)
DECLARE @GP3 NVARCHAR(32)
DECLARE @GP4 NVARCHAR(32)
DECLARE @GP5 NVARCHAR(32)
DECLARE @GP6 NVARCHAR(32)
DECLARE @GP7 NVARCHAR(32)
DECLARE @GP8 NVARCHAR(32)
DECLARE @GP9 NVARCHAR(32)
DECLARE @ListID INT
DECLARE @LoopStep BIT
DECLARE @Mandatory BIT
DECLARE @MaxValue REAL
DECLARE @MinValue REAL
DECLARE @PC BIT
DECLARE @Picture VARBINARY(MAX)
DECLARE @PictureName NVARCHAR(64)
DECLARE @SequencePosition INT
DECLARE @CurrentSequence INT
--DECLARE @StepID INT
DECLARE @Validation NVARCHAR(16) 
DECLARE @TempStepID INT
DECLARE @ReferenceDate DATETIME
DECLARE @StartFromDay INT
DECLARE @ContinueTillDay INT
DECLARE @GoToStep nvarchar(64)
DECLARE @NoOfChecks INT
DECLARE @IsCAApplicable BIT
DECLARE @MatchStepNo INT
DECLARE @NewMatchStepNo INT
DECLARE @MatchStepSequence INT
DECLARE @PromptForStepNo BIT

DECLARE @DocumentTitle VARCHAR(250)
DECLARE @DocumentPath VARCHAR(250)
DECLARE @LastChangeDateFromSytem DATETIME
DECLARE @LastChangeDateOutsideSystem DATETIME
DECLARE @Return INT
--end

BEGIN TRY
	SET @ErrorMsg = ''
	SET @Success = 0
				
	--SELECT	@SequencePosition = MAX(SequencePosition)
	--FROM	dbo.PROCEDURE_StepDetail
	--WHERE	StepID = @StepID
	--SET @SequencePosition = @SequencePosition + 1
	
	SELECT	@CopyFromStepID = StepID,
			@Active = Active,
			@CurrentSequence = SequencePosition,
	        @CorrectActionListID = CorrectActionListID ,
	        @DataType = DataType ,
	        @DataTypeName = DataTypeName ,
	        @DefaultValue = DefaultValue ,
	        @Description = Description ,
	        @GP1 = GP1 ,
	        @GP10 = GP10 ,
	        @GP11 = GP11 ,
	        @GP2 = GP2 ,
	        @GP3 = GP3 ,
	        @GP4 = GP4 ,
	        @GP5 = GP5 ,
	        @GP6 = GP6 ,
	        @GP7 = GP7 ,
	        @GP8 = GP8 ,
	        @GP9 = GP9 ,
	        @ListID = ListID ,
	        @LoopStep = LoopStep ,
	        @Mandatory = Mandatory ,
	        @MaxValue = MaxValue ,
	        @MinValue = MinValue, 
	        @Picture = Picture ,
	        @PictureName = PictureName ,
	        @Validation = Validation,
	        @ReferenceDate = ReferenceDate, 
	        @StartFromDay = StartFromDay,
	        @ContinueTillDay = ContinueTillDay,
	        @GoToStep = GoToStep,
			@NoOfChecks = NoOfChecks,
			@IsCAApplicable = IsCAApplicable,
			@MatchStepNo = MatchStepNo,
			@PromptForStepNo = PromptForStepNo
	FROM	dbo.PROCEDURE_StepDetail					
	WHERE	StepDetailID = @StepDetailID
	
	IF @MatchStepNo IS NOT NULL
	BEGIN
		SELECT @MatchStepSequence = SequencePosition FROM dbo.PROCEDURE_StepDetail WHERE StepDetailID = @MatchStepNo
		SELECT @NewMatchStepNo = StepDetailID FROM dbo.PROCEDURE_StepDetail	WHERE StepID = @CopyFromStepID AND SequencePosition = @MatchStepSequence
	END
	
	
	IF EXISTS (SELECT StepDetailID FROM PROCEDURE_StepDetail WHERE StepID = @CopyToStepID AND SequencePosition = @CurrentSequence)
	BEGIN
		UPDATE dbo.PROCEDURE_StepDetail
		SET
			  Description = @Description,
	          DataTypeName = @DataTypeName,
	          DataType = @DataType,
	          ListID = @ListID,
	          CorrectActionListID = @CorrectActionListID,
	          MinValue = @MinValue,
	          MaxValue = @MaxValue,
	          DefaultValue = @DefaultValue,
	          Validation = @Validation,
	          Mandatory = @Mandatory,
	          SequencePosition = @CurrentSequence,
	          Picture = @Picture,
	          PictureName = @PictureName,
	          Active = @Active,
	          GP1 = @GP1,
	          GP2 = @GP2,
	          GP3 = @GP3,
	          GP4 = @GP4,
	          GP5 = GP5,
	          GP6 = GP6,
	          GP7 = @GP7,
	          GP8 = @GP8,
	          GP9 = @GP9,
	          GP10 = @GP10,
	          GP11 = @GP11,
	          LoopStep = @LoopStep,
	          ReferenceDate = @ReferenceDate,
	          StartFromDay = @StartFromDay,
	          ContinueTillDay = @ContinueTillDay,
	          GoToStep = @GoToStep,
	          NoOfChecks = @NoOfChecks,
	          IsCAApplicable = @IsCAApplicable,
	          MatchStepNo = @NewMatchStepNo,
	          PromptForStepNo = @PromptForStepNo,
	          UpdatedOn = GETDATE()
	          WHERE StepID = @CopyToStepID AND SequencePosition = @CurrentSequence
	END
	ELSE
	BEGIN
			INSERT	INTO dbo.PROCEDURE_StepDetail
	        ( StepID ,
	          Description ,
	          DataTypeName ,
	          DataType ,
	          ListID ,
	          CorrectActionListID,
	          MinValue,
	          MaxValue,
	          DefaultValue,
	          Validation,
	          Mandatory,
	          SequencePosition,
	          Picture,
	          PictureName,
	          Active ,
	          GP1 ,
	          GP2 ,
	          GP3 ,
	          GP4 ,
	          GP5 ,
	          GP6 ,
	          GP7 ,
	          GP8 ,
	          GP9 ,
	          GP10 ,
	          GP11 ,
	          LoopStep,
	          ReferenceDate,
	          StartFromDay,
	          ContinueTillDay,
	          GoToStep,
	          NoOfChecks,
	          IsCAApplicable,
	          MatchStepNo,
	          PromptForStepNo,
	          UpdatedOn
	        )
	VALUES  ( @CopyToStepID ,
	          @Description ,
	          @DataTypeName ,
	          @DataType ,
	          @ListID ,
	          @CorrectActionListID ,
	          @MinValue ,
	          @MaxValue ,
	          @DefaultValue ,
	          @Validation ,
	          @Mandatory ,
	          @CurrentSequence,
	          @Picture ,
	          @PictureName ,
	          @Active ,
	          @GP1 ,
	          @GP2 ,
	          @GP3 ,
	          @GP4 ,
	          @GP5 ,
	          @GP6 ,
	          @GP7 ,
	          @GP8 ,
	          @GP9 ,
	          @GP10 ,
	          @GP11 ,
	          @LoopStep,
	          @ReferenceDate,
	          @StartFromDay,
	          @ContinueTillDay,
	          @GoToStep,
	          @NoOfChecks,
	          @IsCAApplicable,
	          @NewMatchStepNo,
	          @PromptForStepNo,
	          GETDATE()
	        )
	        
	        SET @CopyToStepDetailID = SCOPE_IDENTITY()  
	        
	        EXEC	PROCEDURE_usp_Copy_Step_Associated_Document	@ObjectID = @StepDetailID,
																@CopyToObjectID = @CopyToStepDetailID,
																@ObjectType = 4,
																@Success = @Return OUTPUT
	END
				
														
	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) <> '##'
		BEGIN	

			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[PROCEDURE_usp_CopyLinked_Step]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1
GO



--=================Change in DB for Job in Showing Job detail COmment change log====


/****** Object:  StoredProcedure [dbo].[LogTransaction_usp_sel_Logs]    Script Date: 06/27/2012 17:36:49 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LogTransaction_usp_sel_Logs]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[LogTransaction_usp_sel_Logs]
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_sel_StepByJobDetailId]    Script Date: 06/27/2012 17:36:49 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_sel_StepByJobDetailId]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_sel_StepByJobDetailId]
GO



/****** Object:  StoredProcedure [dbo].[LogTransaction_usp_sel_Logs]    Script Date: 06/27/2012 17:36:49 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





/*
	Author:				TR
	Date:				02/02/2009 11:24

	Description:		Select records from RANGER_Exception

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[LogTransaction_usp_sel_Logs]

AS

SET NOCOUNT ON

		SELECT		 ID, LogData, Username,LogDateTime, Comment, 
		case  When ObjectType=3 then '' 
			Else	ParentObjectName 
			End
			AS ObjectName, 
		CreatedBy, CreatedByDateTime, LastModifiedBy, LastModifiedByDateTime, 0 As Active
		FROM		LOG_Transaction 
		WHERE		IsActive = 1
		ORDER BY LogDateTime DESC




GO

/****** Object:  StoredProcedure [dbo].[LogTransaction_usp_sel_Logs]    Script Date: 06/27/2012 17:36:49 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Report_usp_sel_Logs]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[Report_usp_sel_Logs]
GO

/****** Object:  StoredProcedure [dbo].[Report_usp_sel_Logs]    Script Date: 06/27/2012 17:36:49 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
	Author:				TR
	Date:				02/02/2009 11:24

	Description:		Select records from RANGER_Log

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[Report_usp_sel_Logs]

@WhereCondition NVARCHAR(MAX) = NULL

AS
DECLARE @SQL_STRING nvarchar (4000)
SET NOCOUNT ON

    IF ISNULL(@WhereCondition,'') <> ''
		/*********************************************
			SELECT RECORDS ACCORDING TO WHERE CRITERIA
		*********************************************/
		BEGIN
					SET @SQL_STRING = 'SELECT ID, LogData, Username,LogDateTime, Comment, '
					SET @SQL_STRING = @SQL_STRING + 'case  When ObjectType=3 then '''' '
					SET @SQL_STRING = @SQL_STRING + 'Else	ParentObjectName End AS ObjectName, '
					SET @SQL_STRING = @SQL_STRING + 'CreatedBy, CreatedByDateTime, LastModifiedBy, LastModifiedByDateTime, 0 As Active '
					SET @SQL_STRING = @SQL_STRING + 'FROM		LOG_Transaction  '
					SET @SQL_STRING = @SQL_STRING + @WhereCondition 				
					SET @SQL_STRING = @SQL_STRING +' ORDER BY LogDateTime DESC'
					print(@SQL_STRING)
					EXEC(@SQL_STRING)
			
				  RETURN
		END
    ELSE
    BEGIN
		SELECT		 ID, LogData, Username,LogDateTime, Comment, 
		CASE  When ObjectType=3 then '' 
			Else	ParentObjectName 
			End
			AS ObjectName, 
		CreatedBy, CreatedByDateTime, LastModifiedBy, LastModifiedByDateTime, 0 As Active
		FROM		LOG_Transaction 
		WHERE		IsActive = 1
		ORDER BY LogDateTime DESC
	END

GO

/****** Object:  StoredProcedure [dbo].[Report_usp_sel_Exception]    Script Date: 01/30/2013 15:31:43 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Report_usp_sel_Exception]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[Report_usp_sel_Exception]
GO


/****** Object:  StoredProcedure [dbo].[Report_usp_sel_Exception]    Script Date: 01/30/2013 15:31:43 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*
	Author:				TR
	Date:				02/02/2009 11:24

	Description:		Select records from RANGER_Exception

	History		Name		Date		Mod		
	=============================================================================================================================================
	H1			Titu(Junr)	09/07/2012	Change Status = @Status to Status LIKE @Status to allow wild card search


	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[Report_usp_sel_Exception]
---------Parameters----------
@WhereCondition nvarchar(max) = NULL

AS

DECLARE @PermissionOnDepartments NVARCHAR(MAX)

SET NOCOUNT ON
SET DATEFORMAT dmy

DECLARE @SQL_STRING nvarchar (4000)


IF ISNULL(@WhereCondition,'') <> ''
BEGIN
	SET @SQL_STRING = 'SELECT RE.ExceptionID, RE.ExceptionType, RE.ExceptionMessage, RE.ExceptionCreateUser, RE.ExceptionPassUser, RE.ExceptionDate, RE.NonConformance, RE.ActionRequired, RE.ActionTaken, RE.Comments, RE.WorkRequestNo, RE.ResolveBy, RE.Resolved, OB.Description AS Description, RE.Status, RE.AssignTo, PR.Name AS ProcedureName, '''' AS Location, RE.Image, RE.CreateDate '
	SET @SQL_STRING = @SQL_STRING + 'FROM RANGER_Exception RE '
	SET @SQL_STRING = @SQL_STRING + 'INNER JOIN dbo.PROCEDURE_StepDetail OB ON RE.DescIdentity = OB.StepDetailID '
	SET @SQL_STRING = @SQL_STRING + 'INNER JOIN PROCEDURE_Step PR ON OB.StepID = PR.StepID '
	SET @SQL_STRING = @SQL_STRING + @WhereCondition
	print @SQL_STRING
	EXEC(@SQL_STRING)
	
	RETURN
END

ELSE
		SELECT RE.ExceptionID, RE.ExceptionType, RE.ExceptionMessage, RE.ExceptionCreateUser, RE.ExceptionPassUser, RE.ExceptionDate, RE.NonConformance, RE.ActionRequired, RE.ActionTaken, RE.Comments, RE.WorkRequestNo, RE.ResolveBy, RE.Resolved, OB.Description AS Description, RE.Status, RE.AssignTo, PR.Name AS ProcedureName, '' AS Location, RE.Image, RE.CreateDate
		FROM RANGER_Exception RE
		INNER JOIN dbo.PROCEDURE_StepDetail OB ON RE.DescIdentity = OB.StepDetailID	
		INNER JOIN PROCEDURE_Step PR ON OB.StepID = PR.StepID
		WHERE RE.ExceptionType = 0 
		AND ((RE.Status = 'Resolved' AND RE.ResolveBy between '2013-01-01' AND '2013-01-26') OR (RE.Status = 'Outstanding' AND RE.CreateDate between '2013-01-01' AND '2013-01-26'))
		AND RE.DescIdentity IS NOT NULL		
		RETURN

GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_sel_StepByJobDetailId]    Script Date: 06/27/2012 17:36:49 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[PROCEDURE_usp_sel_StepByJobDetailId]
---------Parameters----------
@JobDetailID int 

AS

select distinct step.StepID, step.Name,step.UserName,step.Complete,step.LastCheckDate,
	step.NextCheckDueDate,step.CheckFrequency,step.CheckFrequencyMins,step.CheckFirstOfDay,
	--step.Picture,
	step.Active,step.CreateDate,step.CheckFinish,step.DayNo,step.Month,
	step.DayOfWeek,step.CriticalProcedure,step.MonthStep,step.DayStep,step.UserIDList,
	step.ExpireOn,step.SequencePosition,step.WeekNo,step.Comment,step.CorrespondingProcedureID,
	step.IsScoreProcedure,step.TotalMinimumValue,step.TotalMaximumValue,step.AssigneeIDList
 from
 dbo.PROCEDURE_JobDetail jobDetail 
 inner join PROCEDURE_StepDetail stepDetail on jobDetail.StepDetailID=stepDetail.StepDetailID
 inner join PROCEDURE_Step step on step.StepID = stepDetail.StepID
 where jobDetail.JobDetailID = @JobDetailID
 
GO



IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_sel_Job]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_sel_Job]
GO



/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_sel_Job]    Script Date: 12/10/2012 19:11:07 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




/*
	Author:				TR
	Date:				29/06/2009 11:16

	Description:		Select records from PROCEDURE_Job

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_sel_Job]
---------Parameters----------
@Name nvarchar(50) = NULL,
@SQL_WHERE nvarchar(4000) = NULL,
@UserName nvarchar(16) = ''
AS

DECLARE @SQL_STRING nvarchar (4000)
DECLARE @PermissionOnDepartments NVARCHAR(MAX)

SET NOCOUNT ON
SET DATEFORMAT dmy
SET @PermissionOnDepartments=''
	
	IF ISNULL(@UserName,'') <> ''
		SELECT @PermissionOnDepartments=PermissionOnDepartments from USER_User where UserName=@UserName

	IF ISNULL(@Name,'') <> '' 
		/**************************
			RETURN SPECIFIC RECORDS
		**************************/		
		BEGIN
			IF @PermissionOnDepartments=''
				BEGIN
					SELECT DISTINCT j.JobID, j.Name, j.CompleteDate, j.TypeProcedure, j.DeviceID+ISNULL(' ('+rh.Label+')','') AS DeviceID, j.UserName,j.GoodInNo,j.IsArchived, 0 AS [Select],j.SupplierName AS CaptureValue,j.Verified,ISNULL(j.VerifiyNeeded,0) VerifiyNeeded
					FROM PROCEDURE_Job j WITH (READUNCOMMITTED) 
					--INNER join PROCEDURE_JobDetail jd on j.JobID=jd.JobID
					LEFT JOIN Ranger_Handset rh ON j.DeviceID=rh.SerialNumber
					where j.Name = @Name					
					ORDER BY j.CompleteDate DESC
					
				  RETURN
				END
			ELSE
				BEGIN
					SELECT DISTINCT j.JobID, j.Name, j.CompleteDate, j.TypeProcedure, j.DeviceID+ISNULL(' ('+rh.Label+')','')  AS DeviceID, j.UserName,j.GoodInNo,j.IsArchived,0 AS [Select],j.SupplierName AS CaptureValue,j.Verified,ISNULL(j.VerifiyNeeded,0) VerifiyNeeded
					FROM PROCEDURE_Job j WITH (READUNCOMMITTED) 
					--INNER JOIN PROCEDURE_JobDetail jd on j.JobID=jd.JobID  
					INNER JOIN PROCEDURE_STEP s on j.STEPID=s.STEPID
					INNER JOIN USER_User u on s.UserName=u.UserName 
					INNER JOIN USER_Role ON USER_Role.RoleID = u.RoleID
					LEFT JOIN Ranger_Handset rh ON j.DeviceID=rh.SerialNumber
					where j.Name = @Name 
					and u.RoleID in (SELECT FieldValue FROM dbo.fnSplit(',', @PermissionOnDepartments))
					ORDER BY j.CompleteDate DESC
					
				  RETURN
				END
		END

	IF ISNULL(@SQL_WHERE,'') <> '' 
		/*********************************************
			SELECT RECORDS ACCORDING TO WHERE CRITERIA
		*********************************************/
		BEGIN
			IF @PermissionOnDepartments=''
				BEGIN
					SET @SQL_STRING = 'SELECT DISTINCT j.JobID, j.Name, j.CompleteDate, j.TypeProcedure, j.DeviceID+ISNULL('' (''+rh.Label+'')'','''')  AS DeviceID, j.UserName,j.GoodInNo,j.IsArchived,0 AS [Select],j.SupplierName AS CaptureValue,j.Verified,ISNULL(j.VerifiyNeeded,0) VerifiyNeeded '
					SET @SQL_STRING = @SQL_STRING + 'FROM PROCEDURE_Job j WITH (READUNCOMMITTED) '
					SET @SQL_STRING= @SQL_STRING+' LEFT JOIN Ranger_Handset rh ON j.DeviceID=rh.SerialNumber '
					--SET @SQL_STRING = @SQL_STRING + 'INNER join PROCEDURE_JobDetail jd on j.JobID=jd.JobID '
					SET @SQL_STRING = @SQL_STRING + @SQL_WHERE					
					SET @SQL_STRING = @SQL_STRING +'ORDER BY j.CompleteDate DESC'
					EXEC(@SQL_STRING)
			
				  RETURN
				END
			ELSE
				BEGIN
					SET @SQL_STRING = 'SELECT DISTINCT j.JobID, j.Name, j.CompleteDate, j.TypeProcedure, j.DeviceID+ISNULL('' (''+rh.Label+'')'','''')  AS DeviceID, j.UserName,j.GoodInNo,j.IsArchived,0 AS [Select],j.SupplierName AS CaptureValue,j.Verified,ISNULL(j.VerifiyNeeded,0) VerifiyNeeded '
					SET @SQL_STRING = @SQL_STRING + 'FROM PROCEDURE_Job j WITH (READUNCOMMITTED) '
					--SET @SQL_STRING = @SQL_STRING + 'INNER JOIN PROCEDURE_JobDetail jd on j.JobID=jd.JobID  '
					SET @SQL_STRING = @SQL_STRING + 'INNER JOIN PROCEDURE_STEP s on j.STEPID=s.STEPID '
					SET @SQL_STRING = @SQL_STRING + 'INNER JOIN USER_User u on s.UserName=u.UserName INNER JOIN USER_Role ON USER_Role.RoleID = u.RoleID '	
					SET @SQL_STRING= @SQL_STRING+' LEFT JOIN Ranger_Handset rh ON j.DeviceID=rh.SerialNumber '			 
					SET @SQL_STRING = @SQL_STRING + @SQL_WHERE	
					SET @SQL_STRING = @SQL_STRING + 'and USER_Role.RoleID in ('+@PermissionOnDepartments+') '				
					SET @SQL_STRING = @SQL_STRING +'ORDER BY j.CompleteDate DESC'
					print @SQL_STRING
					EXEC(@SQL_STRING)
					
				  RETURN
				END
		END

	/*********************
		RETURN ALL RECORDS
	*********************/
	BEGIN
		IF @PermissionOnDepartments=''
			BEGIN
				SELECT DISTINCT j.JobID, j.Name, j.CompleteDate, j.TypeProcedure, j.DeviceID+ISNULL(' ('+rh.Label+')','') AS DeviceID, j.UserName,j.GoodInNo,j.IsArchived,0 AS [Select], j.SupplierName AS CaptureValue,j.Verified,ISNULL(j.VerifiyNeeded,0) VerifiyNeeded
				FROM PROCEDURE_Job j WITH (READUNCOMMITTED) 
				 LEFT JOIN Ranger_Handset rh ON j.DeviceID=rh.SerialNumber
				--INNER join PROCEDURE_JobDetail jd on j.JobID=jd.JobID  				
				ORDER BY j.CompleteDate DESC
				
			  RETURN
			END
		ELSE
			BEGIN
				SELECT distinct j.JobID, j.Name, j.CompleteDate, j.TypeProcedure, j.DeviceID+ISNULL(' ('+rh.Label+')','') AS DeviceID, j.UserName,j.GoodInNo,j.IsArchived,0 AS [Select],j.SupplierName AS CaptureValue,j.Verified,ISNULL(j.VerifiyNeeded,0) VerifiyNeeded
				FROM PROCEDURE_Job j WITH (READUNCOMMITTED) 
				--INNER JOIN PROCEDURE_JobDetail jd on j.JobID=jd.JobID  
				INNER JOIN PROCEDURE_STEP s on j.STEPID=s.STEPID
				INNER JOIN USER_User u on s.UserName=u.UserName 
				INNER JOIN USER_Role ON USER_Role.RoleID = u.RoleID 
				 LEFT JOIN Ranger_Handset rh ON j.DeviceID=rh.SerialNumber 
				where  USER_Role.RoleID in (SELECT FieldValue FROM dbo.fnSplit(',', @PermissionOnDepartments))
				ORDER BY j.CompleteDate DESC
				
			  RETURN
			END
	END




GO






/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_ins_Step]    Script Date: 07/05/2012 17:10:58 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_ins_Step]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_ins_Step]
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_ins_Step]    Script Date: 07/05/2012 17:10:58 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[PROCEDURE_usp_ins_Step]
---------Parameters----------
@Name nvarchar(200),
@UserName nvarchar(16),
@Complete datetime = NULL,
@LastCheckDate datetime = NULL,
@NextCheckDueDate datetime = NULL,
@CheckFrequency nvarchar(50) = NULL,
@CheckFrequencyMins int = NULL,
@CheckFirstOfDay datetime = NULL,
@CheckFinish DATETIME = NULL,
@Picture image = NULL,
@Active bit,
@CheckDuplicates bit,
@DayNo INT = NULL,
@Month NVARCHAR(16) = NULL,
@DayOfWeek VARCHAR(150) = NULL,
@MonthStep INT = NULL,
@DayStep INT = NULL,
@WeekNo INT = NULL,
@Comment NVARCHAR(1024) = NULL, --added 11/19,
@CorrespondingProcedureID INT,
@IsScoreProcedure BIT  = NULL,
@TotalMinimumValue INT = NULL,
@TotalMaximumValue INT = NULL,
@TypeProcedure INT = 0,
@ReviewDate DATETIME,
@DocRefNo NVARCHAR(20) = NULL,
@IssueNo NVARCHAR(10) = NULL,
@IssueDate DATETIME = NULL,
@Tolerance INT = NULL,
@Author NVARCHAR(16) = NULL,
@AuthorText NVARCHAR(16) = NULL,
@RevisionNo NVARCHAR(8) = NULL,
@RecordID int OUTPUT,
@Success bit OUTPUT
AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

DECLARE @StepID INT
DECLARE @ObjectType INT
DECLARE @EventID INT
DECLARE @ObjectID INT
DECLARE @SequencePosition INT

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RecordID = 0
	SET @Success = 0

	IF @CheckDuplicates = 1
		BEGIN
			/***************************
			DON'T ALLOW DUPLICATE RECORD
			***************************/
			IF EXISTS	(
						SELECT 		StepID
						FROM		PROCEDURE_Step						WITH (READUNCOMMITTED)
						WHERE 		[Name] = @Name
						) 
			BEGIN
				SET @ErrorMsg = '##01A Procedure with the name '  + @Name + ' already exists'
				RAISERROR(@ErrorMsg,16,1)
			RETURN -1
			END
		END

	/************
	INSERT RECORD
	************/	
	SET @SequencePosition = (SELECT ISNULL(MAX(SequencePosition),0) FROM PROCEDURE_Step WHERE ISNULL(TypeProcedure,0) = @TypeProcedure) + 1
	INSERT INTO	PROCEDURE_Step												WITH (ROWLOCK)
			(
			[Name], UserName, Complete, LastCheckDate, NextCheckDueDate, CheckFrequency, CheckFrequencyMins, CheckFirstOfDay, [Picture], Active, CheckFinish, DayOfWeek, DayNo, [Month], MonthStep, DayStep, SequencePosition, WeekNo, Comment , CorrespondingProcedureID , IsScoreProcedure , TotalMinimumValue, TotalMaximumValue, TypeProcedure, ReviewDate, DocRefNo, IssueNo, IssueDate ,Tolerance,Author,AuthorText,RevisionNo, UpdatedOn
			
			)
	VALUES
			(
			@Name, @UserName, @Complete, NULL, NULL, @CheckFrequency, @CheckFrequencyMins, @CheckFirstOfDay, @Picture, @Active, @CheckFinish, @DayOfWeek, @DayNo, @Month, @MonthStep, @DayStep, @SequencePosition, @WeekNo, @Comment , @CorrespondingProcedureID , @IsScoreProcedure,@TotalMinimumValue,@TotalMaximumValue, @TypeProcedure,@ReviewDate, @DocRefNo, @IssueNo, @IssueDate ,@Tolerance, @Author, @AuthorText, @RevisionNo, GETDATE()
			)

	SET @RecordID = SCOPE_IDENTITY()

	IF ISNULL(@CheckFrequency,'') <> ''
		BEGIN					
			INSERT INTO dbo.EVENT_Obj
					( Barcode ,
					  LastCheckDate ,
					  NextCheckDueDate ,
					  CheckFrequency ,
					  CheckFrequencyMins ,
					  CheckFirstOfDay ,
					  CheckFinish,
					  ObjectTypeID,
					  ObjectID,
					  Description,
					  DayOfWeek,
					  DayNo,
					  [Month]
					  ,WeekNo	
					  ,Comment
					  ,CorrespondingProcedureID		
					  ,IsScoreProcedure,
					  TotalMinimumValue,
					  TotalMaximumValue			  
					)
			VALUES  ( NULL,
					  NULL,
					  @CheckFirstOfDay,
					  @CheckFrequency,
					  @CheckFrequencyMins,
					  @CheckFirstOfDay,
					  @CheckFinish,
					  NULL,
					  @RecordID,
					  @Name,
					  @DayOfWeek,
					  @DayNo,
					  @Month,
					  @WeekNo,
					  @Comment,
					  @CorrespondingProcedureID,
					  @IsScoreProcedure,
					  @TotalMinimumValue,
					  @TotalMaximumValue
					)
		END
		
		--Start: New functionality to implement corresponding procedure
		IF ISNULL(@CorrespondingProcedureID,0) <> 0
		BEGIN
			IF @RecordID > 0 
			BEGIN
				--update Procedure_Step + also update active column of Corresponding Procedure
				UPDATE PROCEDURE_Step
				SET CorrespondingProcedureID = @RecordID
				, Active = CASE WHEN @Active = 1 THEN 0 ELSE 1 END
				WHERE StepID = @CorrespondingProcedureID
				
				--update EVENT_Obj
				UPDATE EVENT_Obj
				SET @CorrespondingProcedureID = @RecordID
				WHERE ObjectID = @CorrespondingProcedureID
			END
		END	
		--End: New functionality to implement corresponding procedure
			
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_ins_Step',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
	
GO



/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_Step]    Script Date: 12/18/2013 15:00:03 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_upd_Step]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_upd_Step]
GO


/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_Step]    Script Date: 12/18/2013 15:00:03 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*
	Author:				TR
	Date:				29/06/2009 15:00

	Description:		Update record in PROCEDURE_Step

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_upd_Step]
---------Parameters----------
@StepID int,
@Name nvarchar(200),
@UserName nvarchar(16) = NULL,
@Complete datetime = NULL,
@CheckFrequency nvarchar(16) = NULL,
@CheckFrequencyMins int = NULL,
@CheckFirstOfDay datetime = NULL,
@CheckFinish DATETIME = NULL,
@DayNo INT = NULL,
@Month NVARCHAR(16) = NULL,
@DayOfWeek VARCHAR(150) = NULL,
@Picture image = NULL,
@WeekNo INT = NULL,
@Comment NVARCHAR(1024) = NULL,
@Active bit = NULL,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

DECLARE @ObjectType INT
DECLARE @EventID INT
DECLARE @ObjectID INT

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF @StepID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		StepID
							FROM		PROCEDURE_Step				WITH (READUNCOMMITTED)
							WHERE 		StepID = @StepID
							)
			BEGIN
				SET @ErrorMsg = '##01Table PROCEDURE_Step - Could not find record ' + CAST(@StepID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END			
		
			IF @CheckFrequency = 'Minutes'			        
				BEGIN
					SET @DayOfWeek = NULL SET @DayNo = NULL SET @Month = NULL SET @WeekNo = NULL
				END
			ELSE IF @CheckFrequency = 'Hourly'				
				BEGIN
					SET @DayOfWeek = NULL SET @DayNo = NULL SET @Month = NULL SET @WeekNo = NULL
				END
			ELSE IF @CheckFrequency = 'Daily'				
				BEGIN
					--SET @DayOfWeek = NULL SET @DayNo = NULL SET @Month = NULL
					SET @DayNo = NULL SET @Month = NULL SET @WeekNo = NULL
				END
			ELSE IF @CheckFrequency = 'Weekly'				
				BEGIN
					SET @DayNo = NULL SET @Month = NULL SET @CheckFrequencyMins = NULL SET @CheckFinish = NULL
				END
			ELSE IF @CheckFrequency = 'Monthly'			
				BEGIN
					SET @DayOfWeek = NULL SET @Month = NULL SET @CheckFrequencyMins = NULL SET @CheckFinish = NULL	SET @WeekNo = NULL									
				END
			ELSE IF @CheckFrequency = 'Yearly'			
				BEGIN					
					SET @CheckFrequencyMins = NULL SET @CheckFinish = NULL SET @DayOfWeek = NULL SET @WeekNo = NULL
				END

			UPDATE	PROCEDURE_Step												WITH (ROWLOCK)
			SET 	Name = @Name,
					CheckFrequency = @CheckFrequency,
					CheckFrequencyMins = @CheckFrequencyMins,
					CheckFirstOfDay = @CheckFirstOfDay,
					CheckFinish = @CheckFinish,
					DayOfWeek = @DayOfWeek,
					DayNo = @DayNo,
					WeekNo = @WeekNo,
					Comment = @Comment,
					[Month] = @Month,
					UpdatedOn = GETDATE()						

			WHERE	StepID = @StepID	

			IF ISNULL(@CheckFrequency,'') <> ''
				BEGIN
					SELECT	@EventID = EventID
					FROM	dbo.EVENT_Obj
					WHERE	ObjectID = @StepID AND ObjectTypeID IS NULL
					
					IF ISNULL(@EventID,0) = 0
						BEGIN
							INSERT INTO dbo.EVENT_Obj
									( Barcode ,
									  LastCheckDate ,
									  NextCheckDueDate ,
									  CheckFrequency ,
									  CheckFrequencyMins ,
									  CheckFirstOfDay ,
									  CheckFinish,
									  ObjectTypeID,
									  ObjectID,
									  Description,
									  DayOfWeek,
									  [Month],
									  DayNo,
									  WeekNo,
									  Comment											  
									)
							VALUES  ( NULL,
									  NULL,
									  @CheckFirstOfDay,
									  @CheckFrequency,
									  @CheckFrequencyMins,
									  @CheckFirstOfDay,
									  @CheckFinish,
									  NULL,
									  @StepID,
									  @Name,
							          @DayOfWeek,
							          @Month,
							          @DayNo,
							          @WeekNo,
							          @Comment								  
									)
						END
					ELSE
						BEGIN
							UPDATE	dbo.EVENT_Obj
							SET		NextCheckDueDate = @CheckFirstOfDay,
									CheckFrequency = @CheckFrequency,
									CheckFirstOfDay = @CheckFirstOfDay,
									CheckFinish = @CheckFinish,
									CheckFrequencyMins = @CheckFrequencyMins,
									DayOfWeek = @DayOfWeek,
									DayNo = @DayNo,
									WeekNo = @WeekNo,
									Comment = @Comment,
									[Month] = @Month																										
							WHERE	EventID = @EventID																		
						END
		END
	ELSE	
		BEGIN
			DELETE	dbo.EVENT_Obj
			WHERE	ObjectID = @StepID AND ObjectTypeID IS NULL
			
			DELETE	dbo.RANGER_Exception
			WHERE	ObjectID = @StepID AND ExceptionType = 1 AND Resolved IS NULL
		END
			

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@StepID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_upd_Step',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1


GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_ins_Set]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_ins_Set]
GO


/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_ins_Set]    Script Date: 04/18/2013 02:05:37 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
	Author:				SKD
	Date:				22/09/2014 18:23

	Description:		Insert record in PROCEDURE_SET

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_ins_Set]
---------Parameters----------
@Name nvarchar(100),
@RecordID int OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int

DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RecordID = 0
	SET @Success = 0
	SET @ErrorMsg = ''
	IF @ErrorMsg = ''
		
	/************
	INSERT RECORD
	************/
		INSERT INTO	PROCEDURE_Set												WITH (ROWLOCK)
		(
		Name, CreateDate
		)
		VALUES
		(
		@Name, GETDATE()
		)

			SET @RecordID = SCOPE_IDENTITY()
			SET @Success = 1
	RETURN 1
		
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_ins_Set',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO



IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_upd_Set]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_upd_Set]
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_Set]    Script Date: 06/30/2012 17:43:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				SKD
	Date:				22/09/2014 19:27

	Description:		Update record from PROCEDURE_SET

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/

CREATE PROCEDURE [dbo].[PROCEDURE_usp_upd_Set]
---------Parameters----------
@ID INT,
@Name nvarchar(100),
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg = ''

	IF ISNULL(@ID,0) <> 0
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		ID
							FROM		PROCEDURE_Set				WITH (READUNCOMMITTED)
							WHERE 		ID = @ID
							)
			BEGIN
				SET @ErrorMsg = '##01Table PROCEDURE_Set - Could not find record ' + @ID
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			/************
			UPDATE RECORD
			************/
			UPDATE	PROCEDURE_Set												WITH (ROWLOCK)

			SET 	Name = @Name

			WHERE	ID = @ID
			
			
			UPDATE	PROCEDURE_Step SET SetId = NULL WHERE SetId = @ID

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + @ID
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_upd_Set',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_sel_Set]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_sel_Set]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				Titu(Jr)
	Date:				23/09/2014 19:27

	Description:		Select record from PROCEDURE_SET

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_sel_Set]
---------Parameters----------
@ID INT = NULL

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	--SET @Success = 0
	SET @ErrorMsg = ''
	
	IF @ID IS NULL
		SELECT ID, Name, CreateDate FROM PROCEDURE_Set
	ELSE
		SELECT ID, Name, CreateDate FROM PROCEDURE_Set WHERE 	ID = @ID
	
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_sel_Set',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_del_Set]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_del_Set]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				SKD
	Date:				22/09/2014 19:27

	Description:		Delete record from PROCEDURE_SET

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_del_Set]
---------Parameters----------
@ID INT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg = ''

	IF ISNULL(@ID,0) <> 0
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		ID
							FROM		PROCEDURE_Set	WITH (READUNCOMMITTED)
							WHERE 		ID = @ID
							)
			BEGIN
				SET @ErrorMsg = '##01Table [PROCEDURE_Set] - Could not find record ' + @ID
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END
			
			UPDATE Procedure_Step SET SetID = NULL WHERE SetID = @ID

			DELETE	PROCEDURE_Set				WITH (ROWLOCK)
			WHERE 	ID = @ID

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + @ID
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_sel_Set',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_upd_SetStep]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_upd_SetStep]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				Titu(jr)
	Date:				23/09/2014 19:27

	Description:		Update record from PROCEDURE_SET

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/

CREATE PROCEDURE [dbo].[PROCEDURE_usp_upd_SetStep]
---------Parameters----------
@SetID INT,
@StepID INT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg = ''
	
	UPDATE Procedure_Step SET SetID = @SetID WHERE StepId = @StepID
		
	SET @Success = 1
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = '[PROCEDURE_usp_upd_SetStep]',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
GO


/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_ins_Job]    Script Date: 05/08/2013 20:53:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_ins_Job]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_ins_Job]
GO


/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_ins_Job]    Script Date: 05/08/2013 20:53:50 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[PROCEDURE_usp_ins_Job]
---------Parameters----------
@Name nvarchar(50),
@CompleteDate DATETIME,
@ProcedureType INT = NULL,
@DeviceID NVARCHAR(512),
@StepID INT = NULL,
@GoodInNo NVARCHAR(20) = NULL,
@UserName NVARCHAR(16) = NULL,
@Verified BIT = NULL,
@VerifiyNeeded BIT = NULL,
@RecordID int OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int

DECLARE @ErrorParamsData nvarchar (1024) 

--DECLARE @GoodInNo int
DECLARE @GoodInNoPrefix nvarchar(2)

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RecordID = 0
	SET @Success = 0
	SET @ErrorMsg = ''


	/************
	INSERT RECORD
	************/	
	INSERT INTO	PROCEDURE_Job												WITH (ROWLOCK)
			(
			[Name], CompleteDate, TypeProcedure, DeviceID, StepID, GoodInNo, UserName,Verified,VerifiyNeeded,UpdatedOn
			)
	VALUES
			(
			@Name, @CompleteDate, @ProcedureType, @DeviceID, @StepID, @GoodInNo, @UserName,@Verified,@VerifiyNeeded,GETDATE()
			)

		SET @RecordID = SCOPE_IDENTITY()
		IF @ProcedureType = 1 AND @GoodInNo IS NULL
		BEGIN
			SELECT @GoodInNoPrefix = RIGHT(YEAR(GETDATE()),1)
			SELECT @GoodInNo = ISNULL(MAX(CONVERT(int,RIGHT(GoodInNo,4))),0)+1 from PROCEDURE_Job where GoodInNo is not null and TypeProcedure=1 AND LEFT(GoodInNo,1) = @GoodInNoPrefix
			UPDATE PROCEDURE_Job SET GoodInNo = @GoodInNoPrefix + RIGHT('000'+ CONVERT(nvarchar(5), @GoodInNo),4) WHERE JobID = @RecordID 
		END
		--Update LastRecordedDate field on PROCEDURE_Step		
		update PROCEDURE_Step set LastRecordedDate=@CompleteDate where StepID=@StepID
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_ins_Job',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1



GO


/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_Job]    Script Date: 12/11/2013 14:40:04 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_upd_Job]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_upd_Job]
GO


/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_Job]    Script Date: 12/11/2013 14:40:04 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
	Author:				TR
	Date:				29/06/2009 11:16

	Description:		Update record in PROCEDURE_Job

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_upd_Job]
---------Parameters----------
@JobID int,
@Name nvarchar(50),
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF @JobID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		JobID
							FROM		PROCEDURE_Job				WITH (READUNCOMMITTED)
							WHERE 		JobID = @JobID
							)
			BEGIN
				SET @ErrorMsg = '##01Table PROCEDURE_Job - Could not find record ' + CAST(@JobID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			/************
			UPDATE RECORD
			************/
			UPDATE	PROCEDURE_Job												WITH (ROWLOCK)

			SET 	[Name] = @Name , UpdatedOn = GETDATE()

			WHERE	JobID = @JobID

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@JobID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_upd_Job',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO




IF  NOT EXISTS(Select * FROM PROCEDURE_UserDefinedList WHERE Name='Default Printer')

BEGIN
DECLARE @ReturnRecordID INT
DECLARE @Return BIT
DECLARE @CurrentDate DATETIME

SET @ReturnRecordID = 0
SET @Return = 0
SET @CurrentDate = GETDATE()

EXEC	PROCEDURE_usp_ins_UserDefinedList	@Name = 'Default Printer',
											@Active = 1,
											@CheckDuplicates = 1,
											@CorrectiveAction = 0,
											@SignatureRequired = 0,
											@AssignUser = 0,
											@CreatedBy = NULL,
											@CreatedDate = @CurrentDate,
											@RecordID = @ReturnRecordID OUTPUT,
											@Success = @Return OUTPUT	
END
																	
GO												




---Modify [PROCEDURE_usp_upd_Step_Inactive] SP



/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_Step_Inactive]    Script Date: 07/09/2012 12:12:29 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_upd_Step_Inactive]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_upd_Step_Inactive]
GO



/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_Step_Inactive]    Script Date: 07/09/2012 12:12:29 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[PROCEDURE_usp_upd_Step_Inactive]
---------Parameters----------
AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @ErrorParamsData nvarchar (1024) 
DECLARE @Success bit 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
		
	/****************************************************************
	Inactive PROCEDURE_Step when
	1. Expire date elapsed and Start date not elapsed and currently Active
	2. Review date elapsed and currently Active
	*****************************************************************/
	UPDATE	PROCEDURE_Step	WITH (ROWLOCK)	
	SET Active = 0, UpdatedOn = GETDATE() 
	WHERE Active = 1 AND (ReviewDate < GETDATE() OR (ExpireOn < GETDATE() AND (StartOn IS NULL OR StartOn > GETDATE())))
	
	/****************************************************************
	Active PROCEDURE_Step when
	1. currently InActive and Review date not elapsed and Start date elapsed
	*****************************************************************/
	UPDATE	PROCEDURE_Step	WITH (ROWLOCK)	
	SET Active = 1 , UpdatedOn = GETDATE() 
	WHERE Active = 0 AND (ReviewDate IS NULL OR ReviewDate > GETDATE()) AND StartOn < GETDATE()
	
	
	SET @Success = 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	IF @Success = 0 AND @ErrorMsg <> ''
		EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_upd_Step_Inactive',
													@Msg = @ErrorMsg,
													@ParamsData = @ErrorParamsData 

GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_Step_InactiveOnStartedOn]    Script Date: 07/09/2012 12:12:29 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_upd_Step_InactiveOnStartedOn]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_upd_Step_InactiveOnStartedOn]
GO



/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_Step_InactiveOnStartedOn]    Script Date: 07/09/2012 12:12:29 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[PROCEDURE_usp_upd_Step_InactiveOnStartedOn]
---------Parameters----------
AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @ErrorParamsData nvarchar (1024) 
DECLARE @Success bit 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	DECLARE @StepTotals TABLE ( StepID int )
	
	INSERT INTO @StepTotals(StepID)
	SELECT StepID FROM PROCEDURE_Step
	WHERE StartOn IS NOT NULL AND StartOn < GETDATE()  AND Active = 0
	
	/************
	UPDATE RECORD
	************/
	UPDATE	PROCEDURE_Step	WITH (ROWLOCK)	
	SET Active = 1 , UpdatedOn = GETDATE() , StartOn = NULL
	WHERE StepID IN (SELECT StepID FROM @StepTotals)

	
	SET @Success = 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	IF @Success = 0 AND @ErrorMsg <> ''
		EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_upd_Step_InactiveOnStartedOn',
													@Msg = @ErrorMsg,
													@ParamsData = @ErrorParamsData 

GO



/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_sel_Step]    Script Date: 12/10/2012 19:18:44 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_sel_Step]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_sel_Step]
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_sel_Step]    Script Date: 12/10/2012 19:18:44 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






/*
	Author:				TR
	Date:				29/06/2009 15:00

	Description:		Select records from PROCEDURE_Step

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_sel_Step]
---------Parameters----------
@Name nvarchar(32) = NULL,
@SQL_WHERE nvarchar(4000) = NULL,
@UserName nvarchar(16) = ''

AS

DECLARE @SQL_STRING nvarchar (4000)
DECLARE @PermissionOnDepartments NVARCHAR(MAX)

SET NOCOUNT ON
SET DATEFORMAT dmy
set @PermissionOnDepartments=''	
	
	IF ISNULL(@UserName,'') <> ''
		SELECT @PermissionOnDepartments=PermissionOnDepartments from USER_User where UserName=@UserName

	IF ISNULL(@Name,'') <> '' 
		/**************************
			RETURN SPECIFIC RECORDS
		**************************/
		BEGIN
			if @PermissionOnDepartments=''
			begin 
				SELECT ps.StepID, ps.Name, ps.UserName, ps.Complete, ps.LastCheckDate, ps.NextCheckDueDate, ps.CheckFrequency, ps.CheckFrequencyMins, ps.CheckFirstOfDay, ps.Picture, ps.Active, ps.CheckFinish, ps.DayOfWeek, ps.DayNo, ps.Month, ps.CriticalProcedure, ps.MonthStep, ps.DayStep, ps.UserIDList , ps.ExpireOn, ps.SequencePosition, ps.WeekNo , ps.CorrespondingProcedureID ,ps.Comment ,ps.IsScoreProcedure, ps.TotalMinimumValue, ps.TotalMaximumValue,ps.AssigneeIDList, ps.CollectedIDList, ps.ReviewDate, ps.DocRefNo, ps.IssueNo, ps.IssueDate,r.RoleDescription AS Department,ps.Tolerance,ps.StartOn, ps.Author, ps.AuthorText, ps.RevisionNo,ps.NeedToVerify, ps.SetId
				FROM PROCEDURE_Step ps	WITH (READUNCOMMITTED) 
				LEFT join USER_User u on ps.UserName=u.UserName 
				LEFT JOIN USER_Role r ON r.RoleID = u.RoleID
				WHERE Name = @Name
				ORDER BY ps.SequencePosition ASC
				RETURN
			 end 
			 else 
			 begin
				SELECT ps.StepID, ps.Name, ps.UserName, ps.Complete, ps.LastCheckDate, ps.NextCheckDueDate, ps.CheckFrequency, ps.CheckFrequencyMins, ps.CheckFirstOfDay, ps.Picture, ps.Active, ps.CheckFinish, ps.DayOfWeek, ps.DayNo, ps.Month, ps.CriticalProcedure, ps.MonthStep, ps.DayStep, ps.UserIDList , ps.ExpireOn, ps.SequencePosition, ps.WeekNo , ps.CorrespondingProcedureID ,ps.Comment ,ps.IsScoreProcedure, ps.TotalMinimumValue, ps.TotalMaximumValue,ps.AssigneeIDList, ps.CollectedIDList, ps.ReviewDate, ps.DocRefNo, ps.IssueNo, ps.IssueDate,r.RoleDescription AS Department,ps.Tolerance,ps.StartOn, ps.Author, ps.AuthorText, ps.RevisionNo,ps.NeedToVerify, ps.SetId
				FROM PROCEDURE_Step ps	WITH (READUNCOMMITTED) 
				inner join USER_User u on ps.UserName=u.UserName 
				INNER JOIN USER_Role r ON r.RoleID = u.RoleID
				WHERE Name = @Name
				and r.RoleID in (SELECT FieldValue FROM dbo.fnSplit(',', @PermissionOnDepartments))
				ORDER BY 	ps.SequencePosition ASC			 
			 	RETURN
			 end 


		END

	IF ISNULL(@SQL_WHERE,'') <> '' 
		/*********************************************
			SELECT RECORDS ACCORDING TO WHERE CRITERIA
		*********************************************/
		BEGIN
		if @PermissionOnDepartments=''
			begin 
				SET @SQL_STRING = 'SELECT ps.StepID, ps.Name, ps.UserName, ps.Complete, ps.LastCheckDate, ps.NextCheckDueDate, ps.CheckFrequency, ps.CheckFrequencyMins, ps.CheckFirstOfDay, ps.Picture, ps.Active, ps.CheckFinish, ps.DayOfWeek, ps.DayNo, ps.Month, ps.CriticalProcedure, ps.MonthStep, ps.DayStep, ps.UserIDList , ps.ExpireOn, ps.SequencePosition, ps.WeekNo , ps.CorrespondingProcedureID ,ps.Comment ,ps.IsScoreProcedure, ps.TotalMinimumValue, ps.TotalMaximumValue,ps.AssigneeIDList, ps.CollectedIDList, ps.ReviewDate, ps.DocRefNo, ps.IssueNo, ps.IssueDate,r.RoleDescription AS Department,ps.Tolerance,ps.StartOn, ps.Author, ps.AuthorText, ps.RevisionNo, ps.NeedToVerify, ps.SetId	 '

				SET @SQL_STRING = @SQL_STRING + 'FROM PROCEDURE_Step ps	WITH (READUNCOMMITTED) '
				SET @SQL_STRING = @SQL_STRING + 'LEFT join USER_User u on ps.UserName=u.UserName LEFT JOIN USER_Role r ON r.RoleID = u.RoleID '
				SET @SQL_STRING = @SQL_STRING + @SQL_WHERE
				SET @SQL_STRING = @SQL_STRING + 'ORDER BY ps.SequencePosition ASC'			
				EXEC(@SQL_STRING)

				RETURN
			end 
			else 
			begin
				SET @SQL_STRING = 'SELECT ps.StepID, ps.Name, ps.UserName, ps.Complete, ps.LastCheckDate, ps.NextCheckDueDate, ps.CheckFrequency, ps.CheckFrequencyMins, ps.CheckFirstOfDay, ps.Picture, ps.Active, ps.CheckFinish, ps.DayOfWeek, ps.DayNo, ps.Month, ps.CriticalProcedure, ps.MonthStep, ps.DayStep, ps.UserIDList , ps.ExpireOn, ps.SequencePosition, ps.WeekNo , ps.CorrespondingProcedureID ,ps.Comment ,ps.IsScoreProcedure, ps.TotalMinimumValue, ps.TotalMaximumValue,ps.AssigneeIDList, ps.CollectedIDList, ps.ReviewDate, ps.DocRefNo, ps.IssueNo, ps.IssueDate,r.RoleDescription AS Department,ps.Tolerance,ps.StartOn, ps.Author, ps.AuthorText, ps.RevisionNo,ps.NeedToVerify,ps.SetId	 '
				SET @SQL_STRING = @SQL_STRING + 'FROM PROCEDURE_Step ps	WITH (READUNCOMMITTED) '
				SET @SQL_STRING = @SQL_STRING + 'inner join USER_User u on ps.UserName=u.UserName INNER JOIN USER_Role r ON r.RoleID = u.RoleID '
				SET @SQL_STRING = @SQL_STRING + @SQL_WHERE
				SET @SQL_STRING = @SQL_STRING + 'and r.RoleID in ('+@PermissionOnDepartments+')'
				SET @SQL_STRING = @SQL_STRING + 'ORDER BY SequencePosition ASC'
				EXEC(@SQL_STRING)

				RETURN
			 
			END
		END

	/*********************
		RETURN ALL RECORDS
	*********************/
	
	BEGIN
		if @PermissionOnDepartments=''
		begin 
			SELECT ps.StepID, ps.Name, ps.UserName, ps.Complete, ps.LastCheckDate, ps.NextCheckDueDate, ps.CheckFrequency, ps.CheckFrequencyMins, ps.CheckFirstOfDay, ps.Picture, ps.Active, ps.CheckFinish, ps.DayOfWeek, ps.DayNo, ps.Month, ps.CriticalProcedure, ps.MonthStep, ps.DayStep, ps.UserIDList , ps.ExpireOn, ps.SequencePosition, ps.WeekNo , ps.CorrespondingProcedureID ,ps.Comment ,ps.IsScoreProcedure, ps.TotalMinimumValue, ps.TotalMaximumValue,ps.AssigneeIDList,ps.CollectedIDList,ps.ReviewDate, ps.DocRefNo, ps.IssueNo, ps.IssueDate,r.RoleDescription AS Department,ps.Tolerance,ps.StartOn, ps.Author, ps.AuthorText, ps.RevisionNo,ps.NeedToVerify,ps.SetId
			FROM PROCEDURE_Step ps	WITH (READUNCOMMITTED) 
			LEFT join USER_User u on ps.UserName=u.UserName LEFT JOIN USER_Role r ON r.RoleID = u.RoleID				
			ORDER BY 	ps.SequencePosition ASC
			RETURN
		END
		ELSE
		begin 
			SELECT ps.StepID, ps.Name, ps.UserName, ps.Complete, ps.LastCheckDate, ps.NextCheckDueDate, ps.CheckFrequency, ps.CheckFrequencyMins, ps.CheckFirstOfDay, ps.Picture, ps.Active, ps.CheckFinish, ps.DayOfWeek, ps.DayNo, ps.Month, ps.CriticalProcedure, ps.MonthStep, ps.DayStep, ps.UserIDList , ps.ExpireOn, ps.SequencePosition, ps.WeekNo , ps.CorrespondingProcedureID ,ps.Comment ,ps.IsScoreProcedure, ps.TotalMinimumValue, ps.TotalMaximumValue,ps.AssigneeIDList,ps.CollectedIDList,ps.ReviewDate, ps.DocRefNo, ps.IssueNo, ps.IssueDate, ps.IssueDate,r.RoleDescription AS Department,ps.Tolerance,ps.StartOn, ps.Author, ps.AuthorText, ps.RevisionNo,ps.NeedToVerify,ps.SetId
			FROM PROCEDURE_Step ps	WITH (READUNCOMMITTED) 
			inner join USER_User u on ps.UserName=u.UserName INNER JOIN USER_Role r ON r.RoleID = u.RoleID 
			WHERE r.RoleID in (SELECT FieldValue FROM dbo.fnSplit(',', @PermissionOnDepartments))
			ORDER BY ps.SequencePosition ASC			 
		 	RETURN
		END
	END


GO








/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_Step_StartOn]    Script Date: 3/19/2014 1:32:38 PM ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_upd_Step_StartOn]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_upd_Step_StartOn]
GO


/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_Step_StartOn]    Script Date: 3/19/2014 1:32:38 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
	Author:				Sumon
	Date:				26/3/2014

	Description:		Update record in PROCEDURE_Step

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_upd_Step_StartOn]
---------Parameters----------
@StepID int,
@StartOn DateTime = NULL,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 


SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF @StepID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		StepID
							FROM		PROCEDURE_Step				WITH (READUNCOMMITTED)
							WHERE 		StepID = @StepID
							)
			BEGIN
				SET @ErrorMsg = '##01Table PROCEDURE_Step - Could not find record ' + CAST(@StepID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END
			
			UPDATE	PROCEDURE_Step												WITH (ROWLOCK)
			SET 	StartOn = @StartOn,
					UpdatedOn = GETDATE()
			WHERE	StepID = @StepID	

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@StepID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_upd_Step_StartOn',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1


GO







/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_sel_Role]    Script Date: 11/16/2012 20:07:49 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_sel_Role]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_sel_Role]
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_sel_Role]    Script Date: 11/16/2012 20:07:49 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[PROCEDURE_usp_sel_Role]

---------Parameters----------

AS


BEGIN
	
	SELECT	RoleID, RoleDescription, 0 As 'Select', 0 AS SelectCollectedOnPDA
	FROM	dbo.USER_Role
	WHERE IsActive = 1
END

GO
/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_sel_User]    Script Date: 11/16/2012 21:03:08 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_sel_User]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_sel_User]
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_sel_User]    Script Date: 11/16/2012 21:03:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[PROCEDURE_usp_sel_User]

---------Parameters----------

AS


BEGIN
	
	SELECT	uu.UserName, uu.FirstName, uu.LastName, 0 , ur.RoleID,ur.RoleDescription, 0 AS SelectCollectedOnPDA 
	FROM	dbo.USER_User uu
	INNER JOIN dbo.User_Role ur
	ON ur.RoleID = uu.RoleID
	
END

GO
/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_Assignee]    Script Date: 11/16/2012 21:06:20 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_Assignee]    Script Date: 11/16/2012 21:06:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_upd_Assignee]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_upd_Assignee]
GO

CREATE PROCEDURE [dbo].[PROCEDURE_usp_upd_Assignee]

---------Parameters----------
@StepID INT,
@AssigneeIDList NVARCHAR(1024),
@CollectedIDList NVARCHAR(1024),
@Success bit OUTPUT

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)

BEGIN TRY
	SET @ErrorMsg = ''
	SET @Success = 0


	IF ISNULL(@AssigneeIDList,'') <> ''
		BEGIN
			UPDATE dbo.PROCEDURE_Step
			SET		AssigneeIDList = @AssigneeIDList
			WHERE	StepID = @StepID
		END
	ELSE
		BEGIN
		
			UPDATE	dbo.PROCEDURE_Step
			SET	AssigneeIDList = NULL
			WHERE	StepID = @StepID
			
		END	
		
	IF ISNULL(@CollectedIDList,'') <> ''
		BEGIN
			UPDATE dbo.PROCEDURE_Step
			SET		CollectedIDList = @CollectedIDList
			WHERE	StepID = @StepID
		END
	ELSE
		BEGIN
		
			UPDATE	dbo.PROCEDURE_Step
			SET	CollectedIDList = NULL
			WHERE	StepID = @StepID
			
		END			
			
	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) <> '##'
		BEGIN	
			/*SET @ErrorParamsData =	'@Barcode = ' + @Barcode + ', @Pallet_No = ' +  CAST(@Pallet_No AS nvarchar(8))  + */

			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[PROCEDURE_usp_upd_Assignee]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1



GO


/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_Copy_Procedure]    Script Date: 09/26/2012 17:35:03 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_upd_Copy_Procedure]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_upd_Copy_Procedure]
GO





/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_search_Step]    Script Date: 12/10/2012 19:55:43 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_search_Step]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_search_Step]
GO



/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_search_Step]    Script Date: 12/10/2012 19:55:43 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





/*
	Author:				MR
	Date:				12/10/2011 23:30

	Description:		Search records from PROCEDURE_Step

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_search_Step]
---------Parameters----------
@Keyword nvarchar(64) = NULL,
@SearchField nvarchar(32) = NULL,
@UserName nvarchar(16) = ''


AS

DECLARE @SQL_STRING nvarchar (MAX)
DECLARE @PermissionOnDepartments NVARCHAR(MAX)


SET NOCOUNT ON
SET DATEFORMAT dmy
set @PermissionOnDepartments=''	

	select @PermissionOnDepartments=PermissionOnDepartments from USER_User where UserName=@UserName
	IF ISNULL(@Keyword,'') <> '' 
		BEGIN
		/*********************************************
			SELECT RECORDS ACCORDING TO SEARCH FIELD AND KEYWORD
		*********************************************/
			IF(@SearchField = 'All')
				BEGIN
				SET @SQL_STRING = 'SELECT StepID, [Name], PROCEDURE_Step.UserName, Complete, LastCheckDate, NextCheckDueDate, CheckFrequency, CheckFrequencyMins, CheckFirstOfDay, [Picture], PROCEDURE_Step.Active, CheckFinish, DayOfWeek, DayNo, [Month], CriticalProcedure, MonthStep, DayStep, UserIDList , ExpireOn, SequencePosition, WeekNo, Comment, USER_Role.RoleDescription AS Department, Comment,
				    AssigneeIDList, CollectedIDList, Tolerance, StartOn, Author, AuthorText, RevisionNo,  NeedToVerify, SetId   
					PROCEDURE_Step.CorrespondingProcedureID, PROCEDURE_Step.IsScoreProcedure, PROCEDURE_Step.TotalMinimumValue, PROCEDURE_Step.TotalMaximumValue, PROCEDURE_Step.TypeProcedure, PROCEDURE_Step.ReviewDate, PROCEDURE_Step.DocRefNo, PROCEDURE_Step.IssueNo, PROCEDURE_Step.IssueDate
					FROM PROCEDURE_Step
					LEFT JOIN USER_User ON PROCEDURE_Step.UserName = USER_User.UserName
					LEFT JOIN USER_Role ON USER_Role.RoleID = USER_User.RoleID WHERE '
					IF(@PermissionOnDepartments<>'')						
							SET @SQL_STRING=@SQL_STRING+ 'USER_Role.RoleID in ('+@PermissionOnDepartments+') and( '							 					
					SET @SQL_STRING=@SQL_STRING+'PROCEDURE_Step.Name LIKE ''%'+@Keyword+'%'' OR PROCEDURE_Step.Comment LIKE ''%'+@Keyword+'%''
					OR
					PROCEDURE_Step.StepID IN(
						SELECT distinct PR.StepID
						FROM PROCEDURE_Step PR
						LEFT JOIN PROCEDURE_StepDetail sd ON PR.StepID = sd.StepID
						LEFT JOIN vwAllObjects ON sd.DefaultValue = vwAllObjects.Barcode
						LEFT JOIN PROCEDURE_JobDetail jd ON sd.StepDetailID = jd.StepDetailID
						LEFT JOIN PROCEDURE_UserDefinedList udl ON sd.CorrectActionListID = udl.ListID AND udl.CorrectiveAction = 1
						WHERE sd.Description LIKE ''%'+@Keyword+'%'' 
						OR vwAllObjects.Description LIKE ''%'+@Keyword+'%'' 
						OR jd.Comments LIKE ''%'+@Keyword+'%'' 
						OR udl.Name LIKE ''%'+@Keyword+'%'')'
					IF(@PermissionOnDepartments<>'')
						SET @SQL_STRING=@SQL_STRING+ ')'	
					END			
			ELSE IF(@SearchField = 'Procedure Name')
				BEGIN
					SET @SQL_STRING = 'SELECT PR.StepID, PR.[Name], PR.UserName, PR.Complete, PR.LastCheckDate, PR.NextCheckDueDate, PR.CheckFrequency, PR.CheckFrequencyMins, PR.CheckFirstOfDay, PR.[Picture], PR.Active, PR.CheckFinish, PR.DayOfWeek, PR.DayNo, PR.[Month], PR.CriticalProcedure, PR.MonthStep, PR.DayStep, PR.UserIDList, PR.ExpireOn, PR.SequencePosition, PR.WeekNo, USER_Role.RoleDescription AS Department, PR.Comment,
					    PR.AssigneeIDList, PR.CollectedIDList, PR.Tolerance, PR.StartOn, PR.Author, PR.AuthorText, PR.RevisionNo, PR.NeedToVerify, PR.SetId,
						PR.CorrespondingProcedureID, PR.IsScoreProcedure, PR.TotalMinimumValue, PR.TotalMaximumValue, PR.TypeProcedure, PR.ReviewDate, PR.DocRefNo, PR.IssueNo, PR.IssueDate
						FROM PROCEDURE_Step PR
						LEFT JOIN USER_User ON PR.UserName = USER_User.UserName
						LEFT JOIN USER_Role ON USER_Role.RoleID = USER_User.RoleID
						WHERE PR.Name LIKE ''%'+@Keyword+'%'''
					IF(@PermissionOnDepartments<>'')						
							SET @SQL_STRING=@SQL_STRING+ ' AND USER_Role.RoleID in ('+@PermissionOnDepartments+') '	
					END
			ELSE IF(@SearchField = 'Step Description')
				BEGIN
					SET @SQL_STRING = 'SELECT DISTINCT PR.StepID, PR.[Name], PR.UserName, PR.Complete, PR.LastCheckDate, PR.NextCheckDueDate, PR.CheckFrequency, PR.CheckFrequencyMins, PR.CheckFirstOfDay, PR.Active, PR.CheckFinish, PR.DayOfWeek, PR.DayNo, PR.[Month], PR.CriticalProcedure, PR.MonthStep, PR.DayStep, PR.UserIDList, PR.ExpireOn, PR.SequencePosition, PR.WeekNo, USER_Role.RoleDescription AS Department, PR.Comment,
						PR.AssigneeIDList, PR.CollectedIDList, PR.Tolerance, PR.StartOn, PR.Author, PR.AuthorText, PR.RevisionNo, PR.NeedToVerify, PR.SetId, 
						PR.CorrespondingProcedureID, PR.IsScoreProcedure, PR.TotalMinimumValue, PR.TotalMaximumValue, PR.TypeProcedure, PR.ReviewDate, PR.DocRefNo, PR.IssueNo, PR.IssueDate
						FROM PROCEDURE_Step PR
						INNER JOIN PROCEDURE_StepDetail ON PR.StepID = PROCEDURE_StepDetail.StepID
						LEFT JOIN USER_User ON PR.UserName = USER_User.UserName
						LEFT JOIN USER_Role ON USER_Role.RoleID = USER_User.RoleID
						WHERE PROCEDURE_StepDetail.Description LIKE ''%'+@Keyword+'%'''
						IF(@PermissionOnDepartments<>'')						
							SET @SQL_STRING=@SQL_STRING+ ' AND USER_Role.RoleID in ('+@PermissionOnDepartments+') '
				END
			ELSE IF(@SearchField = 'Audit Item')
				BEGIN
					SET @SQL_STRING = 'SELECT DISTINCT PR.StepID, PR.[Name], PR.UserName, PR.Complete, PR.LastCheckDate, PR.NextCheckDueDate, PR.CheckFrequency, PR.CheckFrequencyMins, PR.CheckFirstOfDay, PR.Active, PR.CheckFinish, PR.DayOfWeek, PR.DayNo, PR.[Month], PR.CriticalProcedure, PR.MonthStep, PR.DayStep, PR.UserIDList, PR.ExpireOn, PR.SequencePosition, PR.WeekNo, USER_Role.RoleDescription AS Department, PR.Comment,
						PR.AssigneeIDList, PR.CollectedIDList, PR.Tolerance, PR.StartOn, PR.Author, PR.AuthorText, PR.RevisionNo, PR.NeedToVerify, PR.SetId,
						PR.CorrespondingProcedureID, PR.IsScoreProcedure, PR.TotalMinimumValue, PR.TotalMaximumValue, PR.TypeProcedure, PR.ReviewDate, PR.DocRefNo, PR.IssueNo, PR.IssueDate
						FROM PROCEDURE_Step PR
						INNER JOIN PROCEDURE_StepDetail ON PR.StepID = PROCEDURE_StepDetail.StepID
						INNER JOIN vwAllObjects ON PROCEDURE_StepDetail.DefaultValue = vwAllObjects.Barcode
						LEFT JOIN USER_User ON PR.UserName = USER_User.UserName
						LEFT JOIN USER_Role ON USER_Role.RoleID = USER_User.RoleID
						WHERE vwAllObjects.Description LIKE ''%'+@Keyword+'%'''
						IF(@PermissionOnDepartments<>'')						
								SET @SQL_STRING=@SQL_STRING+ ' AND USER_Role.RoleID in ('+@PermissionOnDepartments+') '
				END
			ELSE IF(@SearchField = 'Comments')
				BEGIN
					SET @SQL_STRING = 'SELECT DISTINCT PR.StepID, PR.[Name], PR.UserName, PR.Complete, PR.LastCheckDate, PR.NextCheckDueDate, PR.CheckFrequency, PR.CheckFrequencyMins, PR.CheckFirstOfDay, PR.Active, PR.CheckFinish, PR.DayOfWeek, PR.DayNo, PR.[Month], PR.CriticalProcedure, PR.MonthStep, PR.DayStep, PR.UserIDList, PR.ExpireOn, PR.SequencePosition, PR.WeekNo, USER_Role.RoleDescription AS Department, PR.Comment, 
						PR.AssigneeIDList, PR.CollectedIDList, PR.Tolerance, PR.StartOn, PR.Author, PR.AuthorText, PR.RevisionNo, PR.NeedToVerify, PR.SetId,
						PR.CorrespondingProcedureID, PR.IsScoreProcedure, PR.TotalMinimumValue, PR.TotalMaximumValue, PR.TypeProcedure, PR.ReviewDate, PR.DocRefNo, PR.IssueNo, PR.IssueDate
						FROM PROCEDURE_Step PR
						LEFT JOIN USER_User ON PR.UserName = USER_User.UserName
						LEFT JOIN USER_Role ON USER_Role.RoleID = USER_User.RoleID
						WHERE PR.Comment LIKE ''%'+@Keyword+'%'''
						IF(@PermissionOnDepartments<>'')						
								SET @SQL_STRING=@SQL_STRING+ ' AND USER_Role.RoleID in ('+@PermissionOnDepartments+') '
					END
			ELSE IF(@SearchField = 'Corrective Actions')
				BEGIN
					SET @SQL_STRING = 'SELECT DISTINCT PR.StepID, PR.[Name], PR.UserName, PR.Complete, PR.LastCheckDate, PR.NextCheckDueDate, PR.CheckFrequency, PR.CheckFrequencyMins, PR.CheckFirstOfDay, PR.Active, PR.CheckFinish, PR.DayOfWeek, PR.DayNo, PR.[Month], PR.CriticalProcedure, PR.MonthStep, PR.DayStep, PR.UserIDList, PR.ExpireOn, PR.SequencePosition, PR.WeekNo, USER_Role.RoleDescription AS Department, PR.Comment, 
						PR.AssigneeIDList, PR.CollectedIDList, PR.Tolerance, PR.StartOn, PR.Author, PR.AuthorText, PR.RevisionNo, PR.NeedToVerify, PR.SetId,
						PR.CorrespondingProcedureID, PR.IsScoreProcedure, PR.TotalMinimumValue, PR.TotalMaximumValue, PR.TypeProcedure, PR.ReviewDate, PR.DocRefNo, PR.IssueNo, PR.IssueDate
						FROM PROCEDURE_Step PR
						INNER JOIN PROCEDURE_StepDetail ON PR.StepID = PROCEDURE_StepDetail.StepID
						INNER JOIN PROCEDURE_UserDefinedList ON PROCEDURE_StepDetail.CorrectActionListID = PROCEDURE_UserDefinedList.ListID AND PROCEDURE_UserDefinedList.CorrectiveAction = 1
						LEFT JOIN USER_User ON PR.UserName = USER_User.UserName
						LEFT JOIN USER_Role ON USER_Role.RoleID = USER_User.RoleID
						WHERE PROCEDURE_UserDefinedList.Name LIKE ''%'+@Keyword+'%'''
						IF(@PermissionOnDepartments<>'')						
								SET @SQL_STRING=@SQL_STRING+ ' AND USER_Role.RoleID in ('+@PermissionOnDepartments+') '
				END
			PRINT @SQL_STRING
			EXEC(@SQL_STRING)

			RETURN
		END

	/*********************
		RETURN ALL RECORDS
	*********************/
	BEGIN		
		
		if @PermissionOnDepartments=''
		begin 
			SELECT ps.StepID, ps.Name, ps.UserName, ps.Complete, ps.LastCheckDate, ps.NextCheckDueDate, ps.CheckFrequency, ps.CheckFrequencyMins, ps.CheckFirstOfDay, ps.Picture, ps.Active, ps.CheckFinish, ps.DayOfWeek, ps.DayNo, ps.Month, ps.CriticalProcedure, ps.MonthStep, ps.DayStep, ps.UserIDList , ps.ExpireOn, ps.SequencePosition, ps.WeekNo , ps.CorrespondingProcedureID ,ps.Comment ,ps.IsScoreProcedure, ps.TotalMinimumValue, ps.TotalMaximumValue,ps.AssigneeIDList,ps.ReviewDate, ps.DocRefNo, ps.IssueNo, ps.IssueDate,r.RoleDescription AS Department
			FROM PROCEDURE_Step ps	WITH (READUNCOMMITTED) 
			inner join USER_User u on ps.UserName=u.UserName LEFT JOIN USER_Role r ON r.RoleID = u.RoleID				
			ORDER BY 	ps.SequencePosition ASC
			RETURN
		END
		ELSE
		begin 
			SELECT ps.StepID, ps.Name, ps.UserName, ps.Complete, ps.LastCheckDate, ps.NextCheckDueDate, ps.CheckFrequency, ps.CheckFrequencyMins, ps.CheckFirstOfDay, ps.Picture, ps.Active, ps.CheckFinish, ps.DayOfWeek, ps.DayNo, ps.Month, ps.CriticalProcedure, ps.MonthStep, ps.DayStep, ps.UserIDList , ps.ExpireOn, ps.SequencePosition, ps.WeekNo , ps.CorrespondingProcedureID ,ps.Comment ,ps.IsScoreProcedure, ps.TotalMinimumValue, ps.TotalMaximumValue,ps.AssigneeIDList,ps.ReviewDate, ps.DocRefNo, ps.IssueNo, ps.IssueDate, ps.IssueDate,r.RoleDescription AS Department
			FROM PROCEDURE_Step ps	WITH (READUNCOMMITTED) 
			inner join USER_User u on ps.UserName=u.UserName INNER JOIN USER_Role r ON r.RoleID = u.RoleID 
			WHERE r.RoleID in (SELECT FieldValue FROM dbo.fnSplit(',', @PermissionOnDepartments))
			ORDER BY ps.SequencePosition ASC			 
		 	RETURN
		END

		RETURN
	END




GO










/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_Copy_Procedure]    Script Date: 09/26/2012 17:35:03 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[PROCEDURE_usp_upd_Copy_Procedure]

---------Parameters----------
@StepID INT,
@UserName nvarchar(50),
@Success bit OUTPUT

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)
DECLARE @SequencePosition INT
DECLARE @TypeProcedure INT


DECLARE @ID INT

BEGIN TRY
	SET @ErrorMsg = ''
	SET @Success = 0
	SET @TypeProcedure = (SELECT ISNULL(TypeProcedure,0) FROM PROCEDURE_Step WHERE StepID = @StepID)
	SET @SequencePosition = (SELECT ISNULL(MAX(SequencePosition),0) FROM PROCEDURE_Step WHERE TypeProcedure = @TypeProcedure) + 1
	
	INSERT INTO dbo.PROCEDURE_Step
	        ( Name ,
	          UserName ,
	          Complete ,
	          LastCheckDate ,
	          NextCheckDueDate ,
	          CheckFrequency ,
	          CheckFrequencyMins ,
	          CheckFirstOfDay ,
	          Picture ,
	          Active ,
	          CheckFinish ,
	          DayNo ,
	          Month ,
	          DayOfWeek ,
	          MonthStep ,
	          DayStep ,
	          SequencePosition,
	          WeekNo, --added
	          Comment, --added 11/19/2011,
	          CorrespondingProcedureID,
	          IsScoreProcedure,
			  TotalMinimumValue,
			  TotalMaximumValue,
	          CriticalProcedure,
	          TypeProcedure,
		      ReviewDate,
		      DocRefNo,
			  IssueNo,
			  IssueDate,
			  Author,
			  AuthorText,
			  RevisionNo,
			  NeedToVerify,
			  SetID,
			  UpdatedOn
	        )
		SELECT  'COPY OF ' + Name ,
		         @UserName ,
		        Complete ,
		        LastCheckDate ,
		        NextCheckDueDate ,
		        CheckFrequency ,
		        CheckFrequencyMins ,
		        CheckFirstOfDay ,
		        Picture ,
		        Active ,
		        CheckFinish ,
		        DayNo ,
		        Month ,
		        DayOfWeek ,
		        MonthStep ,
		        DayStep ,
		        @SequencePosition,
		        WeekNo,  --added
		        Comment, -- added 11/19/2011
		        CorrespondingProcedureID,
		        IsScoreProcedure,
   				TotalMinimumValue,
				TotalMaximumValue,
		        CriticalProcedure,
		        TypeProcedure,
		        ReviewDate,
		        DocRefNo,
				IssueNo,
				IssueDate,
				Author,
				AuthorText,
				RevisionNo,
				NeedToVerify,
				SetID,
				GETDATE()
		FROM	dbo.PROCEDURE_Step
				
		WHERE StepID = @StepID

	SET @ID = SCOPE_IDENTITY()
	
	
	DECLARE @StepDetailIDs NVARCHAR(MAX)
	DECLARE @tblStepDetail table
	(
		StepDetailID int
	)
	
	INSERT INTO @tblStepDetail
	SELECT StepDetailID
	FROM dbo.PROCEDURE_StepDetail			
	WHERE StepID = @StepID
	Order BY SequencePosition
	
	SELECT @StepDetailIDs =  ISNULL(@StepDetailIDs + '|', '') + CONVERT(NVARCHAR(MAX), StepDetailID)
	FROM @tblStepDetail
	
	DELETE FROM @tblStepDetail
	
	EXEC [PROCEDURE_usp_ins_Copy_Step] @StepDetail = @StepDetailIDs,
									   @StepID = @ID,--New StepID
									   @Success = 0

	--copy document related data
	--start
			
		EXEC	PROCEDURE_usp_Copy_Step_Associated_Document	@ObjectID = @StepID,
																@CopyToObjectID = @ID,
																@ObjectType = 2,
																@Success = 0	
	--end
	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) <> '##'
		BEGIN	
			/*SET @ErrorParamsData =	'@Barcode = ' + @Barcode + ', @Pallet_No = ' +  CAST(@Pallet_No AS nvarchar(8))  + */

			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[PROCEDURE_usp_upd_Copy_Procedure]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1




GO


/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_Step_Active]    Script Date: 3/31/2014 2:38:20 PM ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_upd_Step_Active]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_upd_Step_Active]
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_Step_Active]    Script Date: 3/31/2014 2:38:20 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				MR
	Date:				26/06/2011 

	Description:		Update record in PROCEDURE_Step

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_upd_Step_Active]
---------Parameters----------
@StepID int,
@Active bit = NULL,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 


SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF @StepID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		StepID
							FROM		PROCEDURE_Step				WITH (READUNCOMMITTED)
							WHERE 		StepID = @StepID
							)
			BEGIN
				SET @ErrorMsg = '##01Table PROCEDURE_Step - Could not find record ' + CAST(@StepID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END
			
			UPDATE	PROCEDURE_Step												WITH (ROWLOCK)
			SET 	Active = @Active,
					UpdatedOn = GETDATE()
			WHERE	StepID = @StepID	
			
			
		
			UPDATE	PROCEDURE_Step												WITH (ROWLOCK)
			SET 	ExpireOn = NULL,
					UpdatedOn = GETDATE()
			WHERE	StepID = @StepID
			
			
			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@StepID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_upd_Step_Active',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1



GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_Step_Verified]    Script Date: 3/31/2014 2:38:20 PM ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_upd_Step_Verified]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_upd_Step_Verified]
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_Step_Verified]    Script Date: 3/31/2014 2:38:20 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				MR
	Date:				26/06/2011 

	Description:		Update record in PROCEDURE_Step

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_upd_Step_Verified]
---------Parameters----------
@StepID int,
@Active bit = NULL,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 


SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF @StepID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		StepID
							FROM		PROCEDURE_Step				WITH (READUNCOMMITTED)
							WHERE 		StepID = @StepID
							)
			BEGIN
				SET @ErrorMsg = '##01Table PROCEDURE_Step - Could not find record ' + CAST(@StepID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END
			
			UPDATE	PROCEDURE_Step												WITH (ROWLOCK)
			SET 	NeedToVerify = @Active,
					UpdatedOn = GETDATE()
			WHERE	StepID = @StepID	
			
			
			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@StepID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_upd_Step_Verified',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1



GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_Job_Verified]    Script Date: 3/31/2014 2:38:20 PM ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_upd_Job_Verified]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_upd_Job_Verified]
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_Job_Verified]    Script Date: 3/31/2014 2:38:20 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				SKD
	Date:				9/12/2014 

	Description:		Update record in PROCEDURE_Job

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_upd_Job_Verified]
---------Parameters----------
@JobID int,
@Active bit = NULL,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 


SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF @JobID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		JobID
							FROM		PROCEDURE_Job				WITH (READUNCOMMITTED)
							WHERE 		JobID = @JobID
							)
			BEGIN
				SET @ErrorMsg = '##01Table PROCEDURE_Job - Could not find record ' + CAST(@JobID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END
			
			UPDATE	PROCEDURE_Job												WITH (ROWLOCK)
			SET 	Verified = @Active,
					UpdatedOn = GETDATE()
			WHERE	JobID = @JobID	
			
			
			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@JobID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_upd_Job_Verified',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1



GO




/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_sel_UserDefinedList]    Script Date: 07/16/2012 16:46:08 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_sel_UserDefinedList]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_sel_UserDefinedList]
GO


/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_sel_UserDefinedList]    Script Date: 07/16/2012 16:46:08 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				TR
	Date:				29/06/2009 15:20

	Description:		Select records from PROCEDURE_UserDefinedList

	History		Name		Date			Mod		
	=============================================================================================================================================
	1.			Titu(Jr)	10-sep-2012		New columns (SequenceNo, CreatedBy, CreatedDate, UpdatedBy, UpdatedDate) added



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_sel_UserDefinedList]
---------Parameters----------
@Name nvarchar(32) = NULL,
@SQL_WHERE nvarchar(4000) = NULL

AS

DECLARE @SQL_STRING nvarchar (4000)

SET NOCOUNT ON
SET DATEFORMAT dmy


	IF ISNULL(@Name,'') <> '' 
		/**************************
			RETURN SPECIFIC RECORDS
		**************************/
		BEGIN
			SELECT		ListID, [Name], SequenceNo, CorrectiveAction, Active, SignatureRequired, AssignUser, DaysToResolve, CreatedBy, CreatedDate, UpdatedBy, UpdatedDate

			FROM		PROCEDURE_UserDefinedList

			WHERE		[Name] = @Name

			ORDER BY 	Name ASC

			RETURN
		END

	IF ISNULL(@SQL_WHERE,'') <> '' 
		/*********************************************
			SELECT RECORDS ACCORDING TO WHERE CRITERIA
		*********************************************/
		BEGIN
			SET @SQL_STRING = 'SELECT		ListID, [Name], SequenceNo, CorrectiveAction, Active, SignatureRequired, AssignUser, DaysToResolve, CreatedBy, CreatedDate, UpdatedBy, UpdatedDate '
			SET @SQL_STRING = @SQL_STRING + 'FROM PROCEDURE_UserDefinedList '

			SET @SQL_STRING = @SQL_STRING + @SQL_WHERE

			EXEC(@SQL_STRING)

			RETURN
		END

	/*********************
		RETURN ALL RECORDS
	*********************/
	BEGIN
		SELECT		ListID, [Name], SequenceNo, CorrectiveAction, Active, SignatureRequired, AssignUser, DaysToResolve, CreatedBy, CreatedDate, UpdatedBy, UpdatedDate

		FROM		PROCEDURE_UserDefinedList

		ORDER BY 	Name ASC
	END


GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_sel_UserDefinedList_DefaultPrinterID]    Script Date: 07/16/2012 16:46:08 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_sel_UserDefinedList_DefaultPrinterID]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_sel_UserDefinedList_DefaultPrinterID]
GO


/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_sel_UserDefinedList_DefaultPrinterID]    Script Date: 07/16/2012 16:46:08 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				Titu(Jr)
	Date:				

	Description:		Select Default Printer ID from PROCEDURE_UserDefinedList

	History		Name		Date			Mod		
	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_sel_UserDefinedList_DefaultPrinterID]
---------Parameters----------
@DefaultPrinterID INT OUTPUT,
@DaysToResolve INT OUTPUT
AS


SET NOCOUNT ON
SET DATEFORMAT dmy
SET @DefaultPrinterID=0

	/*********************
		RETURN  RECORD
	*********************/

		SELECT		@DefaultPrinterID = ListID, @DaysToResolve = DaysToResolve
		FROM		PROCEDURE_UserDefinedList
		WHERE       Name='Default Printer'
								

GO


/****** Object:  StoredProcedure [dbo].[RANGER_usp_Fill_UserDefinedList]    Script Date: 09/10/2012 16:31:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RANGER_usp_Fill_UserDefinedList]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RANGER_usp_Fill_UserDefinedList]
GO


/****** Object:  StoredProcedure [dbo].[RANGER_usp_Fill_UserDefinedList]    Script Date: 09/10/2012 16:31:17 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[RANGER_usp_Fill_UserDefinedList]

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)

BEGIN TRY
	SET @ErrorMsg = ''

	
	SELECT		[Name], ListID, SequenceNo, CorrectiveAction, Active, SignatureRequired, AssignUser, CreatedBy, CreatedDate, UpdatedBy, UpdatedDate
	FROM		PROCEDURE_UserDefinedList							
	WHERE		Active = 1 AND CorrectiveAction = 1
	ORDER BY 	[Name] ASC	
		
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) = '##'
		BEGIN	
			/*SET @ErrorParamsData =	'@Barcode = ' + @Barcode + ', @Pallet_No = ' +  CAST(@Pallet_No AS nvarchar(8))  + */

			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[RANGER_usp_Fill_UserDefinedList]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1



GO






/****** Object:  StoredProcedure [dbo].[APP_usp_sel_System]    Script Date: 02/28/2013 19:46:22 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[APP_usp_sel_System]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[APP_usp_sel_System]
GO


/****** Object:  StoredProcedure [dbo].[APP_usp_sel_System]    Script Date: 02/28/2013 19:46:22 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
		Author:			Tony Roach
		Date:			14/03/2008
		
		Description:	select system settings
		
		
		History:		1.0(TR)
						Titu(Junior) 04/07/2012 Modified for new column AutoNextWorkReqNo
*/
CREATE PROCEDURE [dbo].[APP_usp_sel_System] AS

SET NOCOUNT ON 

	SELECT	Error_Email,Import_Path1,Export_Path1,Login_Prompt, PrintLabel,ViewComments,AutoNextWorkReqNo, ISNULL(LogoutActive,0) LogoutActive,  ScannerIPAddress, ScannerPortNo, DefaultWindowID,FilterData,EmailSetting,UpdateInfo,DefaultPrinter,ModulePermission,DaysOfWeek,PDA_Logout, MissedEventShowDays, MaxNoPCAllowed,HandSetSync, Print2DBarcode
			
	FROM	APP_System

GO


/****** Object:  StoredProcedure [dbo].[APP_usp_sel_Computer]    Script Date: 02/28/2013 19:46:22 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[APP_usp_sel_Computer]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[APP_usp_sel_Computer]
GO


/****** Object:  StoredProcedure [dbo].[APP_usp_sel_Computer]    Script Date: 02/28/2013 19:46:22 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
		Author:			Tony Roach
		Date:			14/03/2008
		
		Description:	select App computer
		
		
		History:		1.0(TR)
						Titu(Junior) 04/07/2012 Modified for new column AutoNextWorkReqNo
*/
CREATE PROCEDURE [dbo].[APP_usp_sel_Computer] AS

SET NOCOUNT ON 

	SELECT	ID , PCName,IPAddress,OSPlatform,OSVersion,RangerVersion,LastActivityTime,CreateDate,Label
			
	FROM	APP_Computer

_
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[APP_usp_upd_ComputerLabel]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[APP_usp_upd_ComputerLabel]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[APP_usp_upd_ComputerLabel]

---------Parameters----------
@ID INT,
@Label NVARCHAR(500),
@Success BIT OUTPUT

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)
DECLARE @SQL NVARCHAR(MAX)
BEGIN TRY
	SET @ErrorMsg = ''
	SET @Success = 0
	

	UPDATE App_Computer
	SET
	Label = @Label
	WHERE ID = @ID		
		
	
	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) <> '##'
		BEGIN	
			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[APP_usp_upd_ComputerLabel]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1

GO






/****** Object:  StoredProcedure [dbo].[APP_usp_upd_System]    Script Date: 02/28/2013 19:45:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[APP_usp_upd_System]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[APP_usp_upd_System]
GO

/****** Object:  StoredProcedure [dbo].[APP_usp_upd_System]    Script Date: 12/02/2013 12:50:55 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[APP_usp_upd_System]

---------Parameters----------
@CompanyLogo varbinary(MAX) = NULL,
@LogoName nvarchar(64) = NULL,
@PrintLabel BIT,
@ViewComments BIT,
@AutoNextWorkReqNo bit,
@DefaultWindowID nvarchar(20),
@ScannerIPAddress NVARCHAR(16),
@ScannerPortNo INT,
@LogoutActive BIT = NULL,
@FilterData BIT = NULL,
@ExportPath NVARCHAR(MAX),
@EmailSetting NVARCHAR(MAX),
@DefaultPrinter NVARCHAR(500),
@HandSetSync NVARCHAR(200),
@DaysOfWeek NVARCHAR(500)=NULL,
@PDA_Logout NVARCHAR(50)=NULL,
@MissedEventShowDays INT,
@Print2DBarcode BIT,
@Success bit OUTPUT

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)

BEGIN TRY
	SET @ErrorMsg = ''
	SET @Success = 0

	UPDATE	APP_System
	SET		LogoName = @LogoName,
			CompanyLogo = @CompanyLogo,
			PrintLabel = @PrintLabel,
			ViewComments = @ViewComments,
			DefaultWindowID = @DefaultWindowID,
			AutoNextWorkReqNo = @AutoNextWorkReqNo,			
			ScannerIPAddress = @ScannerIPAddress,
			ScannerPortNo = @ScannerPortNo,
			LogoutActive = @LogoutActive,
			FilterData=@FilterData,
			Export_Path1 = @ExportPath,
			EmailSetting=@EmailSetting,
			DefaultPrinter=@DefaultPrinter,
			DaysOfWeek = @DaysOfWeek,
			PDA_Logout = @PDA_Logout,
			MissedEventShowDays = @MissedEventShowDays,
			HandSetSync = @HandSetSync,
			Print2DBarcode = @Print2DBarcode,
			UpdatedOn = GETDATE()
			
	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) <> '##'
		BEGIN	
			/*SET @ErrorParamsData =	'@Barcode = ' + @Barcode + ', @Pallet_No = ' +  CAST(@Pallet_No AS nvarchar(8))  + */

			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = 'APP_usp_upd_System',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1
	
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RANGER_usp_ins_App_Computer]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RANGER_usp_ins_App_Computer]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				Titu(jr)
	Date:				29-Jan-2014

	Description:		Insert App_Computer data

	History									Name		Date		Mod		
	=============================================================================================================================================
	

	=============================================================================================================================================
*/

CREATE PROCEDURE [dbo].[RANGER_usp_ins_App_Computer]

---------Parameters----------
--@ID BIGINT,
@PCName NVARCHAR(200),
@IPAddress NVARCHAR(100) = NULL,
@OSPlatform NVARCHAR(200) = NULL,
@OSVersion NVARCHAR(100) = NULL,
@RangerVersion NVARCHAR(100) = NULL,
@MaxNoPCAllowed INT = 0,
@Success bit OUTPUT

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)
DECLARE @InstalledPCCount INT

BEGIN TRY
	SET @ErrorMsg = ''
	SET @Success = 0
	SELECT @InstalledPCCount = COUNT(ID) FROM App_Computer

	IF EXISTS (SELECT PCName FROM App_Computer WHERE PCName = @PCName)
	BEGIN
		UPDATE App_Computer 
		SET		
		IPAddress = @IPAddress,
		OSPlatform = @OSPlatform,
		OSVersion = @OSVersion,
		RangerVersion = @RangerVersion,
		LastActivityTime = GETDATE()
		WHERE PCName = @PCName
	END
	ELSE
	BEGIN
		IF @MaxNoPCAllowed > 0 AND @InstalledPCCount >= @MaxNoPCAllowed 
		BEGIN
			SET @ErrorMsg = '##03Maxium Computer limit exceeded. Please contact with vendor.'
			RAISERROR(@ErrorMsg,16,1)		
		END
		ELSE
		BEGIN
			INSERT INTO	App_Computer 
			(PCName, IPAddress, OSPlatform, OSVersion, RangerVersion, LastActivityTime)
			VALUES				
			(@PCName, @IPAddress, @OSPlatform, @OSVersion, @RangerVersion, GETDATE())
		END
	END
		
	
	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) = '##'
		BEGIN	

			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[RANGER_usp_ins_App_Computer]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1


GO


/****** Object:  StoredProcedure [dbo].[RANGER_usp_upd_Exception]    Script Date: 07/09/2012 15:04:03 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RANGER_usp_upd_Exception]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RANGER_usp_upd_Exception]
GO

/****** Object:  StoredProcedure [dbo].[RANGER_usp_upd_Exception]    Script Date: 07/09/2012 15:04:03 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				TR
	Date:				02/02/2009 11:24

	Description:		Update record in RANGER_Exception

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[RANGER_usp_upd_Exception]
---------Parameters----------
@ExceptionID int,
@ActionRequired nvarchar(512), 
@ActionTaken nvarchar(512),
@PrevActionTaken nvarchar(512) = NULL,
@Comments nvarchar(512),
@ExceptionPassUser nvarchar(16),
@WorkRequestNo NVARCHAR(24),
@ResolveBy DATETIME = NULL,
@Resolved DATETIME = NULL,
@Status NVARCHAR(24),
@AssignTo NVARCHAR(16),
@FilePath NVARCHAR(300),
@Investigation NVARCHAR(400),
@ReviewDate DATETIME = NULL,
@Position NVARCHAR(300) = NULL,
@PrintName NVARCHAR(300) = NULL,
@IsSatisfactory BIT = NULL,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg = ''

	IF ISNULL(@Resolved,'') = ''
		BEGIN
			SET @Resolved = NULL
		END
	ELSE	
		SET @Resolved = GETDATE()

	IF EXISTS(	SELECT * FROM dbo.RANGER_Exception WHERE Convert(INT, WorkRequestNo) = Convert(INT, @WorkRequestNo) AND ExceptionID <> @ExceptionID)
		BEGIN
			SET @ErrorMsg = '##00Request No. already exists'
			RAISERROR(@ErrorMsg,16,1)				
		END				
		
	/************
	UPDATE RECORD
	************/
	UPDATE	RANGER_Exception												WITH (ROWLOCK)
	SET 	Comments = @Comments,
			ActionRequired = @ActionRequired,
			ActionTaken = @ActionTaken,
			PrevActionTaken = @PrevActionTaken,
			ExceptionPassUser = @ExceptionPassUser,
			WorkRequestNo = @WorkRequestNo,
			Status = @Status,
			ResolveBy = @ResolveBy,
			Resolved = @Resolved,		
			AssignTo = @AssignTo,
			FilePath = @FilePath,
			Investigation = @Investigation,
			UpdatedOn = GETDATE()
			
			
	WHERE	ExceptionID = @ExceptionID
		
	SET @Success = 1
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'RANGER_usp_upd_Exception',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1


GO

/****** Object:  StoredProcedure [dbo].[RANGER_usp_upd_Exception_ResolveDate]    Script Date: 07/09/2012 15:04:03 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RANGER_usp_upd_Exception_ResolveDate]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RANGER_usp_upd_Exception_ResolveDate]
GO

/****** Object:  StoredProcedure [dbo].[RANGER_usp_upd_Exception_ResolveDate]    Script Date: 07/09/2012 15:04:03 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				TR
	Date:				02/02/2009 11:24

	Description:		Update Resolve Date in RANGER_Exception

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[RANGER_usp_upd_Exception_ResolveDate]
---------Parameters----------
@ExceptionID int,
@Resolved DATETIME = NULL,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg = ''		
		
	/************
	UPDATE RECORD
	************/
	UPDATE	RANGER_Exception												WITH (ROWLOCK)
	SET 	
			Resolved = @Resolved,		
			UpdatedOn = GETDATE()
			
			
	WHERE	ExceptionID = @ExceptionID
		
	SET @Success = 1
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'RANGER_usp_upd_Exception_ResolveDate',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1


GO
/****** Object:  StoredProcedure [dbo].[PDA_usp_sel_Exception]    Script Date: 04/10/2013 11:46:31 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PDA_usp_sel_Exception]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PDA_usp_sel_Exception]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				Titu JR
	Date:				05/04/2013 15:24

	Description:		Select record in PDA_Exception

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PDA_usp_sel_Exception]
---------Parameters----------


AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY

	SET @ErrorMsg = ''	

	DELETE FROM PDA_Exception 
	INSERT INTO PDA_Exception  (ActionRequired,ActionTaken,PrevActionTaken,AssignTo,Barcode,Comments,CorrectiveActionType,CreateDate,Descidentity,ExceptionCreateUser,ExceptionDate,ExceptionID,ExceptionMessage,ExceptionPassUser,ExceptionType,Image, IsModified,NonConformance,ObjectID,ResolveBy,Resolved,ResolvedImage,Signature,Status,StepID,TypeID,WorkRequestNo)
	(SELECT ActionRequired,ActionTaken,PrevActionTaken,AssignTo,Barcode,Comments,CorrectiveActionType,CreateDate,Descidentity,ExceptionCreateUser,ExceptionDate,ExceptionID,ExceptionMessage,ExceptionPassUser,ExceptionType,Image, 0,NonConformance,ObjectID,ResolveBy,Resolved,ResolvedImage,Signature,Status,StepID,TypeID,WorkRequestNo FROM RANGER_Exception WHERE (ExceptionType = 0 AND Status <> 'Resolved'))
	
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 


	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PDA_usp_sel_Exception',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 
												
	RETURN -1
												
GO

/****** Object:  StoredProcedure [dbo].[RANGER_usp_upd_Exception]    Script Date: 07/09/2012 15:04:03 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PDA_usp_upd_Exception]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PDA_usp_upd_Exception]
GO

/****** Object:  StoredProcedure [dbo].[RANGER_usp_upd_Exception]    Script Date: 07/09/2012 15:04:03 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				Titu JR
	Date:				05/04/2013 15:24

	Description:		Update record in PDA_Exception

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PDA_usp_upd_Exception]
---------Parameters----------


AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY

	SET @ErrorMsg = ''
	/************
	UPDATE RECORD
	************/
	UPDATE exception
	SET 
		exception.ResolveBy=PDA_Exception.ResolveBy,
		exception.Status=PDA_Exception.Status,
		exception.ActionRequired=PDA_Exception.ActionRequired,
		exception.ActionTaken=PDA_Exception.ActionTaken,
		exception.Comments=PDA_Exception.Comments,
		exception.AssignTo=PDA_Exception.AssignTo,
		exception.ResolvedImage=PDA_Exception.ResolvedImage		
	FROM PDA_Exception
	INNER JOIN RANGER_Exception exception ON exception.ExceptionID = PDA_Exception.ExceptionID
	
	DELETE PDA_Exception
	
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 


	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PDA_usp_upd_Exception',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 


	RETURN -1

GO
/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_ins_or_upd_ReviewAlert]    Script Date: 07/12/2012 11:41:10 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_ins_or_upd_ReviewAlert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_ins_or_upd_ReviewAlert]
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_ins_Alert]    Script Date: 07/12/2012 11:41:10 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_ins_Alert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_ins_Alert]
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_sel_AlertDetails]    Script Date: 07/12/2012 11:41:10 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_sel_AlertDetails]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_sel_AlertDetails]
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_sel_AlertDetails]    Script Date: 01/07/2013 20:22:10 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO







/*
	Author:				MSH
	Date:				29/10/2011 11:16

	Description:		Select records from PROCEDURE_usp_sel_AlertDetails

	History						Name		Date		Mod		
	=============================================================================================================================================
	Change for review Alert		Titu		11/07/2012	


	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_sel_AlertDetails]
---------Parameters----------
@isUpcomingAlert BIT,
@isHistory BIT,
@UserName NVARCHAR(200)= NULL
AS

DECLARE @SQL_STRING nvarchar (4000)
DECLARE @PermissionOnDepartments NVARCHAR(MAX)
DECLARE @AssignDepartment NVARCHAR(50)

SET NOCOUNT ON
SET DATEFORMAT dmy

SET @PermissionOnDepartments=''	
IF ISNULL(@UserName,'') <> ''
	SELECT @PermissionOnDepartments=PermissionOnDepartments from USER_User where UserName=@UserName



DECLARE @Roletable TABLE(
RoleID INT
) 

INSERT INTO @Roletable(RoleId) (SELECT FieldValue FROM dbo.fnSplit(',', @PermissionOnDepartments))

SET NOCOUNT ON
SET DATEFORMAT dmy

	IF @isUpcomingAlert = 0
		/**************************
			RETURN SPECIFIC RECORDS
		**************************/
		BEGIN
			declare @MissedAlert table (ID BIGINT, 
										  StepID INT,
										  Name NVARCHAR(200),
										  DateTimeOfAction DateTime,
										  CheckFrequency NVARCHAR(50),
										  Comment NVARCHAR(2048),
										  AlertType INT,
										  Active BIT)
			
			IF @PermissionOnDepartments = ''
			BEGIN
				INSERT INTO @MissedAlert
				SELECT pca.ID, pca.StepID,ps.Name,pca.DateTimeOfAction, pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
				FROM Procedure_Alert pca
				INNER JOIN PROCEDURE_Step ps ON pca.StepID = ps.StepID
				WHERE pca.actiontaken = 0 AND (AlertType = 1 OR AlertType=2) AND pca.ActionFinishTime < GETDATE()
				AND ISNULL(pca.IsHistory,0) = @isHistory
			END
			ELSE
			BEGIN
				INSERT INTO @MissedAlert
				SELECT pca.ID, pca.StepID,ps.Name,pca.DateTimeOfAction, pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
				FROM Procedure_Alert pca
				INNER JOIN PROCEDURE_Step ps ON pca.StepID = ps.StepID
				INNER JOIN USER_User u on ps.UserName = u.UserName 
				INNER JOIN 	@Roletable rt ON u.RoleID = rt.RoleID
				WHERE pca.actiontaken = 0 AND (AlertType = 1 OR AlertType=2) AND pca.ActionFinishTime < GETDATE()
				AND ISNULL(pca.IsHistory,0) = @isHistory
			END
				
			
			INSERT INTO @MissedAlert
			SELECT pca.ID, pca.StepID,ps.SupplierName,pca.DateTimeOfAction, pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
			FROM Procedure_Alert pca			
			INNER JOIN STOCKCONTROL_Supplier ps	ON pca.StepID = ps.SupplierID
			WHERE pca.actiontaken = 0 AND AlertType=3 AND pca.DateTimeOfAction < GETDATE()
			AND ISNULL(pca.IsHistory,0) = @isHistory
			
			INSERT INTO @MissedAlert
			SELECT pca.ID, pca.StepID,lo.DescriptionShortName,pca.DateTimeOfAction, pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
			FROM Procedure_Alert pca	
			INNER JOIN LOCATION_ObjectNew lo ON pca.StepID = lo.ObjectID
			WHERE pca.actiontaken = 0 AND (AlertType = 4 OR AlertType = 5 OR AlertType = 6) AND pca.DateTimeOfAction < GETDATE()
			AND ISNULL(pca.IsHistory,0) = @isHistory
			
			INSERT INTO @MissedAlert
			SELECT pca.ID, pca.StepID, ps.ServiceCompanyName, pca.DateTimeOfAction, pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
			FROM Procedure_Alert pca			
			INNER JOIN STOCKCONTROL_ServiceCompany ps ON pca.StepID = ps.ServiceCompanyID
			WHERE pca.actiontaken = 0 AND (AlertType = 7) AND pca.DateTimeOfAction < GETDATE()
			AND ISNULL(pca.IsHistory,0) = @isHistory
			
			INSERT INTO @MissedAlert
			SELECT pca.ID, pca.StepID, ps.ReportNumber, pca.DateTimeOfAction, pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
			FROM Procedure_Alert pca			
			INNER JOIN Complaint ps	ON pca.StepID = ps.Id
			WHERE pca.actiontaken = 0 AND (AlertType = 8) AND pca.DateTimeOfAction < GETDATE()
			AND ISNULL(pca.IsHistory,0) = @isHistory
						
			INSERT INTO @MissedAlert
			SELECT pca.ID, pca.StepID, ps.CourseName, pca.DateTimeOfAction, pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
			FROM Procedure_Alert pca			
			INNER JOIN RANGER_TrainingCourse ps
			ON pca.StepID = ps.TrainingCourseID
			WHERE pca.actiontaken = 0 AND (AlertType = 9) AND pca.ActionFinishTime < GETDATE()
			AND ISNULL(pca.IsHistory,0) = @isHistory
			
			INSERT INTO @MissedAlert
			SELECT pca.ID, pca.StepID, ps.Name, pca.DateTimeOfAction, pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
			FROM Procedure_Alert pca			
			INNER JOIN STOCKCONTROL_ForcedStockCheck ps
			ON pca.StepID = ps.ForcedStockCheckID
			WHERE pca.actiontaken = 0 AND (AlertType = 10) AND pca.ActionFinishTime < GETDATE()
			AND ISNULL(pca.IsHistory,0) = @isHistory
			
			--INSERT INTO @MissedAlert
			--SELECT pca.ID, pca.StepID, ps.ProductCode, pca.DateTimeOfAction, pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
			--FROM Procedure_Alert pca			
			--INNER JOIN STOCKCONTROL_Product ps
			--ON pca.StepID = ps.ProductID
			--WHERE pca.actiontaken = 0 AND (AlertType = 11) AND pca.ActionFinishTime < GETDATE()
			--AND ISNULL(pca.IsHistory,0) = @isHistory
			
			INSERT INTO @MissedAlert
			SELECT pca.ID, pca.StepID,ps.SupplierName,pca.DateTimeOfAction, pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
			FROM Procedure_Alert pca			
			INNER JOIN STOCKCONTROL_Supplier ps	ON pca.StepID = ps.SupplierID
			WHERE pca.actiontaken = 0 AND AlertType=11 AND pca.DateTimeOfAction < GETDATE()
			AND ISNULL(pca.IsHistory,0) = @isHistory
			
			INSERT INTO @MissedAlert
			SELECT pca.ID, pca.StepID, ISNULL(ps.WorkRequestNo + ' - ','') + ps.ExceptionMessage ,pca.DateTimeOfAction, pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
			FROM Procedure_Alert pca			
			INNER JOIN RANGER_Exception ps	ON pca.StepID = ps.ExceptionID
			WHERE pca.actiontaken = 0 AND AlertType= 13 AND pca.DateTimeOfAction < GETDATE()
			AND ISNULL(pca.IsHistory,0) = @isHistory
			
			SELECT * FROM @MissedAlert ORDER BY DateTimeOfAction DESC
		END

	ELSE 
		BEGIN
			declare @UpcomingAlert table (ID BIGINT, 
										  StepID INT,
										  Name NVARCHAR(200),
										  DateTimeOfAction DateTime,
										  CheckFrequency NVARCHAR(50),
										  Comment NVARCHAR(2048),
										  AlertType INT,
										  Active BIT)
										  			
			--Minute Data
			IF @PermissionOnDepartments=''
			BEGIN				
				INSERT INTO @UpcomingAlert
				SELECT TOP 5 GroupMissedAlert.ID, GroupMissedAlert.StepID,ps.Name,GroupMissedAlert.DateTimeOfAction, 'A' + pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
				FROM Procedure_Alert pca
				INNER JOIN 
				(SELECT MIN(pa.ID) AS ID,pa.StepID,MIN(pa.DateTimeOfAction) AS DateTimeOfAction 
				FROM Procedure_Alert pa WHERE pa.actiontaken=0 AND AlertType = 1
				AND pa.ActionFinishTime >= GETDATE()  GROUP BY StepID) AS GroupMissedAlert 
				ON GroupMissedAlert.ID = pca.ID
				AND GroupMissedAlert.StepID = pca.StepID
				INNER JOIN PROCEDURE_Step ps
				ON GroupMissedAlert.StepID = ps.StepID
				WHERE pca.CheckFrequency = 'Minutes'
				ORDER BY GroupMissedAlert.DateTimeOfAction ASC
			END
			ELSE
			BEGIN
				INSERT INTO @UpcomingAlert
				SELECT TOP 5 GroupMissedAlert.ID, GroupMissedAlert.StepID,ps.Name,GroupMissedAlert.DateTimeOfAction, 'A' + pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
				FROM Procedure_Alert pca
				--LEFT JOIN USER_User u on pca.UserName=u.UserName
				INNER JOIN 
				(SELECT MIN(pa.ID) AS ID,pa.StepID,MIN(pa.DateTimeOfAction) AS DateTimeOfAction 
				FROM Procedure_Alert pa WHERE pa.actiontaken=0 AND AlertType = 1
				AND pa.ActionFinishTime >= GETDATE()  GROUP BY StepID) AS GroupMissedAlert 
				ON GroupMissedAlert.ID = pca.ID
				AND GroupMissedAlert.StepID = pca.StepID
				INNER JOIN PROCEDURE_Step ps ON GroupMissedAlert.StepID = ps.StepID
				INNER JOIN USER_User u on ps.UserName = u.UserName 
				INNER JOIN 	@Roletable rt ON u.RoleID = rt.RoleID	
				WHERE pca.CheckFrequency = 'Minutes'
				--AND r.RoleID IN  (SELECT RoleId FROM @Roletable)
				ORDER BY GroupMissedAlert.DateTimeOfAction ASC
			END

			--Hour Data
			IF @PermissionOnDepartments=''
			BEGIN				
				INSERT INTO @UpcomingAlert
				SELECT TOP 5 GroupMissedAlert.ID, GroupMissedAlert.StepID,ps.Name,GroupMissedAlert.DateTimeOfAction, 'B' + pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
				FROM Procedure_Alert pca
				INNER JOIN 
				(SELECT MIN(pa.ID) AS ID,pa.StepID,MIN(pa.DateTimeOfAction) AS DateTimeOfAction 
				FROM Procedure_Alert pa WHERE pa.actiontaken=0 AND AlertType = 1
				AND pa.ActionFinishTime >= GETDATE()  GROUP BY StepID) AS GroupMissedAlert 
				ON GroupMissedAlert.ID = pca.ID
				AND GroupMissedAlert.StepID = pca.StepID
				INNER JOIN PROCEDURE_Step ps
				ON GroupMissedAlert.StepID = ps.StepID
				WHERE pca.CheckFrequency = 'Hourly'
				ORDER BY GroupMissedAlert.DateTimeOfAction ASC
			END
			ELSE
			BEGIN
				INSERT INTO @UpcomingAlert
				SELECT TOP 5 GroupMissedAlert.ID, GroupMissedAlert.StepID,ps.Name,GroupMissedAlert.DateTimeOfAction, 'B' + pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
				FROM Procedure_Alert pca
				INNER JOIN 
				(SELECT MIN(pa.ID) AS ID,pa.StepID,MIN(pa.DateTimeOfAction) AS DateTimeOfAction 
				FROM Procedure_Alert pa WHERE pa.actiontaken=0 AND AlertType = 1
				AND pa.ActionFinishTime >= GETDATE()  GROUP BY StepID) AS GroupMissedAlert 
				ON GroupMissedAlert.ID = pca.ID
				AND GroupMissedAlert.StepID = pca.StepID
				INNER JOIN PROCEDURE_Step ps ON GroupMissedAlert.StepID = ps.StepID
				INNER JOIN USER_User u on ps.UserName = u.UserName 
				INNER JOIN 	@Roletable rt ON u.RoleID = rt.RoleID	
				WHERE pca.CheckFrequency = 'Hourly'
				ORDER BY GroupMissedAlert.DateTimeOfAction ASC
			END
			
			--Daily Data
			IF @PermissionOnDepartments=''
			BEGIN
				INSERT INTO @UpcomingAlert
				SELECT TOP 5 GroupMissedAlert.ID, GroupMissedAlert.StepID,ps.Name,GroupMissedAlert.DateTimeOfAction, 'C' + pca.CheckFrequency,pca.Comment,pca.AlertType, 0 As Active
				FROM Procedure_Alert pca
				INNER JOIN 
				(SELECT MIN(pa.ID) AS ID,pa.StepID,MIN(pa.DateTimeOfAction) AS DateTimeOfAction 
				FROM Procedure_Alert pa WHERE pa.actiontaken=0 AND AlertType = 1
				AND pa.ActionFinishTime >= GETDATE()  GROUP BY StepID) AS GroupMissedAlert 
				ON GroupMissedAlert.ID = pca.ID
				AND GroupMissedAlert.StepID = pca.StepID
				INNER JOIN PROCEDURE_Step ps
				ON GroupMissedAlert.StepID = ps.StepID
				WHERE pca.CheckFrequency = 'Daily'
				ORDER BY GroupMissedAlert.DateTimeOfAction ASC
			END
			ELSE
			BEGIN
				INSERT INTO @UpcomingAlert
				SELECT TOP 5 GroupMissedAlert.ID, GroupMissedAlert.StepID,ps.Name,GroupMissedAlert.DateTimeOfAction, 'C' + pca.CheckFrequency,pca.Comment,pca.AlertType, 0 As Active
				FROM Procedure_Alert pca
				INNER JOIN 
				(SELECT MIN(pa.ID) AS ID,pa.StepID,MIN(pa.DateTimeOfAction) AS DateTimeOfAction 
				FROM Procedure_Alert pa WHERE pa.actiontaken=0 AND AlertType = 1
				AND pa.ActionFinishTime >= GETDATE()  GROUP BY StepID) AS GroupMissedAlert 
				ON GroupMissedAlert.ID = pca.ID
				AND GroupMissedAlert.StepID = pca.StepID
				INNER JOIN PROCEDURE_Step ps ON GroupMissedAlert.StepID = ps.StepID
				INNER JOIN USER_User u on ps.UserName = u.UserName 
				INNER JOIN 	@Roletable rt ON u.RoleID = rt.RoleID	
				WHERE pca.CheckFrequency = 'Daily'
				ORDER BY GroupMissedAlert.DateTimeOfAction ASC
			END
			
			--Weekly Data
			IF @PermissionOnDepartments=''
			BEGIN
				INSERT INTO @UpcomingAlert
				SELECT TOP 5 GroupMissedAlert.ID, GroupMissedAlert.StepID,ps.Name,GroupMissedAlert.DateTimeOfAction, 'D' + pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
				FROM Procedure_Alert pca
				INNER JOIN 
				(SELECT MIN(pa.ID) AS ID,pa.StepID,MIN(pa.DateTimeOfAction) AS DateTimeOfAction 
				FROM Procedure_Alert pa WHERE pa.actiontaken=0 AND AlertType = 1
				AND pa.ActionFinishTime >= GETDATE()  GROUP BY StepID) AS GroupMissedAlert 
				ON GroupMissedAlert.ID = pca.ID
				AND GroupMissedAlert.StepID = pca.StepID
				INNER JOIN PROCEDURE_Step ps
				ON GroupMissedAlert.StepID = ps.StepID
				WHERE pca.CheckFrequency = 'Weekly'
				ORDER BY GroupMissedAlert.DateTimeOfAction ASC
			END
			ELSE
			BEGIN
				INSERT INTO @UpcomingAlert
				SELECT TOP 5 GroupMissedAlert.ID, GroupMissedAlert.StepID,ps.Name,GroupMissedAlert.DateTimeOfAction, 'D' + pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
				FROM Procedure_Alert pca
				INNER JOIN 
				(SELECT MIN(pa.ID) AS ID,pa.StepID,MIN(pa.DateTimeOfAction) AS DateTimeOfAction 
				FROM Procedure_Alert pa WHERE pa.actiontaken=0 AND AlertType = 1
				AND pa.ActionFinishTime >= GETDATE()  GROUP BY StepID) AS GroupMissedAlert 
				ON GroupMissedAlert.ID = pca.ID
				AND GroupMissedAlert.StepID = pca.StepID
				INNER JOIN PROCEDURE_Step ps ON GroupMissedAlert.StepID = ps.StepID
				INNER JOIN USER_User u on ps.UserName = u.UserName 
				INNER JOIN 	@Roletable rt ON u.RoleID = rt.RoleID	
				WHERE pca.CheckFrequency = 'Weekly'
				ORDER BY GroupMissedAlert.DateTimeOfAction ASC
			END	
			
			--Monthly Data
			IF @PermissionOnDepartments=''
			BEGIN
				INSERT INTO @UpcomingAlert
				SELECT TOP 5 GroupMissedAlert.ID, GroupMissedAlert.StepID,ps.Name,GroupMissedAlert.DateTimeOfAction, 'E' + pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
				FROM Procedure_Alert pca
				INNER JOIN 
				(SELECT MIN(pa.ID) AS ID,pa.StepID,MIN(pa.DateTimeOfAction) AS DateTimeOfAction 
				FROM Procedure_Alert pa WHERE pa.actiontaken=0  AND AlertType = 1
				AND pa.ActionFinishTime >= GETDATE()  GROUP BY StepID) AS GroupMissedAlert 
				ON GroupMissedAlert.ID = pca.ID
				AND GroupMissedAlert.StepID = pca.StepID
				INNER JOIN PROCEDURE_Step ps
				ON GroupMissedAlert.StepID = ps.StepID
				WHERE pca.CheckFrequency = 'Monthly'
				ORDER BY GroupMissedAlert.DateTimeOfAction ASC
			END
			ELSE
			BEGIN
				INSERT INTO @UpcomingAlert
				SELECT TOP 5 GroupMissedAlert.ID, GroupMissedAlert.StepID,ps.Name,GroupMissedAlert.DateTimeOfAction, 'E' + pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
				FROM Procedure_Alert pca
				INNER JOIN 
				(SELECT MIN(pa.ID) AS ID,pa.StepID,MIN(pa.DateTimeOfAction) AS DateTimeOfAction 
				FROM Procedure_Alert pa WHERE pa.actiontaken=0  AND AlertType = 1
				AND pa.ActionFinishTime >= GETDATE()  GROUP BY StepID) AS GroupMissedAlert 
				ON GroupMissedAlert.ID = pca.ID
				AND GroupMissedAlert.StepID = pca.StepID
				INNER JOIN PROCEDURE_Step ps ON GroupMissedAlert.StepID = ps.StepID
				INNER JOIN USER_User u on ps.UserName = u.UserName 
				INNER JOIN 	@Roletable rt ON u.RoleID = rt.RoleID				
				WHERE pca.CheckFrequency = 'Monthly'
				ORDER BY GroupMissedAlert.DateTimeOfAction ASC
			END
			
			--Yearly Data
			IF @PermissionOnDepartments=''
			BEGIN
				INSERT INTO @UpcomingAlert
				SELECT TOP 5 GroupMissedAlert.ID, GroupMissedAlert.StepID,ps.Name,GroupMissedAlert.DateTimeOfAction, 'F' + pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
				FROM Procedure_Alert pca
				INNER JOIN 
				(SELECT MIN(pa.ID) AS ID,pa.StepID,MIN(pa.DateTimeOfAction) AS DateTimeOfAction 
				FROM Procedure_Alert pa WHERE pa.actiontaken=0 AND AlertType = 1
				AND pa.ActionFinishTime >= GETDATE()  GROUP BY StepID) AS GroupMissedAlert 
				ON GroupMissedAlert.ID = pca.ID
				AND GroupMissedAlert.StepID = pca.StepID
				INNER JOIN PROCEDURE_Step ps
				ON GroupMissedAlert.StepID = ps.StepID
				WHERE pca.CheckFrequency = 'Yearly'
				ORDER BY GroupMissedAlert.DateTimeOfAction ASC
			END
			ELSE
			BEGIN
				INSERT INTO @UpcomingAlert
				SELECT TOP 5 GroupMissedAlert.ID, GroupMissedAlert.StepID,ps.Name,GroupMissedAlert.DateTimeOfAction, 'F' + pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
				FROM Procedure_Alert pca
				INNER JOIN 
				(SELECT MIN(pa.ID) AS ID,pa.StepID,MIN(pa.DateTimeOfAction) AS DateTimeOfAction 
				FROM Procedure_Alert pa WHERE pa.actiontaken=0 AND AlertType = 1
				AND pa.ActionFinishTime >= GETDATE()  GROUP BY StepID) AS GroupMissedAlert 
				ON GroupMissedAlert.ID = pca.ID
				AND GroupMissedAlert.StepID = pca.StepID
				INNER JOIN PROCEDURE_Step ps ON GroupMissedAlert.StepID = ps.StepID
				INNER JOIN USER_User u on ps.UserName = u.UserName 
				INNER JOIN 	@Roletable rt ON u.RoleID = rt.RoleID	
				WHERE pca.CheckFrequency = 'Yearly'
				ORDER BY GroupMissedAlert.DateTimeOfAction ASC
			END
			
			--Procedure Review alerts
			IF @PermissionOnDepartments=''
			BEGIN
				INSERT INTO @UpcomingAlert
				SELECT TOP 5 GroupMissedAlert.ID, GroupMissedAlert.StepID,ps.Name,GroupMissedAlert.DateTimeOfAction, 'G' + pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
				FROM Procedure_Alert pca
				INNER JOIN 
				(SELECT MIN(pa.ID) AS ID,pa.StepID,MIN(pa.DateTimeOfAction) AS DateTimeOfAction 
				FROM Procedure_Alert pa WHERE pa.actiontaken=0 AND AlertType = 2
				AND pa.DateTimeOfAction > GETDATE()  GROUP BY StepID) AS GroupMissedAlert 
				ON GroupMissedAlert.ID = pca.ID
				AND GroupMissedAlert.StepID = pca.StepID
				INNER JOIN PROCEDURE_Step ps
				ON GroupMissedAlert.StepID = ps.StepID
				WHERE pca.CheckFrequency = 'ProcedureReview' AND AlertType = 2
				ORDER BY GroupMissedAlert.DateTimeOfAction ASC
			END
			ELSE
			BEGIN
				INSERT INTO @UpcomingAlert
				SELECT TOP 5 GroupMissedAlert.ID, GroupMissedAlert.StepID,ps.Name,GroupMissedAlert.DateTimeOfAction, 'G' + pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
				FROM Procedure_Alert pca
				INNER JOIN 
				(SELECT MIN(pa.ID) AS ID,pa.StepID,MIN(pa.DateTimeOfAction) AS DateTimeOfAction 
				FROM Procedure_Alert pa WHERE pa.actiontaken=0 AND AlertType = 2
				AND pa.DateTimeOfAction > GETDATE()  GROUP BY StepID) AS GroupMissedAlert 
				ON GroupMissedAlert.ID = pca.ID
				AND GroupMissedAlert.StepID = pca.StepID
				INNER JOIN PROCEDURE_Step ps ON GroupMissedAlert.StepID = ps.StepID
				INNER JOIN USER_User u on ps.UserName = u.UserName 
				INNER JOIN 	@Roletable rt ON u.RoleID = rt.RoleID
				WHERE pca.CheckFrequency = 'ProcedureReview' AND AlertType = 2
				ORDER BY GroupMissedAlert.DateTimeOfAction ASC
			END
			
			--Supplier Review alerts
			INSERT INTO @UpcomingAlert
			SELECT TOP 5 GroupMissedAlert.ID, GroupMissedAlert.StepID,ps.SupplierName,GroupMissedAlert.DateTimeOfAction, 'H' + pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
			FROM Procedure_Alert pca
			INNER JOIN 
			(SELECT MIN(pa.ID) AS ID,pa.StepID,MIN(pa.DateTimeOfAction) AS DateTimeOfAction 
			FROM Procedure_Alert pa WHERE pa.actiontaken=0 AND AlertType = 3
			AND pa.DateTimeOfAction > GETDATE()  GROUP BY StepID) AS GroupMissedAlert 
			ON GroupMissedAlert.ID = pca.ID
			AND GroupMissedAlert.StepID = pca.StepID
			INNER JOIN STOCKCONTROL_Supplier ps
			ON GroupMissedAlert.StepID = ps.SupplierID
			WHERE pca.CheckFrequency = 'SupplierReview' AND AlertType = 3
			ORDER BY GroupMissedAlert.DateTimeOfAction ASC
			
			--Object Review alerts
			INSERT INTO @UpcomingAlert
			SELECT TOP 5 GroupMissedAlert.ID, GroupMissedAlert.StepID,ps.DescriptionShortName,GroupMissedAlert.DateTimeOfAction, 'I' + pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
			FROM Procedure_Alert pca
			INNER JOIN 
			(SELECT MIN(pa.ID) AS ID,pa.StepID,MIN(pa.DateTimeOfAction) AS DateTimeOfAction 
			FROM Procedure_Alert pa WHERE pa.actiontaken=0 AND AlertType = 4
			AND pa.DateTimeOfAction > GETDATE()  GROUP BY StepID) AS GroupMissedAlert 
			ON GroupMissedAlert.ID = pca.ID
			AND GroupMissedAlert.StepID = pca.StepID
			INNER JOIN LOCATION_ObjectNew ps ON GroupMissedAlert.StepID = ps.ObjectID
			WHERE pca.CheckFrequency = 'ObjectReview' AND AlertType = 4
			ORDER BY GroupMissedAlert.DateTimeOfAction ASC
			
			--Object Service alerts
			INSERT INTO @UpcomingAlert
			SELECT TOP 5 GroupMissedAlert.ID, GroupMissedAlert.StepID,ps.DescriptionShortName,GroupMissedAlert.DateTimeOfAction, 'JObjectService' ,pca.Comment, pca.AlertType, 0 As Active
			FROM Procedure_Alert pca
			INNER JOIN 
			(SELECT MIN(pa.ID) AS ID,pa.StepID,MIN(pa.DateTimeOfAction) AS DateTimeOfAction 
			FROM Procedure_Alert pa WHERE pa.actiontaken=0 AND AlertType = 5
			AND pa.DateTimeOfAction > GETDATE()  GROUP BY StepID) AS GroupMissedAlert 
			ON GroupMissedAlert.ID = pca.ID
			AND GroupMissedAlert.StepID = pca.StepID
			INNER JOIN LOCATION_ObjectNew ps ON GroupMissedAlert.StepID = ps.ObjectID
			WHERE AlertType = 5
			ORDER BY GroupMissedAlert.DateTimeOfAction ASC
			
			--Object PATTest alerts
			INSERT INTO @UpcomingAlert
			SELECT TOP 5 GroupMissedAlert.ID, GroupMissedAlert.StepID,ps.DescriptionShortName,GroupMissedAlert.DateTimeOfAction, 'K' + pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
			FROM Procedure_Alert pca
			INNER JOIN 
			(SELECT MIN(pa.ID) AS ID,pa.StepID,MIN(pa.DateTimeOfAction) AS DateTimeOfAction 
			FROM Procedure_Alert pa WHERE pa.actiontaken=0 AND AlertType = 6
			AND pa.DateTimeOfAction > GETDATE()  GROUP BY StepID) AS GroupMissedAlert 
			ON GroupMissedAlert.ID = pca.ID
			AND GroupMissedAlert.StepID = pca.StepID
			INNER JOIN LOCATION_ObjectNew ps ON GroupMissedAlert.StepID = ps.ObjectID
			WHERE pca.CheckFrequency = 'ObjectPATTest' AND AlertType = 6
			ORDER BY GroupMissedAlert.DateTimeOfAction ASC
			
			--ServiceCompany ReviewDate alerts
			INSERT INTO @UpcomingAlert
			SELECT TOP 5 GroupMissedAlert.ID, GroupMissedAlert.StepID,ps.ServiceCompanyName,GroupMissedAlert.DateTimeOfAction, 'L' + pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
			FROM Procedure_Alert pca
			INNER JOIN 
			(SELECT MIN(pa.ID) AS ID,pa.StepID,MIN(pa.DateTimeOfAction) AS DateTimeOfAction 
			FROM Procedure_Alert pa WHERE pa.actiontaken=0 AND AlertType = 7
			AND pa.DateTimeOfAction > GETDATE()  GROUP BY StepID) AS GroupMissedAlert 
			ON GroupMissedAlert.ID = pca.ID
			AND GroupMissedAlert.StepID = pca.StepID
			INNER JOIN STOCKCONTROL_ServiceCompany ps ON GroupMissedAlert.StepID = ps.ServiceCompanyID
			WHERE pca.CheckFrequency = 'ServiceCompanyReview' AND AlertType = 7
			ORDER BY GroupMissedAlert.DateTimeOfAction ASC
			
			--Complaint Review alerts
			INSERT INTO @UpcomingAlert
			SELECT TOP 5 GroupMissedAlert.ID, GroupMissedAlert.StepID,ps.ReportNumber,GroupMissedAlert.DateTimeOfAction, 'M' + pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
			FROM Procedure_Alert pca
			INNER JOIN 
			(SELECT MIN(pa.ID) AS ID,pa.StepID,MIN(pa.DateTimeOfAction) AS DateTimeOfAction 
			FROM Procedure_Alert pa WHERE pa.actiontaken=0 AND AlertType = 8
			AND pa.DateTimeOfAction > GETDATE()  GROUP BY StepID) AS GroupMissedAlert 
			ON GroupMissedAlert.ID = pca.ID
			AND GroupMissedAlert.StepID = pca.StepID
			INNER JOIN Complaint ps ON GroupMissedAlert.StepID = ps.id
			WHERE pca.CheckFrequency = 'ComplaintReview' AND AlertType = 8
			ORDER BY GroupMissedAlert.DateTimeOfAction ASC
			
			--Training Course Alert
			INSERT INTO @UpcomingAlert
			SELECT TOP 5 GroupMissedAlert.ID, GroupMissedAlert.StepID,ps.CourseName,GroupMissedAlert.DateTimeOfAction, 'N' + pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
			FROM Procedure_Alert pca
			INNER JOIN 
			(SELECT MIN(pa.ID) AS ID,pa.StepID,MIN(pa.DateTimeOfAction) AS DateTimeOfAction 
			FROM Procedure_Alert pa WHERE pa.actiontaken=0 AND AlertType = 9
			AND pa.ActionFinishTime > GETDATE()  GROUP BY StepID) AS GroupMissedAlert 
			ON GroupMissedAlert.ID = pca.ID
			AND GroupMissedAlert.StepID = pca.StepID
			INNER JOIN RANGER_TrainingCourse ps ON GroupMissedAlert.StepID = ps.TrainingCourseID
			WHERE pca.CheckFrequency = 'TrainingAlert' AND AlertType = 9
			ORDER BY GroupMissedAlert.DateTimeOfAction ASC
			
			--Forced Stock Alert
			INSERT INTO @UpcomingAlert
			SELECT TOP 5 GroupMissedAlert.ID, GroupMissedAlert.StepID,ps.Name,GroupMissedAlert.DateTimeOfAction, 'O' + pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
			FROM Procedure_Alert pca
			INNER JOIN 
			(SELECT MIN(pa.ID) AS ID,pa.StepID,MIN(pa.DateTimeOfAction) AS DateTimeOfAction 
			FROM Procedure_Alert pa WHERE pa.actiontaken=0 AND AlertType = 10
			AND pa.ActionFinishTime > GETDATE()  GROUP BY StepID) AS GroupMissedAlert 
			ON GroupMissedAlert.ID = pca.ID
			AND GroupMissedAlert.StepID = pca.StepID
			INNER JOIN STOCKCONTROL_ForcedStockCheck ps ON GroupMissedAlert.StepID = ps.ForcedStockCheckID
			WHERE pca.CheckFrequency = 'ForcedStockAlert' AND AlertType = 10
			ORDER BY GroupMissedAlert.DateTimeOfAction ASC
			
			----Min Stock Alert
			--INSERT INTO @UpcomingAlert
			--SELECT TOP 5 GroupMissedAlert.ID, GroupMissedAlert.StepID,ps.ProductCode,GroupMissedAlert.DateTimeOfAction, 'O' + pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
			--FROM Procedure_Alert pca
			--INNER JOIN 
			--(SELECT MIN(pa.ID) AS ID,pa.StepID,MIN(pa.DateTimeOfAction) AS DateTimeOfAction 
			--FROM Procedure_Alert pa WHERE pa.actiontaken=0 AND AlertType = 11
			--AND pa.ActionFinishTime > GETDATE()  GROUP BY StepID) AS GroupMissedAlert 
			--ON GroupMissedAlert.ID = pca.ID
			--AND GroupMissedAlert.StepID = pca.StepID
			--INNER JOIN STOCKCONTROL_Product ps ON GroupMissedAlert.StepID = ps.ProductID
			--WHERE pca.CheckFrequency = 'MinStockAlert' AND AlertType = 11
			--ORDER BY GroupMissedAlert.DateTimeOfAction ASC
			
			
			--Supplier BRC Expiry alerts
			INSERT INTO @UpcomingAlert
			SELECT TOP 5 GroupMissedAlert.ID, GroupMissedAlert.StepID,ps.SupplierName,GroupMissedAlert.DateTimeOfAction, 'P' + pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
			FROM Procedure_Alert pca
			INNER JOIN 
			(SELECT MIN(pa.ID) AS ID,pa.StepID,MIN(pa.DateTimeOfAction) AS DateTimeOfAction 
			FROM Procedure_Alert pa WHERE pa.actiontaken=0 AND AlertType = 11
			AND pa.DateTimeOfAction > GETDATE()  GROUP BY StepID) AS GroupMissedAlert 
			ON GroupMissedAlert.ID = pca.ID
			AND GroupMissedAlert.StepID = pca.StepID
			INNER JOIN STOCKCONTROL_Supplier ps
			ON GroupMissedAlert.StepID = ps.SupplierID
			WHERE pca.CheckFrequency = 'SupplierBRC_ExpiryDate' AND AlertType = 11
			ORDER BY GroupMissedAlert.DateTimeOfAction ASC
			
			--CorrectiveActionAlert 
			INSERT INTO @UpcomingAlert
			SELECT TOP 5 GroupMissedAlert.ID, GroupMissedAlert.StepID, ISNULL(ps.WorkRequestNo + ' - ','') + ps.ExceptionMessage, GroupMissedAlert.DateTimeOfAction, 'P' + pca.CheckFrequency,pca.Comment, pca.AlertType, 0 As Active
			FROM Procedure_Alert pca
			INNER JOIN 
			(SELECT MIN(pa.ID) AS ID, pa.StepID, MIN(pa.DateTimeOfAction) AS DateTimeOfAction 
			FROM Procedure_Alert pa WHERE pa.actiontaken=0 AND AlertType = 13
			AND pa.DateTimeOfAction > GETDATE()  GROUP BY StepID) AS GroupMissedAlert 
			ON GroupMissedAlert.ID = pca.ID
			AND GroupMissedAlert.StepID = pca.StepID
			INNER JOIN RANGER_Exception ps ON GroupMissedAlert.StepID = ps.ExceptionID
			WHERE pca.CheckFrequency = 'CorrectiveActionAlert' AND AlertType = 13
			ORDER BY GroupMissedAlert.DateTimeOfAction ASC
			
			SELECT * FROM @UpcomingAlert
		END

GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_ins_or_upd_ReviewAlert]    Script Date: 07/12/2012 11:41:10 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





/*
	Author:				TITU
	Date:				11/07/2012 

	Description:		Insert/UPDATE record in PROCEDURE_Alert

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_ins_or_upd_ReviewAlert]
---------Parameters----------
@StepID int,
@CheckFrequency nvarchar(50),
@DateTimeOfAction datetime,
@ActionTaken Bit,
@Comment nvarchar(512) = NULL,
@ResolvedDateTime datetime = NULL,
@AlertType INT ,

@RecordID bigint OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RecordID = 0
	SET @Success = 0

	SELECT Top 1 @RecordID = ID FROM Procedure_Alert WHERE StepID = @StepID AND AlertType = @AlertType 
	
	IF @RecordID = 0
		BEGIN
			INSERT INTO	dbo.Procedure_Alert											WITH (ROWLOCK)
					(
					StepID, CheckFrequency, DateTimeOfAction, ActionTaken, Comment, CreateDateTime, ResolvedDateTime, AlertType
					)
			VALUES
					(
					@StepID, @CheckFrequency, @DateTimeOfAction, @ActionTaken, @Comment, GETDATE(), @ResolvedDateTime, @AlertType
					)

			SET @RecordID = SCOPE_IDENTITY()
		END
	ELSE
		BEGIN
			UPDATE dbo.Procedure_Alert 
			SET
			DateTimeOfAction = @DateTimeOfAction,
			Comment = @Comment,
			IsHistory = 0
			WHERE 
			ID = @RecordID
		END	
	SET @Success = 1
	RETURN 1
	
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_ins_or_upd_ReviewAlert',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1


GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_ins_Alert]    Script Date: 07/12/2012 11:41:10 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





/*
	Author:				MSH
	Date:				29/10/2011 15:00

	Description:		Insert record in PROCEDURE_Alert

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_ins_Alert]
---------Parameters----------
@StepID int,
@CheckFrequency nvarchar(50),
@DateTimeOfAction datetime,
@ActionFinishTime datetime = NULL,
@ActionTaken Bit,
@Comment nvarchar(512) = NULL,
@CreateDateTime datetime,
@ResolvedDateTime datetime = NULL,
@AlertType INT = NULL,

@RecordID bigint OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RecordID = 0
	SET @Success = 0

	
	/************
	INSERT RECORD
	************/	
	IF NOT EXISTS(SELECT ID FROM PROCEDURE_Alert WHERE StepID = @StepID AND CheckFrequency = @CheckFrequency AND DateTimeOfAction = @DateTimeOfAction AND AlertType = @AlertType )
	
	BEGIN
		INSERT INTO	dbo.Procedure_Alert											WITH (ROWLOCK)
				(
				StepID, CheckFrequency, DateTimeOfAction, ActionFinishTime, ActionTaken, Comment, CreateDateTime, ResolvedDateTime, AlertType ,UpdatedOn
				)
		VALUES
				(
				@StepID, @CheckFrequency, @DateTimeOfAction, @ActionFinishTime, @ActionTaken, @Comment, @CreateDateTime, @ResolvedDateTime, @AlertType,GETDATE()
				)

		SET @RecordID = SCOPE_IDENTITY()
	END
	SET @Success = 1
	RETURN 1
	
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_ins_Alert',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1


GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_Alert]    Script Date: 07/13/2012 15:48:48 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_upd_Alert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_upd_Alert]
GO


/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_Alert]    Script Date: 07/13/2012 15:48:48 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




/*
	Author:				TR
	Date:				29/06/2009 14:35

	Description:		Update record in PROCEDURE_JobDetail

	History		Name		Date		Mod		
	=============================================================================================================================================
	Resolve only respective alert 


	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_upd_Alert]
---------Parameters----------
--@StepID int,

@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 


DECLARE @ReadingDateTime DateTime
DECLARE @StepID INT
DECLARE @AlertID INT
DECLARE @DateTimeOfAction DateTime
DECLARE @ActionFinishTime DateTime

--DECLARE @ProcedureStepTempTable table
--	(
--		StepID INT,
--		Processed BIT
--	)

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY

	SET @Success = 0
	SET @ErrorMsg = ''
	
	DECLARE @ProcedureStepTempTable table
	(
		AlertID INT,
		StepID INT,
		DateTimeOfAction DATETIME,
		ActionFinishTime DATETIME,
		Processed BIT
	)
	
	INSERT INTO @ProcedureStepTempTable(AlertID, StepID, DateTimeOfAction, ActionFinishTime, Processed) 
	SELECT DISTINCT ID, StepID, DateTimeOfAction, ActionFinishTime, 0
	FROM Procedure_Alert 
	WHERE ActionTaken = 0 AND AlertType = 1 AND ISNULL(IsHistory,0) = 0 AND StepID>0 
	
	
	WHILE EXISTS( SELECT TOP 1 StepID FROM @ProcedureStepTempTable WHERE Processed =0) 
		BEGIN
		
			SELECT TOP 1 @AlertID = AlertID, @StepID = StepID, @DateTimeOfAction = DateTimeOfAction, @ActionFinishTime = ActionFinishTime 
			FROM @ProcedureStepTempTable WHERE Processed = 0
			
			--IF @StepID > 0 
				--BEGIN
					SET @ReadingDateTime = NULL
					SELECT @ReadingDateTime = MAX(jd.ReadingDate) 
					FROM PROCEDURE_JobDetail jd
					INNER JOIN PROCEDURE_StepDetail sd ON jd.StepDetailID = sd.StepDetailID --AND sd.StepID = @StepID
					WHERE sd.StepID = @StepID AND(jd.ReadingDate BETWEEN @DateTimeOfAction AND @ActionFinishTime)

					/************
					UPDATE RECORD
					************/
					
					IF @ReadingDateTime IS NOT NULL												
						BEGIN
							--IF EXISTS(SELECT ID FROM Procedure_Alert WHERE ID = @AlertID  AND DateTimeOfAction < @ReadingDateTime AND ActionFinishTime >= @ReadingDateTime )
							--	BEGIN
								--print @StepID 
								UPDATE	Procedure_Alert	WITH (ROWLOCK)

								SET 	ActionTaken = 1,
										ResolvedDateTime = GETDATE()
										WHERE ID = @AlertID AND DateTimeOfAction < @ReadingDateTime AND ActionFinishTime >= @ReadingDateTime 
								--END
						END
					
					
				--END
				
				UPDATE @ProcedureStepTempTable SET Processed = 1 WHERE AlertID = @AlertID
		END
		
		SET @Success = 1
		
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_upd_Alert',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_Alert]    Script Date: 07/13/2012 15:48:48 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_upd_ForceStockAlert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_upd_ForceStockAlert]
GO


/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_Alert]    Script Date: 07/13/2012 15:48:48 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




/*
	Author:				Titu JR
	Date:				29/05/2013 14:35

	Description:		Update record in PROCEDURE_Alert

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_upd_ForceStockAlert]
---------Parameters----------
--@StepID int,

@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 


DECLARE @ReadingDateTime DateTime
DECLARE @StepID INT
--DECLARE @ProcedureStepTempTable table
--	(
--		StepID INT,
--		Processed BIT
--	)

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY

	SET @Success = 0
	
	DECLARE @ProcedureStepTempTable table
	(
		StepID INT,
		Processed BIT
	)
	
	INSERT INTO @ProcedureStepTempTable(StepID,Processed) SELECT DISTINCT(StepID), 0 FROM Procedure_Alert WHERE ActionTaken = 0 AND AlertType = 10
	
	
	WHILE (SELECT COUNT(StepID) FROM @ProcedureStepTempTable WHERE Processed =0) > 0
		BEGIN
		
			SELECT TOP 1 @StepID = StepID FROM @ProcedureStepTempTable WHERE Processed = 0
			
			IF @StepID > 0 
				BEGIN
					SELECT @ReadingDateTime = MAX(ScanDateTime) FROM STOCKCONTROL_StockCheck
					WHERE STOCKCONTROL_StockCheck.ForceStockCheckID in
					(SELECT ForcedStockCheckID FROM STOCKCONTROL_ForcedStockCheck
					WHERE ForcedStockCheckID = @StepID)

					/************
					UPDATE RECORD
					************/
					
					IF @ReadingDateTime IS NOT NULL
						
						
						BEGIN
							IF EXISTS(SELECT * FROM Procedure_Alert WHERE StepID = @StepID AND ActionTaken = 0  AND DateTimeOfAction < @ReadingDateTime AND ActionFinishTime >= @ReadingDateTime AND AlertType = 10)
								BEGIN
								--print @StepID 
								UPDATE	Procedure_Alert	WITH (ROWLOCK)

								SET 	ActionTaken = 1,
										ResolvedDateTime = GETDATE()
										WHERE StepID = @StepID AND ActionTaken = 0  AND DateTimeOfAction < @ReadingDateTime AND ActionFinishTime >= @ReadingDateTime AND AlertType = 10
								END
						END
					
					
				END
				
				UPDATE @ProcedureStepTempTable SET Processed = 1 WHERE StepID = @StepID
		END
		
		SET @Success = 1
		
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_upd_ForceStockAlert',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO



IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_upd_AlertHistory]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_upd_AlertHistory]
GO

/*
	Author:				Titu(Jr)
	Date:				01-Feb-2013

	Description:		Update IsHistory in alert

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/

Create PROCEDURE [dbo].[PROCEDURE_usp_upd_AlertHistory]

---------Parameters----------
@ID BIGINT,
@IsHistory BIT,
@Success bit OUTPUT

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)

BEGIN TRY
	SET @ErrorMsg = ''
	SET @Success = 0

	UPDATE	Procedure_Alert												WITH (ROWLOCK)
	SET		IsHistory = @IsHistory
	WHERE	ID = @ID	

	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) = '##'
		BEGIN	
			/*SET @ErrorParamsData =	'@Barcode = ' + @Barcode + ', @Pallet_No = ' +  CAST(@Pallet_No AS nvarchar(8))  + */

			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[PROCEDURE_usp_upd_AlertHistory]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_upd_OldMissedAlertToHistory]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_upd_OldMissedAlertToHistory]
GO

/*
	Author:				Titu(Jr)
	Date:				28-Jan-2014

	Description:		Make Older MissedAlert To History

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/

Create PROCEDURE [dbo].[PROCEDURE_usp_upd_OldMissedAlertToHistory]

---------Parameters----------
@Success bit OUTPUT

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)
DECLARE @ExpireDays INT

BEGIN TRY
	SET @ErrorMsg = ''
	SET @Success = 0
	
	SELECT @ExpireDays = MissedEventShowDays  FROM App_System 

	UPDATE	Procedure_Alert												WITH (ROWLOCK)
	SET		IsHistory = 1
	WHERE	 dateadd(day, @ExpireDays, DateTimeOfAction) < GETDATE()

	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) = '##'
		BEGIN	
			/*SET @ErrorParamsData =	'@Barcode = ' + @Barcode + ', @Pallet_No = ' +  CAST(@Pallet_No AS nvarchar(8))  + */

			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[PROCEDURE_usp_upd_OldMissedAlertToHistory]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_upd_JobArchive]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_upd_JobArchive]
GO

/*
	Author:				Titu(Jr)
	Date:				01-Feb-2013

	Description:		Update IsArchive in Job

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/

Create PROCEDURE [dbo].[PROCEDURE_usp_upd_JobArchive]

---------Parameters----------
@ID BIGINT,
@IsArchived BIT,
@Success bit OUTPUT

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)

BEGIN TRY
	SET @ErrorMsg = ''
	SET @Success = 0

	UPDATE	PROCEDURE_Job												WITH (ROWLOCK)
	SET		IsArchived = @IsArchived
	WHERE	JobID = @ID	

	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) = '##'
		BEGIN	
			/*SET @ErrorParamsData =	'@Barcode = ' + @Barcode + ', @Pallet_No = ' +  CAST(@Pallet_No AS nvarchar(8))  + */

			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[PROCEDURE_usp_upd_JobArchive]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_sel_MissedEvents]    Script Date: 07/13/2012 15:48:48 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_sel_MissedEvents]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_sel_MissedEvents]
GO
/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_sel_MissedEvents]    Script Date: 01/22/2013 14:01:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				MSH
	Date:				29/10/2011 11:16

	Description:		Select records from PROCEDURE_usp_sel_MissedEvents

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_sel_MissedEvents]
---------Parameters----------
@EmailCount INT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 
DECLARE @dts DATETIME
SET NOCOUNT ON

SET @dts = GETDATE()

BEGIN TRY
	
	UPDATE Procedure_Alert 
	SET MailQueueStatus = 2,
		LastUpdatedOn = @dts
	WHERE ID IN
	(SELECT TOP (@EmailCount) ID
	FROM Procedure_Alert
	WHERE 
		ActionTaken = 0
	AND (EmailSent = 0 OR EmailSent IS NULL)
	AND (MailQueueStatus = 1 OR MailQueueStatus IS NULL)
	--AND EmailFailCount < 5
	AND AlertType = 1
	)
	
	
	SELECT pca.ID, pca.StepID,ps.Name,pca.DateTimeOfAction,pca.CheckFrequency,pca.Comment,ps.AssigneeIDList, pca.EmailSent--, pca.EmailFailCount
	FROM Procedure_Alert pca
	INNER JOIN PROCEDURE_Step ps
	ON ps.StepID = pca.StepID
	WHERE pca.ActionTaken = 0
	AND (pca.EmailSent = 0 OR pca.EmailSent IS NULL)
	AND (pca.MailQueueStatus = 2 AND pca.LastUpdatedOn = @dts)
	--AND pca.EmailFailCount < 5
	AND pca.AlertType = 1

	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 



	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_sel_MissedEvents',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1


GO

/****** Object:  StoredProcedure [dbo].[RANGER_Training_usp_sel_UpcomingTrainingEvents]    Script Date: 07/13/2012 15:48:48 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RANGER_Training_usp_sel_UpcomingTrainingEvents]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RANGER_Training_usp_sel_UpcomingTrainingEvents]
GO
/****** Object:  StoredProcedure [dbo].[RANGER_Training_usp_sel_UpcomingTrainingEvents]    Script Date: 01/17/2013 17:36:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				MSH
	Date:				29/10/2011 11:16

	Description:		Select records from RANGER_Training_usp_sel_UpcomingTrainingEvents

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[RANGER_Training_usp_sel_UpcomingTrainingEvents]
---------Parameters----------
@EmailCount INT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 
DECLARE @dts DATETIME
SET NOCOUNT ON

SET @dts = GETDATE()

BEGIN TRY
	
	UPDATE Procedure_Alert 
	SET MailQueueStatus = 2,
		LastUpdatedOn = @dts
	WHERE ID IN
	(SELECT TOP (@EmailCount) ID
	FROM Procedure_Alert 
	WHERE  
		ActionTaken = 0
	AND (EmailSent = 0 OR EmailSent IS NULL)
	AND (MailQueueStatus = 1 OR MailQueueStatus IS NULL)
	AND DateTimeOfAction < DATEADD(HOUR,(SELECT ReminderHour FROM RANGER_TrainingCourse where TrainingCourseID = StepID ),@dts)
    AND AlertType = 9)
    
    SELECT pca.ID, pca.StepID,rt.CourseName as Name,pca.DateTimeOfAction,pca.CheckFrequency,pca.Comment,rt.AttendeeList as AssigneeIDList, pca.EmailSent ,rt.Location,(SELECT FirstName+' '+LastName From USER_User where UserID=rt.OrganizerID)as OrganizerName
	FROM Procedure_Alert pca
	INNER JOIN RANGER_TrainingCourse rt
	ON rt.TrainingCourseID = pca.StepID
	WHERE pca.LastUpdatedOn = @dts
	AND (pca.MailQueueStatus = 2)
	AND ActionTaken = 0
	AND (EmailSent = 0 OR EmailSent IS NULL)	
    AND AlertType = 9
	
	
    

	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 



	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'RANGER_Training_usp_sel_UpcomingTrainingEvents',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
	GO


--=================================================
--Storeprocedures related to Complaints module
--=================================================

/****** Object:  StoredProcedure [dbo].[Complaint_usp_upd_Complaint]    Script Date: 07/19/2012 17:05:15 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Complaint_usp_upd_Complaint]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[Complaint_usp_upd_Complaint]
GO

/****** Object:  StoredProcedure [dbo].[Complaint_usp_sel_Complaint]    Script Date: 07/19/2012 17:05:15 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Complaint_usp_sel_Complaint]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[Complaint_usp_sel_Complaint]
GO

/****** Object:  StoredProcedure [dbo].[Complaint_usp_ins_Complaint]    Script Date: 07/19/2012 17:05:15 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Complaint_usp_ins_Complaint]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[Complaint_usp_ins_Complaint]
GO
/****** Object:  StoredProcedure [dbo].[Complaint_usp_upd_Complaint]    Script Date: 01/07/2013 20:21:17 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




/*
	Author:				Titu
	Date:				13/07/2012 
	Description:		Update record in Complaint

	History		Name		Date		Mod		
	=============================================================================================================================================


	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[Complaint_usp_upd_Complaint]
---------Parameters----------
@Id INT,
@ReportedDate datetime,
@ReportTakenBy nvarchar(16),
@CustomerID int,
@Contact NVARCHAR(30) = NULL,
@ComplainCost decimal(18,2) = NULL,
@Description NVARCHAR(1024) = NULL,
@ComplaintCodeId INT = NULL,
@Action NVARCHAR(200) = NULL,
@ActionedBy nvarchar(16) = NULL,
@CorrectedBy nvarchar(16) = NULL,
@Investigation NVARCHAR(400) = NULL,
@RiskAssessmentTimescale Datetime = NULL,
@CustomerNote NVARCHAR(200) = NULL,
@ProductNote NVARCHAR(200) = NULL,
@ReviewDate DATETIME = NULL,
@Position NVARCHAR(300) = NULL,
@PrintName NVARCHAR(300) = NULL,
@IsSatisfactory BIT = NULL,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

DECLARE @ObjectType INT
DECLARE @EventID INT
DECLARE @ObjectID INT

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF @Id > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		Id
							FROM		Complaint				WITH (READUNCOMMITTED)
							WHERE 		Id = @Id
							)
			BEGIN
				SET @ErrorMsg = '##01Table Complaint - Could not find record ' + CAST(@Id AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END	
			
			UPDATE	Complaint					WITH (ROWLOCK)
			SET 	ReportedDate = @ReportedDate,
					ReportTakenBy = @ReportTakenBy,
					CustomerID = @CustomerID,
					Contact = @Contact,
					ComplainCost = @ComplainCost,
					[Description] = @Description,
					ComplaintCodeId = @ComplaintCodeId,
					[Action] = @Action,
					ActionedBy = @ActionedBy,
					CorrectedBy = @CorrectedBy,
					Investigation=@Investigation,
					RiskAssessmentTimescale=@RiskAssessmentTimescale,
					CustomerNote =  @CustomerNote	,
					ProductNote = @ProductNote,
					ReviewDate=@ReviewDate,
					Position=@Position ,
					PrintName=@PrintName ,
					IsSatisfactory=@IsSatisfactory 			
					
			WHERE	Id = @Id	
			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@Id AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'Complaint_usp_upd_Complaint',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1


GO


/****** Object:  StoredProcedure [dbo].[Complaint_usp_sel_Complaint]    Script Date: 01/07/2013 20:16:38 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[Complaint_usp_sel_Complaint]
---------Parameters----------
@Id INT = NULL,
@SQL_WHERE nvarchar(4000) = NULL

AS

DECLARE @SQL_STRING nvarchar (4000)

SET NOCOUNT ON
SET DATEFORMAT dmy

		IF ISNULL(@Id,0) <> 0 
		/**************************
			RETURN SPECIFIC RECORDS
		**************************/
		
		BEGIN
			SELECT compt.Id, compt.ReportNumber, compt.ReportedDate, compt.ReportTakenBy, compt.CustomerNote,compt.ProductNote,
			ISNULL(rptTakenBy.FirstName+' ','') + ISNULL(rptTakenBy.LastName,'') ReportTakenByName,
			compt.CustomerID, customer.CustomerName, 
			ISNULL(customer.Address1+', ','')+ISNULL(customer.Address2+', ','')+ISNULL(customer.Address3+', ','')+ISNULL(customer.Address4,'') CustomerAddress, 
			customer.TelNo1 CustomerPhone,  compt.Contact, compt.ComplainCost,compt.Description, 
			compt.ComplaintCodeId, ccode.ComplaintCode, compt.Action, 
			compt.ActionedBy, ISNULL(rptActionedBy.FirstName+' ','') + ISNULL(rptActionedBy.LastName,'') ActionedByName,compt.ReviewDate,compt.Position,compt.PrintName,compt.IsSatisfactory,
			compt.CorrectedBy, ISNULL(rptCorrectedBy.FirstName+' ','') + ISNULL(rptCorrectedBy.LastName,'') CorrectedByName,compt.Investigation,compt.RiskAssessmentTimescale
			from Complaint compt 
			INNER JOIN USER_User as rptTakenBy on compt.ReportTakenBy = rptTakenBy.UserName
			LEFT JOIN dbo.STOCKCONTROL_Customer customer on compt.CustomerID = customer.CustomerID
			LEFT JOIN dbo.ComplaintCode ccode on compt.ComplaintCodeId = ccode.Id
			LEFT JOIN USER_User as rptActionedBy on compt.ActionedBy = rptActionedBy.UserName
			LEFT JOIN USER_User as rptCorrectedBy on compt.CorrectedBy = rptCorrectedBy.UserName	
			WHERE		compt.Id = @Id
			ORDER BY 	compt.ReportedDate DESC
			RETURN
		END

	IF ISNULL(@SQL_WHERE,'') <> '' 
		/*********************************************
			SELECT RECORDS ACCORDING TO WHERE CRITERIA
		*********************************************/
		BEGIN
			SET @SQL_STRING = 'SELECT compt.Id, compt.ReportNumber, compt.ReportedDate, compt.ReportTakenBy ,compt.CustomerNote , compt.ProductNote,
			ISNULL(rptTakenBy.FirstName+'' '','''') + ISNULL(rptTakenBy.LastName,'''') ReportTakenByName,
			compt.CustomerID, customer.CustomerName, 
			ISNULL(customer.Address1+'', '','''')+ISNULL(customer.Address2+'', '','''')+ISNULL(customer.Address3+'', '','''')+ISNULL(customer.Address4,'''') CustomerAddress, 
			customer.TelNo1 CustomerPhone,  compt.Contact, compt.ComplainCost,compt.Description, 
			compt.ComplaintCodeId, ccode.ComplaintCode, compt.Action, compt.ReviewDate,compt.Position,compt.PrintName,compt.IsSatisfactory,
			compt.ActionedBy, ISNULL(rptActionedBy.FirstName+'' '','''') + ISNULL(rptActionedBy.LastName,'''') ActionedByName,
			compt.CorrectedBy, ISNULL(rptCorrectedBy.FirstName+'' '','''') + ISNULL(rptCorrectedBy.LastName,'''') CorrectedByName,compt.Investigation,compt.RiskAssessmentTimescale
			from Complaint compt 
			INNER JOIN USER_User as rptTakenBy on compt.ReportTakenBy = rptTakenBy.UserName
			LEFT JOIN dbo.STOCKCONTROL_Customer customer on compt.CustomerID = customer.CustomerID
			LEFT JOIN dbo.ComplaintCode ccode on compt.ComplaintCodeId = ccode.Id
			LEFT JOIN USER_User as rptActionedBy on compt.ActionedBy = rptActionedBy.UserName
			LEFT JOIN USER_User as rptCorrectedBy on compt.CorrectedBy = rptCorrectedBy.UserName '
			
			SET @SQL_STRING = @SQL_STRING + @SQL_WHERE
			SET @SQL_STRING = @SQL_STRING + ' ORDER BY 	compt.ReportedDate DESC'
			EXEC(@SQL_STRING)

			RETURN
		END

	/*********************
		RETURN ALL RECORDS
	*********************/
	BEGIN
		SELECT compt.Id, compt.ReportNumber, compt.ReportedDate, compt.ReportTakenBy , compt.CustomerNote , compt.ProductNote,
		ISNULL(rptTakenBy.FirstName+' ','') + ISNULL(rptTakenBy.LastName,'') ReportTakenByName,
		compt.CustomerID, customer.CustomerName, 
		ISNULL(customer.Address1+', ','')+ISNULL(customer.Address2+', ','')+ISNULL(customer.Address3+', ','')+ISNULL(customer.Address4,'') CustomerAddress, 
		customer.TelNo1 CustomerPhone,  compt.Contact, compt.ComplainCost,compt.Description, 
		compt.ComplaintCodeId, ccode.ComplaintCode, compt.Action, compt.ReviewDate,compt.Position,compt.PrintName,compt.IsSatisfactory,
		compt.ActionedBy, ISNULL(rptActionedBy.FirstName+' ','') + ISNULL(rptActionedBy.LastName,'') ActionedByName,
		compt.CorrectedBy, ISNULL(rptCorrectedBy.FirstName+' ','') + ISNULL(rptCorrectedBy.LastName,'') CorrectedByName,compt.Investigation,compt.RiskAssessmentTimescale
		FROM Complaint compt 
		INNER JOIN USER_User as rptTakenBy on compt.ReportTakenBy = rptTakenBy.UserName
		LEFT JOIN dbo.STOCKCONTROL_Customer customer on compt.CustomerID = customer.CustomerID
		LEFT JOIN dbo.ComplaintCode ccode on compt.ComplaintCodeId = ccode.Id
		LEFT JOIN USER_User as rptActionedBy on compt.ActionedBy = rptActionedBy.UserName
		LEFT JOIN USER_User as rptCorrectedBy on compt.CorrectedBy = rptCorrectedBy.UserName
		ORDER BY compt.ReportedDate DESC

		RETURN
	END

GO


/****** Object:  StoredProcedure [dbo].[Complaint_usp_ins_Complaint]    Script Date: 01/07/2013 20:20:37 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[Complaint_usp_ins_Complaint]
---------Parameters----------
@ReportedDate datetime,
@ReportTakenBy nvarchar(16),
@CustomerID int,
@Contact NVARCHAR(30) = NULL,
@ComplainCost decimal(18,2) = NULL,
@Description NVARCHAR(1024) = NULL,
@ComplaintCodeId INT = NULL,
@Action NVARCHAR(200) = NULL,
@ActionedBy nvarchar(16) = NULL,
@CorrectedBy nvarchar(16) = NULL,
@Investigation NVARCHAR(400) = NULL,
@RiskAssessmentTimescale Datetime = NULL,
@CustomerNote NVARCHAR(200) = NULL,
@ProductNote NVARCHAR(200) = NULL,
@ReviewDate DATETIME = NULL,
@Position NVARCHAR(300) = NULL,
@PrintName NVARCHAR(300) = NULL,
@IsSatisfactory BIT = NULL,
@RecordID int OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

DECLARE @SequencePosition INT

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RecordID = 0
	SET @Success = 0

	

	/************
	INSERT RECORD
	************/	
	SET @SequencePosition = (SELECT ISNULL(MAX(Convert(int, ReportNumber)),0)+1 FROM Complaint) 
	INSERT INTO	Complaint												WITH (ROWLOCK)
			(
			ReportNumber,
			ReportedDate, 
			ReportTakenBy, 
			CustomerID, 
			Contact, 
			ComplainCost, 
			[Description], 
			ComplaintCodeId, 
			[Action], 
			ActionedBy, 
			CorrectedBy,
			Investigation,
			RiskAssessmentTimescale,
			CustomerNote,
			ProductNote,
			ReviewDate,
			Position ,
			PrintName ,
			IsSatisfactory 
			)
	VALUES
			(
			RIGHT( '000'+ CONVERT(nvarchar(20), @SequencePosition),4), 
			@ReportedDate, 
			@ReportTakenBy,
			@CustomerID, 
			@Contact,
			@ComplainCost,
			@Description,
			@ComplaintCodeId,
			@Action,
			@ActionedBy,
			@CorrectedBy,
			@Investigation,
			@RiskAssessmentTimescale,
			@CustomerNote,
			@ProductNote,
			@ReviewDate ,
			@Position ,
			@PrintName ,
			@IsSatisfactory 		
			)

	SET @RecordID = SCOPE_IDENTITY()
		
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'Complaint_usp_ins_Complaint',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1




GO



/****** Object:  StoredProcedure [dbo].[Complaint_usp_del_Complaint]    Script Date: 07/26/2012 15:13:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Complaint_usp_del_Complaint]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[Complaint_usp_del_Complaint]
GO


/****** Object:  StoredProcedure [dbo].[Complaint_usp_del_Complaint]    Script Date: 07/26/2012 15:13:17 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
	Author:				TR
	Date:				29/06/2009 15:00

	Description:		Delete record from Complaint

	History		Name		Date		Mod		
	=============================================================================================================================================

Complaint_usp_ins_Complaint

	=============================================================================================================================================
*/
Create PROCEDURE [dbo].[Complaint_usp_del_Complaint]
---------Parameters----------
@ComplaintID int,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF @ComplaintID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		Id
							FROM		Complaint			WITH (READUNCOMMITTED)
							WHERE 		Id = @ComplaintID
							)
			BEGIN
				SET @ErrorMsg = '##01Table PROCEDURE_Step - Could not find record ' + CAST(@ComplaintID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			DELETE dbo.ComplaintProduct WITH (ROWLOCK) 
			WHERE ComplaintId = @ComplaintID
			
			DELETE	Complaint				WITH (ROWLOCK)
			WHERE 	Id = @ComplaintID
	
			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@ComplaintID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'Complaint_usp_del_Complaint',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO



--=============================================
--COMPLAINT PERMISSION
--=============================================
IF NOT EXISTS(SELECT * FROM dbo.RANGER_Module_Function WHERE [ModuleID]=5 AND [OperationName]='Add') 
INSERT INTO [dbo].[RANGER_Module_Function]
           ([ModuleID]
           ,[OperationName]
           ,[OperationDescription])
     VALUES (5  ,'Add','')
GO

IF NOT EXISTS(SELECT * FROM dbo.RANGER_Module_Function WHERE [ModuleID]=5 AND [OperationName]='Edit') 
INSERT INTO [dbo].[RANGER_Module_Function]
           ([ModuleID]
           ,[OperationName]
           ,[OperationDescription])
     VALUES (5  ,'Edit','')
GO

/****** Object:  StoredProcedure [dbo].[RANGER_usp_sel_Module_Function_By_Role]    Script Date: 06/25/2013 19:16:08 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RANGER_usp_sel_Module_Function_By_Role]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RANGER_usp_sel_Module_Function_By_Role]
GO

/****** Object:  StoredProcedure [dbo].[RANGER_usp_sel_Module_Function_By_Role]    Script Date: 06/25/2013 19:16:08 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
	Author:				TR
	Date:				27/01/2009 09:36

	Description:		Select records from OBJECT_FridgeTemperature

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[RANGER_usp_sel_Module_Function_By_Role]
---------Parameters----------
@RoleID int = NULL
AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	
	IF ISNULL(@RoleID,0) > 0
		BEGIN
		
		IF(EXISTS(SELECT ID FROM RANGER_Role_Module_Function WHERE RoleId = @RoleID))
			BEGIN
			SELECT m.ID AS ModuleID, m.ModuleName, mf.ID OperationID, mf.OperationName, rmf.ID RoleModuleID, rmf.RoleID, ISNULL(rmf.IsSelected,0) As IsSelected
			   FROM RANGER_Module m
			   INNER JOIN RANGER_Module_Function mf ON m.ID = mf.ModuleID
			   LEFT JOIN RANGER_Role_Module_Function rmf ON mf.ID = rmf.ModuleFunctionID AND rmf.RoleID=@RoleID

			   RETURN 1
			END
		ELSE
			BEGIN
				SELECT rmf2.ID AS ModuleID, rmf2.ModuleName, rmf2.OperationID, rmf2.OperationName,rmf2.RoleModuleID,rmf2.RoleID,rmf2.IsSelected FROM 
				  (SELECT m.ID,m.ModuleName,rf.*
				   FROM RANGER_Module m
				  INNER JOIN
					  (SELECT mf.ID AS OperationID,mf.ModuleID,mf.OperationName,NULL As RoleModuleID,NULL As RoleId, 0 As IsSelected FROM 
					   dbo.RANGER_Module_Function mf
					   ) AS rf 
				   ON m.ID = rf.ModuleID) AS rmf2
			END
		END
	ELSE 
		BEGIN
			SELECT rmf2.ID AS ModuleID, rmf2.ModuleName, rmf2.OperationID, rmf2.OperationName,rmf2.RoleModuleID,rmf2.RoleID,rmf2.IsSelected FROM 
			  (SELECT m.ID,m.ModuleName,rf.*
			   FROM RANGER_Module m
			  INNER JOIN
				  (SELECT mf.ID AS OperationID,mf.ModuleID,mf.OperationName,NULL As RoleModuleID,NULL As RoleId, 0 As IsSelected FROM 
				   dbo.RANGER_Module_Function mf
				   ) AS rf 
			   ON m.ID = rf.ModuleID) AS rmf2
		END
		
	RETURN -1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = '[RANGER_usp_sel_Module_Function_By_Role]',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fnProcedureJobTemp]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[fnProcedureJobTemp]
GO
/****** Object:  UserDefinedFunction [dbo].[fnSplitV1]    Script Date: 03/15/2013 15:43:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnProcedureJobTemp]() 
RETURNS @Procedure_Jobdetail_Temp TABLE
	(
		  JobDetailID BIGINT ,
		  JobID INT,
		  StepDetailID INT,
		  [Description] NVARCHAR(64),
		  CaptureValue NVARCHAR(128),
		  [Signature] VARBINARY(MAX),
		  CorrectiveAction NVARCHAR(128),
		  Comments NVARCHAR(256),
		  UserName NVARCHAR(16),
		  ReadingDate Datetime,
		  CreateDate DATETIME,
		  SequencePosition INT,
		  MinValue REAL,
		  MaxValue REAL,
		  TraceabilityBarcode NVARCHAR(15),
		  IsProcessed BIT
	)
	With Encryption
	As
	BEGIN
	
	    DECLARE @IDToHandle INT
		DECLARE @GOODSINNO NVARCHAR(64)
		DECLARE @temp INT
		DECLARE @ReadingDate DATETIME
		DECLARE @TraceabilityBarcode NVARCHAR(16)
		DECLARE @SerialNo INT
		DECLARE @JID INT 
	
		INSERT INTO @PROCEDURE_JobDetail_Temp
			SELECT  JobDetailID ,JobID, StepDetailID ,[Description] ,CaptureValue ,[Signature] ,CorrectiveAction ,jd.Comments ,jd.UserName ,ReadingDate ,CreateDate ,SequencePosition ,MinValue ,MaxValue ,NULL,0
				FROM PROCEDURE_JobDetail jd WITH (READUNCOMMITTED) 
				INNER join USER_User u on jd.UserName=u.UserName
			
			ORDER BY jd.JobID,jd.ReadingDate
			
			SET @IDToHandle = 0
			SET @temp=0
			SET @JID=0
			SET @SerialNo=0
			
			
			WHILE @IDToHandle IS NOT NULL
			BEGIN
				SET @IDToHandle=NULL
			    
				SELECT TOP 1 @IDToHandle = p.JobDetailID ,@JID=p.JobID ,@ReadingDate=p.ReadingDate,@GOODSINNO= pj.GoodInNo
				FROM @PROCEDURE_JobDetail_Temp p
				INNER join PROCEDURE_Job pj on p.JobID=pj.JobID
				WHERE p.IsProcessed = 0  AND p.[Description] = 'Select Product'
				
				IF(@JID <> @temp )
				  SET @SerialNo=1
				ELSE
				  SET @SerialNo=@SerialNo+1
				
				SET @temp = @JID
				
				IF @IDToHandle IS NOT NULL
				BEGIN
					SET @TraceabilityBarcode=ISNULL(@GOODSINNO,'')+ CAST (DATEPART(DD,@ReadingDate) AS VARCHAR ) +RIGHT ('0'+CAST (datepart(MM,@ReadingDate) AS VARCHAR),2) +RIGHT('0'+CAST (@SerialNo AS VARCHAR),2)
					
					Update @PROCEDURE_JobDetail_Temp SET IsProcessed=1,TraceabilityBarcode=@TraceabilityBarcode
					WHERE JobDetailID=@IDToHandle
				END
				
				
				
				
			END

	

RETURN
END
GO




declare @moduleStockControlId int

IF NOT EXISTS(SELECT * FROM RANGER_Module WHERE ModuleName='Stock Control')
	BEGIN
		insert into RANGER_Module (ModuleName,ModuleDescription) values ('Stock Control','')
		select @moduleStockControlId = SCOPE_IDENTITY()


		IF NOT EXISTS(SELECT * FROM RANGER_Module_Function WHERE ModuleID=@moduleStockControlId and OperationName='Add')
		BEGIN
			INSERT INTO RANGER_Module_Function (ModuleID,OperationName,OperationDescription) VALUES (@moduleStockControlId,'Add','')
			
			INSERT INTO RANGER_Role_Module_Function (RoleID, ModuleFunctionID, IsSelected)
			SELECT RoleID, SCOPE_IDENTITY(), 1 FROM USER_Role
		END
		 

		IF NOT EXISTS(SELECT * FROM RANGER_Module_Function WHERE ModuleID=@moduleStockControlId and OperationName='Edit')
		BEGIN
			INSERT INTO RANGER_Module_Function (ModuleID,OperationName,OperationDescription) VALUES (@moduleStockControlId,'Edit','')
			
			INSERT INTO RANGER_Role_Module_Function (RoleID, ModuleFunctionID, IsSelected)
			SELECT RoleID, SCOPE_IDENTITY(), 1 FROM USER_Role
	    END

		IF NOT EXISTS(SELECT * FROM RANGER_Module_Function WHERE ModuleID=@moduleStockControlId and OperationName='Delete')
		BEGIN
			INSERT INTO RANGER_Module_Function (ModuleID,OperationName,OperationDescription) VALUES (@moduleStockControlId,'Delete','')
			
			INSERT INTO RANGER_Role_Module_Function (RoleID, ModuleFunctionID, IsSelected)
			SELECT RoleID, SCOPE_IDENTITY(), 1 FROM USER_Role
		END
	END
GO

declare @moduleStockControlId int
IF NOT EXISTS(SELECT * FROM RANGER_Module WHERE ModuleName='Production')
	BEGIN
		insert into RANGER_Module (ModuleName,ModuleDescription) values ('Production','')
		select @moduleStockControlId = SCOPE_IDENTITY()


		IF NOT EXISTS(SELECT * FROM RANGER_Module_Function WHERE ModuleID=@moduleStockControlId and OperationName='View')
		BEGIN
			INSERT INTO RANGER_Module_Function (ModuleID,OperationName,OperationDescription) VALUES (@moduleStockControlId,'View','')
			
			INSERT INTO RANGER_Role_Module_Function (RoleID, ModuleFunctionID, IsSelected)
			SELECT RoleID, SCOPE_IDENTITY(), 0 FROM USER_Role
		END
	END
GO

IF NOT EXISTS(SELECT * FROM RANGER_Module_Function WHERE ModuleID=1 and OperationName='Verify Data')
		BEGIN
			INSERT INTO RANGER_Module_Function (ModuleID,OperationName,OperationDescription) VALUES (1,'Verify Data','')
			
			INSERT INTO RANGER_Role_Module_Function (RoleID, ModuleFunctionID, IsSelected)
			SELECT RoleID, SCOPE_IDENTITY(), 0 FROM USER_Role
		END
		GO


--Distinguish Review alert of 
UPDATE Procedure_Alert SET CheckFrequency = 'ProcedureReview' WHERE CheckFrequency='' AND AlertType = 2


----------- CA List ordering -------------------------
DECLARE @Position INT
DECLARE @ListID INT
DECLARE @PreviousListID INT
DECLARE @ListDetailID INT
SET @PreviousListID = 0
DECLARE UserDefinedList CURSOR FOR
SELECT ListID, ListDetailID FROM PROCEDURE_UserDefinedListDetail ORDER BY ListID, SequencePosition

OPEN UserDefinedList
FETCH NEXT FROM UserDefinedList INTO @ListID, @ListDetailID
WHILE @@FETCH_STATUS = 0
BEGIN
IF (@ListID <> @PreviousListID)
	SET @Position = 1
ELSE
	SET @Position = @Position + 1

--Updating sequence position
UPDATE 	PROCEDURE_UserDefinedListDetail
SET SequencePosition = @Position
WHERE ListDetailID = @ListDetailID

SET @PreviousListID = @ListID

FETCH NEXT FROM UserDefinedList INTO @ListID, @ListDetailID
END
CLOSE UserDefinedList
DEALLOCATE UserDefinedList

GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_del_Step]    Script Date: 09/12/2012 20:05:25 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_del_Step]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_del_Step]
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_del_Step]    Script Date: 09/12/2012 20:05:25 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
	Author:				TR
	Date:				29/06/2009 15:00

	Description:		Delete record from PROCEDURE_Step

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_del_Step]
---------Parameters----------
@StepID int,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 
DECLARE @TypeProcedure INT
DECLARE @SequencePosition INT

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF @StepID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		StepID
							FROM		PROCEDURE_Step							WITH (READUNCOMMITTED)
							WHERE 		StepID = @StepID
							)
			BEGIN
				SET @ErrorMsg = '##01Table PROCEDURE_Step - Could not find record ' + CAST(@StepID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			SELECT @TypeProcedure = TypeProcedure, @SequencePosition = SequencePosition 
			FROM PROCEDURE_Step 
			WHERE  StepID = @StepID

			DELETE	PROCEDURE_Step							WITH (ROWLOCK)
			WHERE 	StepID = @StepID
			
			UPDATE 	PROCEDURE_Step
			SET SequencePosition = SequencePosition - 1, UpdatedOn = GETDATE()
			WHERE TypeProcedure = @TypeProcedure AND SequencePosition > @SequencePosition
	
			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@StepID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_del_Step',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_UserDefinedListDetail' AND column_name = 'CorrectiveActionType')
BEGIN
	ALTER TABLE dbo.PROCEDURE_UserDefinedListDetail ADD
	CorrectiveActionType int NULL
	EXEC sp_executesql N'UPDATE PROCEDURE_UserDefinedListDetail SET CorrectiveActionType=1'
END	
GO


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_UserDefinedListDetail' AND column_name = 'IsCritical')
BEGIN
	ALTER TABLE dbo.PROCEDURE_UserDefinedListDetail ADD
	IsCritical bit NULL
	EXEC sp_executesql N'UPDATE PROCEDURE_UserDefinedListDetail set IsCritical=0'
END	
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_UserDefinedListDetail' AND column_name = 'IsCorrectiveActionRequired')
BEGIN
ALTER TABLE dbo.PROCEDURE_UserDefinedListDetail ADD
	IsCorrectiveActionRequired bit NULL
	EXEC sp_executesql N'UPDATE PROCEDURE_UserDefinedListDetail set IsCorrectiveActionRequired=0'
END
GO


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_UserDefinedListDetail' AND column_name = 'AssignUser')
BEGIN
	ALTER TABLE dbo.PROCEDURE_UserDefinedListDetail ADD
		AssignUser bit NOT NULL CONSTRAINT DF_PROCEDURE_UserDefinedListDetail_AssignUser DEFAULT 0
	
	EXEC sp_executesql N'UPDATE PROCEDURE_UserDefinedListDetail SET AssignUser=udl.AssignUser
		FROM PROCEDURE_UserDefinedList udl inner join PROCEDURE_UserDefinedListDetail udld on udl.listid=udld.listid'	
END	
GO
	
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PROCEDURE_UserDefinedListDetail' AND column_name = 'SignatureRequired')
BEGIN
	ALTER TABLE dbo.PROCEDURE_UserDefinedListDetail ADD
		SignatureRequired bit NOT NULL CONSTRAINT DF_PROCEDURE_UserDefinedListDetail_SignatureRequired DEFAULT 0
	
	EXEC sp_executesql N'UPDATE PROCEDURE_UserDefinedListDetail SET SignatureRequired=udl.SignatureRequired
		FROM PROCEDURE_UserDefinedList udl inner join PROCEDURE_UserDefinedListDetail udld on udl.listid=udld.listid'	
END	
GO
 


/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_ins_UserDefinedListDetail]    Script Date: 06/20/2013 20:14:59 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_ins_UserDefinedListDetail]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_ins_UserDefinedListDetail]
GO


/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_ins_UserDefinedListDetail]    Script Date: 06/20/2013 20:14:59 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*
	Author:				TR
	Date:				29/06/2009 15:45

	Description:		Insert record in PROCEDURE_UserDefinedListDetail

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_ins_UserDefinedListDetail]
---------Parameters----------
@ListID int,
@Description nvarchar(128),
@SequencePosition int,
@Active bit,
@CorrectiveActionType int=null,
@IsCritical bit=null,
@AssignUser bit=0,
@SignatureRequired bit=0,
@IsCorrectiveActionRequired bit=null,
@TolaranceLevel decimal(18,2)=null,
@RecordID int OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int

DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RecordID = 0
	SET @Success = 0
	SET @ErrorMsg = ''
	
	/************
	INSERT RECORD
	************/
	INSERT INTO	PROCEDURE_UserDefinedListDetail												WITH (ROWLOCK)
			(
			ListID, [Description], SequencePosition, Active,CorrectiveActionType,IsCritical,IsCorrectiveActionRequired,AssignUser,SignatureRequired,TolaranceLevel,UpdatedOn
			)
	VALUES
			(
			@ListID, @Description, @SequencePosition, @Active,@CorrectiveActionType,@IsCritical,@IsCorrectiveActionRequired,@AssignUser,@SignatureRequired,@TolaranceLevel,GETDATE()
			)

		SET @RecordID = SCOPE_IDENTITY()
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_ins_UserDefinedListDetail',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1



GO





/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_sel_UserDefinedListDetail]    Script Date: 06/20/2013 20:12:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_sel_UserDefinedListDetail]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_sel_UserDefinedListDetail]
GO



/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_sel_UserDefinedListDetail]    Script Date: 06/20/2013 20:12:50 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*
	Author:				TR
	Date:				29/06/2009 15:45

	Description:		Select records from PROCEDURE_UserDefinedListDetail

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_sel_UserDefinedListDetail]
---------Parameters----------
@ListID int = NULL,
@SQL_WHERE nvarchar(4000) = NULL

AS

DECLARE @SQL_STRING nvarchar (4000)

SET NOCOUNT ON
SET DATEFORMAT dmy

	IF ISNULL(@ListID,'') <> '' 
		/**************************
			RETURN SPECIFIC RECORDS
		**************************/
		BEGIN
			SELECT		ListDetailID, ListID, [Description], SequencePosition, Active,CorrectiveActionType,IsCritical,IsCorrectiveActionRequired,AssignUser,SignatureRequired,TolaranceLevel 

			FROM		PROCEDURE_UserDefinedListDetail								WITH (READUNCOMMITTED)

			WHERE		ListID = @ListID

			ORDER BY 	SequencePosition ASC

			RETURN
		END

	IF ISNULL(@SQL_WHERE,'') <> '' 
		/*********************************************
			SELECT RECORDS ACCORDING TO WHERE CRITERIA
		*********************************************/
		BEGIN
			SET @SQL_STRING = 'SELECT ListDetailID, ListID, [Description], SequencePosition, Active,CorrectiveActionType,IsCritical,IsCorrectiveActionRequired,AssignUser,SignatureRequired,TolaranceLevel '
			SET @SQL_STRING = @SQL_STRING + 'FROM PROCEDURE_UserDefinedListDetail '

			SET @SQL_STRING = @SQL_STRING + @SQL_WHERE
			SET @SQL_STRING = @SQL_STRING +' ORDER BY 	SequencePosition ASC '

			EXEC(@SQL_STRING)

			RETURN
		END

	/*********************
		RETURN ALL RECORDS
	*********************/
	BEGIN
		SELECT		ListDetailID, ListID, [Description], SequencePosition, Active,CorrectiveActionType,IsCritical,IsCorrectiveActionRequired,AssignUser,SignatureRequired,TolaranceLevel

		FROM		PROCEDURE_UserDefinedListDetail								WITH (READUNCOMMITTED)

		ORDER BY 	SequencePosition ASC

		RETURN
	END



GO







/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_UserDefinedListDetail]    Script Date: 06/20/2013 20:13:55 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_upd_UserDefinedListDetail]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_upd_UserDefinedListDetail]
GO


/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_UserDefinedListDetail]    Script Date: 06/20/2013 20:13:55 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*
	Author:				TR
	Date:				29/06/2009 15:45

	Description:		Update record in PROCEDURE_UserDefinedListDetail

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_upd_UserDefinedListDetail]
---------Parameters----------
@ListDetailID int,
@ListID int,
@Description nvarchar(128),
@SequencePosition int,
@Active bit,
@CorrectiveActionType int=null,
@AssignUser bit=0,
@SignatureRequired bit=0,
@IsCritical bit=null,
@IsCorrectiveActionRequired bit=null,
@TolaranceLevel decimal(18,2)=null,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF @ListDetailID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		ListDetailID
							FROM		PROCEDURE_UserDefinedListDetail				WITH (READUNCOMMITTED)
							WHERE 		ListDetailID = @ListDetailID
							)
			BEGIN
				SET @ErrorMsg = '##01Table PROCEDURE_UserDefinedListDetail - Could not find record ' + CAST(@ListDetailID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			/************
			UPDATE RECORD
			************/
			UPDATE	PROCEDURE_UserDefinedListDetail												WITH (ROWLOCK)

			SET 	ListID = @ListID,
					[Description] = @Description,
					SequencePosition = @SequencePosition,
					Active = @Active,
					CorrectiveActionType=@CorrectiveActionType,
					IsCritical=@IsCritical,
					IsCorrectiveActionRequired=@IsCorrectiveActionRequired,
					AssignUser=@AssignUser,
					SignatureRequired=@SignatureRequired,
					TolaranceLevel=@TolaranceLevel,
					UpdatedOn = GETDATE()

			WHERE	ListDetailID = @ListDetailID

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@ListDetailID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_upd_UserDefinedListDetail',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1



GO




/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_Step_Sequence]    Script Date: 09/19/2012 23:36:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_upd_Step_Sequence]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_upd_Step_Sequence]
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_Step_Sequence]    Script Date: 09/19/2012 23:36:47 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[PROCEDURE_usp_upd_Step_Sequence]

---------Parameters----------
@NewPosition int,
@OldPosition int,
@TypeProcedure int,
@Success bit OUTPUT

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)
DECLARE @CurrentStepID int

BEGIN TRY
	SET @ErrorMsg = ''
	SET @Success = 0

	SELECT @CurrentStepID = StepID FROM PROCEDURE_Step WHERE SequencePosition = @OldPosition AND TypeProcedure = @TypeProcedure
	
	IF @NewPosition > @OldPosition
	BEGIN
		-- Decreasing 1 position for each between old and new position values
		UPDATE	PROCEDURE_Step
		SET		SequencePosition = SequencePosition - 1,
				UpdatedOn = GETDATE()
		WHERE	SequencePosition <= @NewPosition AND SequencePosition > @OldPosition AND TypeProcedure = @TypeProcedure
	END
	ELSE
	BEGIN
		-- Increasing 1 position for each between old and new position values
		UPDATE	PROCEDURE_Step
		SET		SequencePosition = SequencePosition + 1,
				UpdatedOn = GETDATE()
		WHERE	SequencePosition >= @NewPosition AND SequencePosition < @OldPosition AND TypeProcedure = @TypeProcedure
	END
	
	--Update sequence position of the selected step with new value
	UPDATE	PROCEDURE_Step
	SET		SequencePosition = @NewPosition,
				UpdatedOn = GETDATE()
	WHERE	StepID = @CurrentStepID AND TypeProcedure = @TypeProcedure
	
	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) = '##'
		BEGIN	
			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[PROCEDURE_usp_upd_Step_Sequence]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1


GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_upd_Sequence]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_upd_Sequence]
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_upd_Sequence]    Script Date: 3/27/2014 4:03:32 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[PROCEDURE_usp_upd_Sequence]

---------Parameters----------
@StepDetailID int,
@SequencePosition int,
@Success bit OUTPUT

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)

BEGIN TRY
	SET @ErrorMsg = ''
	SET @Success = 0

	UPDATE	PROCEDURE_StepDetail
	SET		SequencePosition = @SequencePosition,
			UpdatedOn = GETDATE()
	WHERE	StepDetailID = @StepDetailID
	
	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) = '##'
		BEGIN	
			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[PROCEDURE_usp_upd_Sequence]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1

GO






/****** Object:  StoredProcedure [dbo].[REPORT_usp_StepReadingBarChart]    Script Date: 10/04/2012 13:41:59 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[REPORT_usp_StepReadingBarChart]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[REPORT_usp_StepReadingBarChart]
GO

/****** Object:  StoredProcedure [dbo].[REPORT_usp_CABarChart]    Script Date: 10/04/2012 13:41:59 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[REPORT_usp_CABarChart]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[REPORT_usp_CABarChart]
GO


/****** Object:  StoredProcedure [dbo].[REPORT_usp_StepReadingBarChart]    Script Date: 10/04/2012 13:41:59 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*
	Author:				Titu(Jr)
	Date:				3/10/2012 

	Description:		Step data/reading Barchart report

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[REPORT_usp_StepReadingBarChart]

---------Parameters----------
@StepDetailID INT,
@WhereCondition NVARCHAR(MAX)

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)
DECLARE @SQL NVARCHAR(MAX)

BEGIN TRY
	SET @ErrorMsg = ''
--	SET @Success = 0

	IF @StepDetailID > 0
		SELECT ReadingDate, AVG(CaptureValue) CaptureValue
		FROM 
		(SELECT  CONVERT(nvarchar,ReadingDate,106) ReadingDate, YEAR(ReadingDate) yr, MONTH(ReadingDate) mon, DAY(ReadingDate) dat,
		CASE 
			WHEN ISNUMERIC(CaptureValue) = 1 THEN  CAST(CAST(CaptureValue AS MONEY) AS decimal(18,2)) 
			ELSE NULL 
		END CaptureValue
		FROM PROCEDURE_JobDetail job
		WHERE job.StepDetailID = @StepDetailID		
		) t
		Group BY yr, mon, dat, ReadingDate
	ELSE
		BEGIN
		SET @SQL = 'SELECT ReadingDate, AVG(CaptureValue) CaptureValue
		FROM 
		(SELECT  CONVERT(nvarchar,ReadingDate,106) ReadingDate, YEAR(ReadingDate) yr, MONTH(ReadingDate) mon, DAY(ReadingDate) dat,
		CASE 
			WHEN ISNUMERIC(CaptureValue) = 1 THEN  CAST(CAST(CaptureValue AS MONEY) AS decimal(18,2)) 
			ELSE NULL 
		END CaptureValue
		FROM PROCEDURE_JobDetail
		WHERE ' + @WhereCondition +
		' ) t
		Group BY yr, mon, dat, ReadingDate' 

		END
	EXEC (@SQL)

	
	
--	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) <> '##'
		BEGIN	
			/*SET @ErrorParamsData =	'@Barcode = ' + @Barcode + ', @Pallet_No = ' +  CAST(@Pallet_No AS nvarchar(8))  + */

			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[REPORT_usp_StepReadingBarChart]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1



GO

/****** Object:  StoredProcedure [dbo].[REPORT_usp_CABarChart]    Script Date: 10/04/2012 13:42:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				Titu(Jr)
	Date:				3/10/2012 

	Description:		CA Barchart report

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[REPORT_usp_CABarChart]

---------Parameters----------
@StepDetailID INT,
@StepID INT = NULL,
@WhereCondition NVARCHAR(MAX),
@IsLastWeek BIT = 0 

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)
DECLARE @SQL NVARCHAR(MAX)

BEGIN TRY
	SET @ErrorMsg = ''
--	SET @Success = 0

	IF @StepDetailID > 0
		SELECT COUNT(ExceptionID) NoOfException, 
		DATENAME(mm, ExceptionDate) +' '+ DATENAME(yy, ExceptionDate) [Month]
		FROM RANGER_Exception excp
		WHERE Descidentity = @StepDetailID
		GROUP BY YEAR(ExceptionDate), MONTH(ExceptionDate),  
		DATENAME(YY, ExceptionDate) , DATENAME(mm, ExceptionDate)
	ELSE IF @IsLastWeek = 1
		BEGIN
		SET @SQL = 'SELECT COUNT(ExceptionID) NoOfException, 
		CONVERT(nvarchar, ExceptionDate, 106) [Month]
		FROM RANGER_Exception excp
		INNER JOIN PROCEDURE_StepDetail stp ON excp.Descidentity = stp.StepDetailID AND  excp.ExceptionType = 0
		WHERE ' + @WhereCondition +
		'GROUP BY YEAR(ExceptionDate), MONTH(ExceptionDate),  DAY(ExceptionDate),
		CONVERT(nvarchar, ExceptionDate, 106)' 
		END	
	ELSE
		BEGIN
		SET @SQL = 'SELECT COUNT(ExceptionID) NoOfException, 
		DATENAME(mm, ExceptionDate) +'' ''+ DATENAME(yy, ExceptionDate) [Month]
		FROM RANGER_Exception excp
		INNER JOIN PROCEDURE_StepDetail stp ON excp.Descidentity = stp.StepDetailID AND  excp.ExceptionType = 0
		WHERE ' + @WhereCondition +
		'GROUP BY YEAR(ExceptionDate), MONTH(ExceptionDate),  
		DATENAME(YY, ExceptionDate) , DATENAME(mm, ExceptionDate)' 

		END
	EXEC (@SQL)

	
	
--	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) <> '##'
		BEGIN	
			/*SET @ErrorParamsData =	'@Barcode = ' + @Barcode + ', @Pallet_No = ' +  CAST(@Pallet_No AS nvarchar(8))  + */

			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[REPORT_usp_CABarChart]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1



GO


/****** Object:  StoredProcedure [dbo].[USER_usp_sel_User]    Script Date: 10/20/2012 15:50:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[USER_usp_sel_User]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[USER_usp_sel_User]
GO


/****** Object:  StoredProcedure [dbo].[USER_usp_sel_User]    Script Date: 10/20/2012 15:50:50 ******/
SET ANSI_NULLS OFF
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USER_usp_sel_User]

---------Parameters----------
@UserName nvarchar(16) = NULL,
@SQL_WHERE nvarchar(MAX) = NULL

AS

DECLARE @SQL_STRING nvarchar (4000)

IF ISNULL(@SQL_WHERE,'') <> '' 
		/*********************************************
			SELECT RECORDS ACCORDING TO WHERE CRITERIA
		*********************************************/
		BEGIN
			SET @SQL_STRING = 'SELECT USER_User.UserID ,USER_User.UserName, USER_User.FirstName, USER_User.LastName, Isnull(USER_User.FirstName+'' '','''')+ Isnull(USER_User.LastName,'''') FullName, USER_User.UserPassword, USER_User.RoleID,ur.RoleDescription, USER_User.Active, USER_User.AppSkinID, USER_User.EmailAddress, USER_User.Mobile, USER_User.Telephone, USER_User.JobTitle, USER_User.Comments, USER_User.AccessType,USER_User.Type,USER_User.StartDate,USER_User.PermissionOnDepartments,0 AS [Select] '
			SET @SQL_STRING = @SQL_STRING + 'FROM USER_User '
			SET @SQL_STRING = @SQL_STRING + 'inner join USER_Role ur on ur.RoleID=USER_User.RoleID '
			SET @SQL_STRING = @SQL_STRING + @SQL_WHERE
			SET @SQL_STRING = @SQL_STRING + ' ORDER BY USER_User.UserName ASC '

			

			EXEC(@SQL_STRING)

			RETURN
		END

ELSE IF ISNULL(@UserName,'') = '' 
	--if UserName is empty, then select all records
	BEGIN
		SELECT USER_User.UserID ,USER_User.UserName, USER_User.FirstName, USER_User.LastName, Isnull(USER_User.FirstName+' ','')+ Isnull(USER_User.LastName,'') FullName, USER_User.UserPassword, USER_User.RoleID,ur.RoleDescription, USER_User.Active, USER_User.AppSkinID, USER_User.EmailAddress, USER_User.Mobile, USER_User.Telephone, USER_User.JobTitle, USER_User.Comments, USER_User.AccessType,USER_User.Type,USER_User.StartDate,USER_User.PermissionOnDepartments,0 AS [Select]
		FROM USER_User WITH (READUNCOMMITTED)
		inner join USER_Role ur on ur.RoleID=USER_User.RoleID
		ORDER BY USER_User.UserName ASC
	END
	

		
ELSE
	--search on UserName field
	BEGIN
		SELECT USER_User.UserID ,USER_User.UserName, USER_User.FirstName, USER_User.LastName,Isnull(USER_User.FirstName+' ','')+ Isnull(USER_User.LastName,'') FullName, USER_User.UserPassword, USER_User.RoleID,ur.RoleDescription, USER_User.Active, USER_User.AppSkinID, USER_User.EmailAddress, USER_User.Mobile, USER_User.Telephone, USER_User.JobTitle, USER_User.Comments, USER_User.AccessType,USER_User.Type,USER_User.StartDate,USER_User.PermissionOnDepartments,0 AS [Select] 
		FROM USER_User WITH (READUNCOMMITTED)
		inner join USER_Role ur on ur.RoleID=USER_User.RoleID
		WHERE USER_User.UserName = @UserName
		ORDER BY USER_User.UserName ASC
	END


GO

--====================================================================================
--Start Store Procedure For Fixed Scanner
--===================================================================================

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[FIXED_usp_del_Incoming]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[FIXED_usp_del_Incoming]
GO

/*~~~~~~~~~~~~~~~*/
/*
	Author:				TR
	Date:				17/08/2012 22:13

	Description:		Delete record from FIXED_Incoming

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
/*~~~~~~~~~~~~~~~*/
CREATE PROCEDURE [dbo].[FIXED_usp_del_Incoming]
---------Parameters----------
@ID int,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF @ID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		ID
							FROM		FIXED_Incoming							WITH (READUNCOMMITTED)
							WHERE 		ID = @ID
							)
			BEGIN
				SET @ErrorMsg = '##01Table FIXED_Incoming - Could not find record ' + CAST(@ID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			DELETE	FIXED_Incoming							WITH (ROWLOCK)

			WHERE 	ID = @ID

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@ID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'FIXED_usp_del_Incoming',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1


GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[FIXED_usp_upd_Incoming]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[FIXED_usp_upd_Incoming]
GO

/*
	Author:				TR
	Date:				17/08/2012 22:13

	Description:		Update record in FIXED_Incoming

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[FIXED_usp_upd_Incoming]
---------Parameters----------
@ID int,
@ReceivedData nvarchar(50),
@PortNo int,
@IPAddress nvarchar(15),
@ScanDateTime datetime,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF @ID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		ID
							FROM		FIXED_Incoming				WITH (READUNCOMMITTED)
							WHERE 		ID = @ID
							)
			BEGIN
				SET @ErrorMsg = '##01Table FIXED_Incoming - Could not find record ' + CAST(@ID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			/************
			UPDATE RECORD
			************/
			UPDATE	FIXED_Incoming												WITH (ROWLOCK)

			SET 	ReceivedData = @ReceivedData,
					PortNo = @PortNo,
					IPAddress = @IPAddress,
					ScanDateTime = @ScanDateTime

			WHERE	ID = @ID

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@ID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'FIXED_usp_upd_Incoming',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
GO



IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[FIXED_usp_ins_Incoming]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[FIXED_usp_ins_Incoming]
GO

/*
	Author:				TR
	Date:				17/08/2012 22:13

	Description:		Insert record in FIXED_Incoming

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[FIXED_usp_ins_Incoming]
---------Parameters----------
@ReceivedData nvarchar(50),
@PortNo int,
@IPAddress nvarchar(15),
@RecordID int OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int

DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RecordID = 0
	SET @Success = 0

--	IF @CheckDuplicates = 1
--		BEGIN
			/***************************
			DON'T ALLOW DUPLICATE RECORD
			***************************/
--			IF EXISTS	(
--						SELECT 		ID
--						FROM		FIXED_Incoming						WITH (READUNCOMMITTED)
--						WHERE 		ReceivedData = @ReceivedData
--						)
--			BEGIN
--				SET @ErrorMsg = '##01Duplicate record in FIXED_Incoming ' + CAST(@ReceivedData AS nvarchar(64)) + ' was not inserted into the table'
--				RAISERROR(@ErrorMsg,16,1)
--			RETURN -1
--			END
--		END

	/************
	INSERT RECORD
	************/
	INSERT INTO	FIXED_Incoming												WITH (ROWLOCK)
			(
			ReceivedData, PortNo, IPAddress
			)
	VALUES
			(
			@ReceivedData, @PortNo, @IPAddress
			)

		SET @RecordID = SCOPE_IDENTITY()
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'FIXED_usp_ins_Incoming',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[FIXED_usp_sel_Incoming]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[FIXED_usp_sel_Incoming]
GO

/*
	Author:				TR
	Date:				17/08/2012 22:13

	Description:		Select records from FIXED_Incoming

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/

CREATE PROCEDURE [dbo].[FIXED_usp_sel_Incoming]
---------Parameters----------
@ReceivedData nvarchar(50) = NULL,
@SQL_WHERE nvarchar(4000) = NULL

AS

DECLARE @SQL_STRING nvarchar (4000)

SET NOCOUNT ON
SET DATEFORMAT dmy

	IF ISNULL(@ReceivedData,'') <> '' 
		/**************************
			RETURN SPECIFIC RECORDS
		**************************/
		BEGIN
			SELECT		ID, ReceivedData, PortNo, IPAddress, ScanDateTime

			FROM		FIXED_Incoming								WITH (READUNCOMMITTED)

			WHERE		ReceivedData = @ReceivedData

			ORDER BY 	ScanDateTime DESC

			RETURN
		END

	IF ISNULL(@SQL_WHERE,'') <> '' 
		/*********************************************
			SELECT RECORDS ACCORDING TO WHERE CRITERIA
		*********************************************/
		BEGIN
			SET @SQL_STRING = 'SELECT ID, ReceivedData, PortNo, IPAddress, ScanDateTime '
			SET @SQL_STRING = @SQL_STRING + 'FROM FIXED_Incoming '

			SET @SQL_STRING = @SQL_STRING + @SQL_WHERE

			EXEC(@SQL_STRING)

			RETURN
		END

	/*********************
		RETURN ALL RECORDS
	*********************/
	BEGIN
		SELECT		ID, ReceivedData, PortNo, IPAddress, ScanDateTime

		FROM		FIXED_Incoming								WITH (READUNCOMMITTED)

		ORDER BY 	ScanDateTime DESC

		RETURN
	END

GO

--====================================================================================
--End Store Procedure For Fixed Scanner
--===================================================================================

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_sel_PassedEvents]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_sel_PassedEvents]
GO

/*
	Author:				Md. Jakaria Hossain
	Date:				24/11/2012 19:55

	Description:		Select records from PROCEDURE_usp_sel_PassedEvents

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[PROCEDURE_usp_sel_PassedEvents]
---------Parameters----------
@EmailCount INT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 
DECLARE @dts DATETIME
SET NOCOUNT ON

SET @dts = GETDATE()

BEGIN TRY
	
	UPDATE Procedure_Alert 
	SET MailQueueStatus = 2,
		LastUpdatedOn = @dts
	WHERE ID IN
	(SELECT TOP (@EmailCount) ID
	FROM Procedure_Alert
	WHERE 
		ActionTaken = 1
	AND (EmailSent = 0 OR EmailSent IS NULL)
	AND (MailQueueStatus = 1 OR MailQueueStatus IS NULL))
	
	SELECT pca.ID, pca.StepID,ps.Name,pca.DateTimeOfAction,pca.CheckFrequency,pca.Comment,ps.CollectedIDList, pca.EmailSent
	FROM Procedure_Alert pca
	INNER JOIN PROCEDURE_Step ps
	ON ps.StepID = pca.StepID
	WHERE pca.ActionTaken = 1
	AND (pca.EmailSent = 0 OR pca.EmailSent IS NULL)
	AND (pca.MailQueueStatus = 2 AND pca.LastUpdatedOn = @dts)

	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 



	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_sel_PassedEvents',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
	
GO
--====================================================================================
--End Store Procedure For Passed Events
--===================================================================================

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_sel_JobForEmail]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_sel_JobForEmail]
GO

/*
	Author:				Titu(Junior)
	Date:				27-Mar-2013

	Description:		Select records from PROCEDURE_Job for sending email

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[PROCEDURE_usp_sel_JobForEmail]
---------Parameters----------
@EmailCount INT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 
DECLARE @dts DATETIME
SET NOCOUNT ON

SET @dts = GETDATE()

BEGIN TRY
	
	DECLARE @JobTemp TABLE(JobID INT)
	
	INSERT INTO @JobTemp (JobID)
	(SELECT TOP (@EmailCount) JobID
	FROM PROCEDURE_Job
	WHERE 
	(EmailSent = 0 OR EmailSent IS NULL)
	AND (MailQueueStatus = 1 OR MailQueueStatus IS NULL))
	
	UPDATE PROCEDURE_Job
	SET MailQueueStatus = 2
	WHERE JobID IN (SELECT JobID FROM @JobTemp)
	
	SELECT DISTINCT j.JobID, j.CompleteDate, j.EmailSent, j.MailQueueStatus, j.StepID, ps.Name ProcedureName, j.DeviceID,
	ps.AssigneeIDList, ps.CollectedIDList, j.UserName, (SELECT MIN(StepDetailID) FROM PROCEDURE_StepDetail WHERE StepID = j.StepID) AS StepDetailID
	FROM 
	PROCEDURE_Job j
	INNER JOIN PROCEDURE_Step ps ON ps.StepID = j.StepID
	--INNER JOIN PROCEDURE_JobDetail jd ON j.JobID = jd.JobID
	WHERE j.JobID IN (SELECT JobID FROM @JobTemp) 
	GROUP BY 	j.JobID, j.CompleteDate, j.EmailSent, j.MailQueueStatus, j.StepID, ps.Name, j.DeviceID,
	ps.AssigneeIDList, ps.CollectedIDList, j.UserName
		

	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 



	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_sel_JobForEmail',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
	
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_upd_JobEmailStatus]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_upd_JobEmailStatus]
GO
/*
	Author:				Titu(Junior)
	Date:				27-Mar-2013

	Description:		Update PROCEDURE_Job sending email

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[PROCEDURE_usp_upd_JobEmailStatus]

---------Parameters----------
@JobID BIGINT,
@Status INT,
@EmailFailComment NVARCHAR(500) = NULL, 
@Success bit OUTPUT

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)

BEGIN TRY
	SET @ErrorMsg = ''
	SET @Success = 0

	IF @Status = 0 
	BEGIN
		UPDATE	PROCEDURE_Job												WITH (ROWLOCK)
		SET		EmailSent = 0,
				MailQueueStatus = @Status,
				EmailFailComment = @EmailFailComment
		WHERE	JobID = @JobID
	END
	ELSE IF @Status = 3
	BEGIN
		UPDATE	PROCEDURE_Job												WITH (ROWLOCK)
		SET		EmailSent = 1,
				MailQueueStatus = @Status
		WHERE	JobID = @JobID
	END
	
	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) = '##'
		BEGIN	
			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[PROCEDURE_usp_upd_JobEmailStatus]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1

GO	

/****** Object:  StoredProcedure [dbo].[USER_usp_upd_User]    Script Date: 12/06/2012 18:59:52 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[USER_usp_upd_User]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[USER_usp_upd_User]
GO


/****** Object:  StoredProcedure [dbo].[USER_usp_upd_User]    Script Date: 12/06/2012 18:59:52 ******/
SET ANSI_NULLS OFF
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USER_usp_upd_User]

---------Parameters----------
@UserName nvarchar(16),
@FirstName nvarchar(16),
@LastName nvarchar(16),
@UserPassword nvarchar(128),
@RoleID int,
@Active bit,
@AppSkinID tinyint,
@EmailAddress nvarchar(128),
@Mobile nvarchar(16),
@Telephone nvarchar(16),
@JobTitle nvarchar(50),
@Comments nvarchar(256),
@PermissionOnDepartments nvarchar(500),
@AccessType int,
@Type int,
@StartDate datetime,
--@RecoedID int OUTPUT,
@Success bit OUTPUT

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)

BEGIN TRY
	SET @ErrorMsg = ''
	SET @Success = 0

	IF EXISTS(	SELECT	UserName 
				FROM	USER_User
				WHERE	UserName = @UserName )
		BEGIN
			UPDATE	USER_User												WITH (ROWLOCK)

			SET		USER_User.FirstName = @FirstName,
					USER_User.LastName = @LastName,
					USER_User.UserPassword = @UserPassword,
					USER_User.RoleID = @RoleID,
					USER_User.Active = @Active,
					USER_User.AppSkinID = @AppSkinID,
					USER_User.EmailAddress = @EmailAddress,
					USER_User.Mobile = @Mobile,
					USER_User.Telephone = @Telephone,
					USER_User.JobTitle = @JobTitle,
					USER_User.Comments = @Comments,
					USER_User.PermissionOnDepartments=@PermissionOnDepartments,
					USER_User.AccessType = @AccessType,
					USER_User.Type=@Type,
					USER_User.StartDate=@StartDate,
					USER_User.UpdatedOn = GETDATE()

			WHERE	USER_User.UserName = @UserName
			
			
			SET @Success = 1			
			RETURN 1
		END

	INSERT INTO	USER_User												WITH (ROWLOCK)
			(
			UserName, FirstName, LastName, UserPassword, RoleID, Active, EmailAddress, Mobile, Telephone, JobTitle, Comments,PermissionOnDepartments, AccessType,Type,StartDate, UpdatedOn
			)
	VALUES
			(
			@UserName, @FirstName, @LastName, @UserPassword, @RoleID, @Active, @EmailAddress, @Mobile, @Telephone, @JobTitle, @Comments,@PermissionOnDepartments, @AccessType,@Type,@StartDate, GETDATE()
			)

	--SET @RecoedID = SCOPE_IDENTITY()
	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) <> '##'
		BEGIN	
			/*SET @ErrorParamsData =	'@Barcode = ' + @Barcode + ', @Pallet_No = ' +  CAST(@Pallet_No AS nvarchar(8))  + */

			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[USER_usp_upd_User]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1


GO


/****** Object:  StoredProcedure [dbo].[USER_usp_sel_Role]    Script Date: 01/08/2014 18:19:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[USER_usp_sel_Role]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[USER_usp_sel_Role]
GO


/****** Object:  StoredProcedure [dbo].[USER_usp_sel_Role]    Script Date: 01/08/2014 18:19:46 ******/
SET ANSI_NULLS OFF
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USER_usp_sel_Role]

@RoleID int = 0,
@RoleDescription nvarchar(50) = NULL

AS

	SELECT 		USER_Role.RoleID, USER_Role.RoleDescription, ISNULL(USER_Role.CanResolveCA, 0) AS CanResolveCA, USER_Role.IsActive 

	FROM 		USER_Role  	WITH (READUNCOMMITTED)

	WHERE 		USER_Role.RoleID = CASE WHEN @RoleID > 0 THEN @RoleID ELSE USER_Role.RoleID END
	AND			USER_Role.RoleDescription = CASE WHEN @RoleDescription IS NOT NULL THEN @RoleDescription ELSE USER_Role.RoleDescription END

	ORDER BY 	USER_Role.RoleDescription 	ASC

GO

/****** Object:  StoredProcedure [dbo].[USER_usp_upd_Role]    Script Date: 12/13/2013 19:33:56 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[USER_usp_upd_Role]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[USER_usp_upd_Role]
GO

/****** Object:  StoredProcedure [dbo].[USER_usp_upd_Role]    Script Date: 12/13/2013 19:33:56 ******/
SET ANSI_NULLS OFF
GO

SET QUOTED_IDENTIFIER OFF
GO

CREATE PROCEDURE [dbo].[USER_usp_upd_Role]

@RoleID int = 0,
@RoleDescription nvarchar(50),
@IsActive bit = 0,
@CanResolveCA BIT = 0,
@RecordID int OUTPUT,
@Success bit OUTPUT

AS

SET @Success = 0

IF @RoleID > 0 
	BEGIN
		UPDATE 	USER_Role 						WITH (ROWLOCK)
		
		SET 		USER_Role.RoleDescription = @RoleDescription, 
					CanResolveCA = @CanResolveCA,
					UpdatedOn = GETDATE(),
					USER_Role.IsActive = @IsActive
					
		WHERE 	USER_Role.RoleID = @RoleID

		SET @RecordID = @RoleID
	END
ELSE
	BEGIN	
		INSERT INTO 	USER_Role 						WITH (ROWLOCK)  
		
				(RoleDescription, IsActive, CanResolveCA, UpdatedOn)
		VALUES 	(@RoleDescription, @IsActive, @CanResolveCA, GETDATE())
		
		SET @RecordID = SCOPE_IDENTITY()
	END

IF @@ERROR = 0 SET @Success = 1

GO

/****** Object:  StoredProcedure [dbo].[REPORT_usp_ExportProcedures]    Script Date: 01/16/2013 19:06:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[REPORT_usp_ExportProcedures]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[REPORT_usp_ExportProcedures]
GO


/****** Object:  StoredProcedure [dbo].[REPORT_usp_ExportProcedures]    Script Date: 01/16/2013 19:06:27 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[REPORT_usp_ExportProcedures]

---------Parameters----------
@StepIDs NVARCHAR(MAX)
--@Success bit OUTPUT

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)

BEGIN TRY
	SET @ErrorMsg = ''
--	SET @Success = 0

	SELECT	StepID,SequencePosition, StepDetailID, Description, DataTypeName, DataType, MinValue, MaxValue, Mandatory
	FROM	dbo.PROCEDURE_StepDetail
	WHERE	StepID in (SELECT FieldValue FROM dbo.fnSplit(',', @StepIDs))
	ORDER BY SequencePosition
	
--	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) <> '##'
		BEGIN	
			/*SET @ErrorParamsData =	'@Barcode = ' + @Barcode + ', @Pallet_No = ' +  CAST(@Pallet_No AS nvarchar(8))  + */

			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[REPORT_usp_Procedure]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1




GO








IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_ForcedStockChk_usp_upd_Assignee]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_ForcedStockChk_usp_upd_Assignee]
GO
/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_ForcedStockChk_usp_upd_Assendee]   Script Date: 03/01/2013 12:35:39 ******/

/*
	Author:				Titu JR
	Date:				07/05/2013 16.36

	Description:		Update Attendee List record in STOCKCONTROL_ForcedStockChk
	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[STOCKCONTROL_ForcedStockChk_usp_upd_Assignee]

---------Parameters----------
@ForcedStockCheckID INT,
@AssigneeIDList NVARCHAR(1024),
@Success bit OUTPUT

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)

BEGIN TRY
	SET @ErrorMsg = ''
	SET @Success = 0


	IF ISNULL(@AssigneeIDList,'') <> ''
		BEGIN
			UPDATE dbo.STOCKCONTROL_ForcedStockCheck
			SET		AssineeList = @AssigneeIDList
			WHERE	ForcedStockCheckID = @ForcedStockCheckID
		END
	ELSE
		BEGIN
		
			UPDATE	dbo.STOCKCONTROL_ForcedStockCheck
			SET		AssineeList = @AssigneeIDList
			WHERE	ForcedStockCheckID = @ForcedStockCheckID
			
		END	
		
		
			
	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) <> '##'
		BEGIN	
			/*SET @ErrorParamsData =	'@Barcode = ' + @Barcode + ', @Pallet_No = ' +  CAST(@Pallet_No AS nvarchar(8))  + */

			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = 'STOCKCONTROL_ForcedStockChk_usp_upd_Assignee',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1
	GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_ins_ForcedStockChk]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_ins_ForcedStockChk]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_ins_ForcedStockChk]    Script Date: 07/05/2013 17:43:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				TR
	Date:				07/05/2013 18:00

	Description:		Insert record in STOCKCONTROL_ForcedStockChk

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_ins_ForcedStockChk]
---------Parameters----------
@Name nvarchar(200),
@CheckFrequency nvarchar(16) = NULL,
@CheckFrequencyMins int = NULL,
@CheckFirstOfDay datetime = NULL,
@CheckFinish DATETIME = NULL,
@DayNo INT = NULL,
@Month NVARCHAR(16) = NULL,
@DayOfWeek VARCHAR(150) = NULL,
@MonthStep INT = NULL,
@DayStep INT = NULL,
@WeekNo INT = NULL,
@CreateBy NVARCHAR(20) ,
@CreateDate DATETIME,
@Type INT = NULL,
@RecordID int OUTPUT,
@Success bit OUTPUT
AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RecordID = 0
	SET @Success = 0


	/************
	INSERT RECORD
	************/	
	INSERT INTO	[STOCKCONTROL_ForcedStockCheck]												WITH (ROWLOCK)
			(
			[Name], CreateBy,  CheckFrequency, CheckFrequencyMins, CheckFirstOfDay, CheckFinish, DayOfWeek, DayNo, [Month], MonthStep, DayStep,  WeekNo ,CreateDate,[Type],UpdatedOn
			
			)
	VALUES
			(
			@Name, @CreateBy, @CheckFrequency, @CheckFrequencyMins, @CheckFirstOfDay, @CheckFinish, @DayOfWeek, @DayNo, @Month, @MonthStep, @DayStep,  @WeekNo,@CreateDate,@Type,GETDATE()
			)

	SET @RecordID = SCOPE_IDENTITY()
		
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_ins_ForcedStockChk',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
	
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PDA_usp_sel_UnprocessData]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PDA_usp_sel_UnprocessData]
GO

/****** Object:  StoredProcedure [dbo].[PDA_usp_sel_UnprocessData]    Script Date: 07/05/2013 17:43:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				Titu JR
	Date:				07/05/2013 20:00

	Description:		Select record from PDA_Transaction_Mirror

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PDA_usp_sel_UnprocessData]
---------Parameters----------
AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @ErrorMsg = ''

	/************
	SELECT RECORD
	************/
		
	SELECT ISNULL(COUNT(RecordID),0) AS [Count]   
	FROM PDA_Transactions_Mirror 
	WHERE Processed is NULL AND ISNULL(FailCount,0) <= 0
	
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 
	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PDA_usp_sel_UnprocessData',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
	
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_sel_TraceabilityProduct]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_sel_TraceabilityProduct]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_TraceabilityProduct]    Script Date: 07/05/2013 17:43:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				Titu JR
	Date:				07/05/2013 20:00

	Description:		Select record from STOCKCONTROL_Product

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_sel_TraceabilityProduct]
---------Parameters----------
@TraceabilityCode nvarchar (100),
@ProductDesc nvarchar (200) OUTPUT
AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @ErrorMsg =''

	/************
	SELECT RECORD
	************/	
	BEGIN
		Select @ProductDesc = sp.Description
		FROM	[STOCKCONTROL_ProductCode]		spc
		INNER JOIN 	STOCKCONTROL_Product sp ON sp.ProductID = spc.ProductID
		Where spc.TraceabilityCode = @TraceabilityCode
	END
	
	
	SET @ProductDesc = ISNULL(@ProductDesc,'')
	
	Return 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 
	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_sel_TraceabilityProduct',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
	
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_sel_ForcedStockChk]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_sel_ForcedStockChk]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_ins_ForcedStockChk]    Script Date: 07/05/2013 17:43:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				Titu JR
	Date:				07/05/2013 20:00

	Description:		Select record from STOCKCONTROL_ForcedStockChk

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_sel_ForcedStockChk]
---------Parameters----------
@Type INT = NULL
AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY


	/************
	SELECT RECORD
	************/	
	IF @Type = 2
		BEGIN
			SELECT sf.ForcedStockCheckID,Name,CheckFrequency,CheckFrequencyMins,CheckFinish,CheckFirstOfDay,
			DayNo,DayOfWeek,DayStep,MonthStep,WeekNo,
			Month,AssineeList,CreateDate,CreateBy, COUNT(scr.StockCheckRackID) NumberOfRacks
			FROM	[STOCKCONTROL_ForcedStockCheck]		sf	
			INNER JOIN 	STOCKCONTROL_ForcedStockChkRack scr ON sf.ForcedStockCheckID = scr.ForcedStockCheckID 
			Group by sf.ForcedStockCheckID, Name,CheckFrequency,CheckFrequencyMins,CheckFinish,CheckFirstOfDay,
			DayNo,DayOfWeek,DayStep,MonthStep,WeekNo,Month,AssineeList,CreateDate,CreateBy	
			RETURN 1
		END
	
	IF @Type = 3
		BEGIN
			SELECT sf.ForcedStockCheckID,Name,CheckFrequency,CheckFrequencyMins,CheckFinish,CheckFirstOfDay,
			DayNo,DayOfWeek,DayStep,MonthStep,WeekNo,
			Month,AssineeList,CreateDate,CreateBy, COUNT(scr.StockCheckProductID) NumberOfRacks
			FROM	[STOCKCONTROL_ForcedStockCheck]		sf	
			INNER JOIN 	STOCKCONTROL_ForcedStockChkProduct scr ON sf.ForcedStockCheckID = scr.ForcedStockCheckID 
			Group by sf.ForcedStockCheckID, Name,CheckFrequency,CheckFrequencyMins,CheckFinish,CheckFirstOfDay,
			DayNo,DayOfWeek,DayStep,MonthStep,WeekNo,Month,AssineeList,CreateDate,CreateBy	
			RETURN 1
		END
		
	IF @Type IS NULL
		BEGIN
			SELECT sf.ForcedStockCheckID,Name,CheckFrequency,CheckFrequencyMins,CheckFinish,CheckFirstOfDay,
			DayNo,DayOfWeek,DayStep,MonthStep,WeekNo,
			Month,AssineeList,CreateDate,CreateBy
			FROM	[STOCKCONTROL_ForcedStockCheck]		sf	
			RETURN 1
		END
		
	
	
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 
	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_sel_ForcedStockChk',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
	
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_del_ForcedStockChk]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_del_ForcedStockChk]
GO
/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_del_ForcedStockChk]    Script Date: 06/30/2012 17:43:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				TR
	Date:				01/05/2012 19:17

	Description:		Delete record from STOCKCONTROL_ForcedStockCheck

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_del_ForcedStockChk]
---------Parameters----------
@ForcedStockCheckID INT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg =''

	IF ISNULL(@ForcedStockCheckID,0) <> 0
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		ForcedStockCheckID
							FROM		STOCKCONTROL_ForcedStockCheck						WITH (READUNCOMMITTED)
							WHERE 		ForcedStockCheckID = @ForcedStockCheckID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_ForcedStockCheck - Could not find record ' + @ForcedStockCheckID
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			DELETE	FROM STOCKCONTROL_ForcedStockChkRack							WITH (ROWLOCK)

			WHERE 	ForcedStockCheckID = @ForcedStockCheckID
			
			DELETE	FROM STOCKCONTROL_ForcedStockChkProduct							WITH (ROWLOCK)
			WHERE 	ForcedStockCheckID = @ForcedStockCheckID
			
			DELETE	FROM STOCKCONTROL_ForcedStockCheck							WITH (ROWLOCK)

			WHERE 	ForcedStockCheckID = @ForcedStockCheckID

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + @ForcedStockCheckID
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_del_ForcedStockChk',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_sel_ForcedStockChkRack]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_sel_ForcedStockChkRack]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_ForcedStockChkRack]    Script Date: 07/05/2013 17:43:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				Titu JR
	Date:				07/05/2013 20:00

	Description:		Select record from STOCKCONTROL_ForcedStockChkRack

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_sel_ForcedStockChkRack]
---------Parameters----------
@ForcedStockCheckID INT
AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY


	/************
	SELECT RECORD
	************/	
	IF @ForcedStockCheckID >= 0 
		/**************************
			RETURN SPECIFIC RECORDS
		**************************/
		BEGIN
			SELECT CASE WHEN  rp.StockCheckRackID > 0  THEN 1 ELSE 0 END AS [Select],
			rp.StockCheckRackID, r.RackID, r.RackLocationID, rp.ForcedStockCheckID, r.Description

			FROM STOCKCONTROL_Rack r
			Left JOIN STOCKCONTROL_ForcedStockChkRack	rp on r.RackLocationID = rp.RackLocationID AND rp.ForcedStockCheckID = @ForcedStockCheckID

			ORDER BY 	[Select] DESC, r.RackID ASC

			RETURN
		END										
		
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 


	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_sel_ForcedStockChkRack',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
	
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_sel_ForcedStockChkProduct]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_sel_ForcedStockChkProduct]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_ForcedStockChkRack]    Script Date: 07/05/2013 17:43:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				Titu JR
	Date:				07/05/2013 20:00

	Description:		Select record from STOCKCONTROL_ForcedStockChkProduct

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_sel_ForcedStockChkProduct]
---------Parameters----------
@ForcedStockCheckID INT
AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY


	/************
	SELECT RECORD
	************/	
	IF @ForcedStockCheckID >= 0 
		/**************************
			RETURN SPECIFIC RECORDS
		**************************/
		BEGIN
			SELECT CASE WHEN  rp.StockCheckProductID > 0  THEN 1 ELSE 0 END AS [Select],
			rp.StockCheckProductID, r.ProductID,r.Description, rp.ForcedStockCheckID,r.QtyInStock,r.ProductCode

			FROM STOCKCONTROL_Product r
			Left JOIN STOCKCONTROL_ForcedStockChkProduct	rp on r.ProductID = rp.ProductID AND rp.ForcedStockCheckID = @ForcedStockCheckID

			ORDER BY 	[Select] DESC, r.ProductID ASC

			RETURN
		END										
		
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 


	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_sel_ForcedStockChkProduct',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
	
GO


		
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_upd_ReturnQty]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_upd_ReturnQty]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_upd_ReturnQty]    Script Date: 07/05/2013 17:43:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				TR
	Date:				07/05/2013 18:40

	Description:		Update record in STOCKCONTROL_RackProduct

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_upd_ReturnQty]
---------Parameters----------
@Qty DECIMAL(18,2),
@PODetailID INT ,
@POID INT ,
@ProductID INT ,
@RackLocationID INT ,
@UserName nvarchar (16),
@Success bit OUTPUT
AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @OriginalQty DECIMAL(18,2)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 
DECLARE @PurchaseOrderStatus nvarchar(100)

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg =''

		   			     
	    UPDATE STOCKCONTROL_RackProduct 
	    SET  Qty = Qty - @Qty, UpdatedOn = GETDATE() 
	    WHERE RackLocationID = @RackLocationID and ProductID = @ProductID
	     
	    UPDATE STOCKCONTROL_PurchaseOrderDetail 
	    SET ReceivedQuantity = ReceivedQuantity - @Qty, UpdatedOn = GETDATE() 
	    WHERE PODetailID = @PODetailID
	     
	    SET @PurchaseOrderStatus = dbo.fnGetPurchaseOrderStatus(@POID)
	
	    UPDATE  STOCKCONTROL_PurchaseOrder SET Status= @PurchaseOrderStatus, UpdatedOn = GETDATE()  WHERE POID = @POID	
	    
	    
		INSERT INTO STOCKCONTROL_PurchaseOrderCheck(PODetailID, RackLocationID,ProductID, Quantity ,IsReturn ,CreateDate , CreatedBy  )
		VALUES(@PODetailID , @RackLocationID,@ProductID, @Qty , 1 ,GETDATE() ,@UserName )			    

		EXEC STOCKCONTROL_usp_upd_ProductQuantityInStock @ProductID, 0  
		
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_upd_ReturnQty',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
	
GO



/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_upd_RecivedQty]    Script Date: 02/14/2014 12:06:07 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_upd_RecivedQty]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_upd_RecivedQty]
GO


/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_upd_RecivedQty]    Script Date: 02/14/2014 12:06:07 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
	Author:				Titu(jr)
	Date:				07/05/2013 18:40

	Description:		Update record in STOCKCONTROL_PurchaseOrderChk

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_upd_RecivedQty]
---------Parameters----------
@Qty DECIMAL(18,2),
@PODetailID INT ,
@POID INT ,
@ProductID INT ,
@IsReturn BIT ,
@UserName nvarchar (16),
@Success bit OUTPUT
AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 
DECLARE @RackLocationID INT 
DECLARE @PurchaseOrderStatus nvarchar(100)
DECLARE @StockQty nvarchar(100)
DECLARE @ReceivedQuantity DECIMAL (18,2)
DECLARE @ChangeQuantity DECIMAL (18,2)

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0


	/************
	UPDATE RECORD
	************/	
	
	    SET @ErrorMsg =''
		
		
	    IF  EXISTS (SELECT * FROM STOCKCONTROL_PurchaseOrderCheck where PODetailID=@PODetailID AND ProductID=@ProductID)
			BEGIN
			
			     SELECT TOP(1) @RackLocationID =  RackLocationID FROM STOCKCONTROL_PurchaseOrderCheck WHERE PODetailID=@PODetailID AND ProductID=@ProductID AND IsReturn = 0 
			     ORDER BY [CreateDate] DESC
			     
			     SELECT @ReceivedQuantity = ReceivedQuantity FROM STOCKCONTROL_PurchaseOrderDetail WHERE PODetailID=@PODetailID AND ProductID=@ProductID
				 SET @ChangeQuantity = @Qty - @ReceivedQuantity
			     
			     SELECT @StockQty =  Qty FROM STOCKCONTROL_RackProduct WHERE RackLocationID = @RackLocationID and ProductID = @ProductID
			     

				IF (@StockQty + @ChangeQuantity ) < 0
					BEGIN
						 SET @Success = 0
						 RETURN -1
					END					
				ELSE
					BEGIN
						UPDATE STOCKCONTROL_RackProduct 
						SET  Qty = Qty + @ChangeQuantity , UpdatedOn = GETDATE() 
						WHERE RackLocationID = @RackLocationID and ProductID = @ProductID
						
						UPDATE STOCKCONTROL_PurchaseOrderDetail SET ReceivedQuantity = ReceivedQuantity + @ChangeQuantity, UpdatedOn = GETDATE() 
						WHERE PODetailID = @PODetailID
					END

			    
			     
			    SET @PurchaseOrderStatus = dbo.fnGetPurchaseOrderStatus(@POID)
			
			    UPDATE  STOCKCONTROL_PurchaseOrder SET Status= @PurchaseOrderStatus, UpdatedOn = GETDATE()  WHERE POID = @POID	
			    
			    EXEC STOCKCONTROL_usp_upd_ProductQuantityInStock @ProductID, 0			    			    
		    
			END
		
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_upd_RecivedQty',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
	

GO





IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_upd_ForcedStockChk]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_upd_ForcedStockChk]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_ins_ForcedStockChk]    Script Date: 07/05/2013 17:43:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				TR
	Date:				07/05/2013 18:40

	Description:		Update record in STOCKCONTROL_ForcedStockChk

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_upd_ForcedStockChk]
---------Parameters----------
@ForcedStockCheckID INT,
@Name nvarchar(200),
@CheckFrequency nvarchar(16) = NULL,
@CheckFrequencyMins int = NULL,
@CheckFirstOfDay datetime = NULL,
@CheckFinish DATETIME = NULL,
@DayNo INT = NULL,
@Month NVARCHAR(16) = NULL,
@DayOfWeek VARCHAR(150) = NULL,
@MonthStep INT = NULL,
@DayStep INT = NULL,
@WeekNo INT = NULL,
@Success bit OUTPUT
AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0


	/************
	UPDATE RECORD
	************/	
	IF @CheckFrequency = 'Minutes'			        
				BEGIN
					SET @DayOfWeek = NULL SET @DayNo = NULL SET @Month = NULL SET @WeekNo = NULL
				END
			ELSE IF @CheckFrequency = 'Hourly'				
				BEGIN
					SET @DayOfWeek = NULL SET @DayNo = NULL SET @Month = NULL SET @WeekNo = NULL
				END
			ELSE IF @CheckFrequency = 'Daily'				
				BEGIN
					--SET @DayOfWeek = NULL SET @DayNo = NULL SET @Month = NULL
					SET @DayNo = NULL SET @Month = NULL SET @WeekNo = NULL
				END
			ELSE IF @CheckFrequency = 'Weekly'				
				BEGIN
					SET @DayNo = NULL SET @Month = NULL SET @CheckFrequencyMins = NULL SET @CheckFinish = NULL
				END
			ELSE IF @CheckFrequency = 'Monthly'			
				BEGIN
					SET @DayOfWeek = NULL SET @Month = NULL SET @CheckFrequencyMins = NULL SET @CheckFinish = NULL	SET @WeekNo = NULL									
				END
			ELSE IF @CheckFrequency = 'Yearly'			
				BEGIN					
					SET @CheckFrequencyMins = NULL SET @CheckFinish = NULL SET @DayOfWeek = NULL SET @WeekNo = NULL
				END

			UPDATE	STOCKCONTROL_ForcedStockCheck												WITH (ROWLOCK)
			SET 	Name = @Name,
					CheckFrequency = @CheckFrequency,
					CheckFrequencyMins = @CheckFrequencyMins,
					CheckFirstOfDay = @CheckFirstOfDay,
					CheckFinish = @CheckFinish,
					DayOfWeek = @DayOfWeek,
					DayNo = @DayNo,
					DayStep = @DayStep,
					MonthStep = @MonthStep,
					WeekNo = @WeekNo,
					[Month] = @Month,
					UpdatedOn = GETDATE()						

			WHERE	ForcedStockCheckID = @ForcedStockCheckID	
		
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_upd_ForcedStockChk',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
	
GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_upd_ForcedStockChkRack]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_upd_ForcedStockChkRack]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_upd_ForcedStockChkRack]    Script Date: 07/05/2013 19:16:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				Titu JR
	Date:				07/05/2013 19:17

	Description:		Update record in STOCKCONTROL_ForcedStockChkRack

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_upd_ForcedStockChkRack]
---------Parameters----------
@StockCheckRackID INT,
@ForcedStockCheckID INT,
@RackLocationID INT,
@Success bit OUTPUT
AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg = ''

	IF ISNULL(@RackLocationID,0) <> 0
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		RackLocationID
							FROM		STOCKCONTROL_ForcedStockChkRack				WITH (READUNCOMMITTED)
							WHERE 		StockCheckRackID = @StockCheckRackID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_ForcedStockChkRack - Could not find record ' + @ForcedStockCheckID
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			/************
			UPDATE RECORD
			************/
			UPDATE	STOCKCONTROL_ForcedStockChkRack												WITH (ROWLOCK)

			SET 	RackLocationID = @RackLocationID,
					ForcedStockCheckID = @ForcedStockCheckID,
					UpdatedOn = GETDATE()

			WHERE	StockCheckRackID = @StockCheckRackID

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + @RackLocationID
			RAISERROR(@ErrorMsg,16,1)
		END
		
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

		
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_upd_ForcedStockChkRack',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
	
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_upd_ForcedStockChkProduct]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_upd_ForcedStockChkProduct]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_upd_ForcedStockChkProduct]    Script Date: 07/05/2013 19:16:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				Titu JR
	Date:				07/05/2013 19:17

	Description:		Update record in STOCKCONTROL_ForcedStockChkProduct

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_upd_ForcedStockChkProduct]
---------Parameters----------
@StockCheckProductID INT,
@ForcedStockCheckID INT,
@ProductID INT,
@Success bit OUTPUT
AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg = ''

	IF ISNULL(@ProductID,0) <> 0
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		ProductID
							FROM		STOCKCONTROL_ForcedStockChkProduct				WITH (READUNCOMMITTED)
							WHERE 		StockCheckProductID = @StockCheckProductID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_ForcedStockChkProduct - Could not find record ' + @ForcedStockCheckID
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			/************
			UPDATE RECORD
			************/
			UPDATE	STOCKCONTROL_ForcedStockChkProduct												WITH (ROWLOCK)

			SET 	ProductID = @ProductID,
					ForcedStockCheckID = @ForcedStockCheckID,
					UpdatedOn = GETDATE()

			WHERE	StockCheckProductID = @StockCheckProductID

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + @ProductID
			RAISERROR(@ErrorMsg,16,1)
		END
		
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

		
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_upd_ForcedStockChkProduct',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
	
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_del_ForcedStockChkRack]    Script Date: 08/02/2012 16:39:51 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_del_ForcedStockChkRack]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_del_ForcedStockChkRack]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_del_RackProduct]    Script Date: 06/30/2012 17:43:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				TR
	Date:				01/05/2012 19:27

	Description:		Delete record from STOCKCONTROL_RackProduct

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_del_ForcedStockChkRack]
---------Parameters----------
@StockCheckRackID nvarchar(50),
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg = ''

	IF ISNULL(@StockCheckRackID,'') <> ''
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		RackLocationID
							FROM		STOCKCONTROL_ForcedStockChkRack							WITH (READUNCOMMITTED)
							WHERE 		StockCheckRackID = @StockCheckRackID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_ForcedStockChkRack - Could not find record ' + @StockCheckRackID 
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			DELETE	STOCKCONTROL_ForcedStockChkRack							WITH (ROWLOCK)

			WHERE 	StockCheckRackID = @StockCheckRackID

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + @StockCheckRackID
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_del_ForcedStockChkRack',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_del_ForcedStockChkProduct]    Script Date: 08/02/2012 16:39:51 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_del_ForcedStockChkProduct]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_del_ForcedStockChkProduct]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_del_RackProduct]    Script Date: 06/30/2012 17:43:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				TR
	Date:				01/05/2012 19:27

	Description:		Delete record from [STOCKCONTROL_ForcedStockChkProduct]

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_del_ForcedStockChkProduct]
---------Parameters----------
@StockCheckProductID nvarchar(50),
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg = ''

	IF ISNULL(@StockCheckProductID,'') <> ''
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		ProductID
							FROM		STOCKCONTROL_ForcedStockChkProduct							WITH (READUNCOMMITTED)
							WHERE 		StockCheckProductID = @StockCheckProductID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_ForcedStockChkProduct - Could not find record ' + @StockCheckProductID 
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			DELETE	STOCKCONTROL_ForcedStockChkProduct							WITH (ROWLOCK)

			WHERE 	StockCheckProductID = @StockCheckProductID

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + @StockCheckProductID
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_del_ForcedStockChkProduct',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_ins_ForcedStockChkRack]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_ins_ForcedStockChkRack]
GO
/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_ins_ForcedStockChkRack]    Script Date: 07/05/2013 17:43:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				TR
	Date:				07/05/2013 18:56

	Description:		Insert record in STOCKCONTROL_ForcedStockChkRack

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_ins_ForcedStockChkRack]
---------Parameters----------
@ForcedStockCheckID INT,
@RackLocationID INT,
@StockCheckRackID INT OUTPUT,
@Success bit OUTPUT
AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg = ''

	/***************************
	DON'T ALLOW DUPLICATE RECORD
	***************************/
	IF EXISTS	(
		SELECT 		RackLocationID
		FROM		STOCKCONTROL_ForcedStockChkRack		WITH (READUNCOMMITTED)
		WHERE 		ForcedStockCheckID = @ForcedStockCheckID AND RackLocationID = @RackLocationID
				)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_ForcedStockChkRack - Could not find record ' + @ForcedStockCheckID
				RAISERROR(@ErrorMsg,16,1)
			RETURN -1
			END

	/************
	INSERT RECORD
	************/
	INSERT INTO	STOCKCONTROL_ForcedStockChkRack	WITH (ROWLOCK)
			(
			RackLocationID, ForcedStockCheckID,UpdatedOn
			)
	VALUES
			(
			@RackLocationID, @ForcedStockCheckID,GETDATE()
			)
			
		SET @StockCheckRackID = SCOPE_IDENTITY()	
		SET @Success = 1
		RETURN 1
END TRY

BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_ins_ForcedStockChkRack',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
	
GO
	
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_ins_ForcedStockChkProduct]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_ins_ForcedStockChkProduct]
GO
/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_ins_ForcedStockChkRack]    Script Date: 07/05/2013 17:43:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				TR
	Date:				07/05/2013 18:56

	Description:		Insert record in STOCKCONTROL_ForcedStockChkProduct

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_ins_ForcedStockChkProduct]
---------Parameters----------
@ForcedStockCheckID INT,
@ProductID INT,
@StockCheckProductID INT OUTPUT,
@Success bit OUTPUT
AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg = ''

	/***************************
	DON'T ALLOW DUPLICATE RECORD
	***************************/
	IF EXISTS	(
		SELECT 		ProductID
		FROM		STOCKCONTROL_ForcedStockChkProduct		WITH (READUNCOMMITTED)
		WHERE 		ForcedStockCheckID = @ForcedStockCheckID AND ProductID = @ProductID
				)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_ForcedStockChkProduct - Could not find record ' + @ForcedStockCheckID
				RAISERROR(@ErrorMsg,16,1)
			RETURN -1
			END

	/************
	INSERT RECORD
	************/
	INSERT INTO	STOCKCONTROL_ForcedStockChkProduct	WITH (ROWLOCK)
			(
			ProductID, ForcedStockCheckID,UpdatedOn
			)
	VALUES
			(
			@ProductID, @ForcedStockCheckID,GETDATE()
			)
			
		SET @StockCheckProductID = SCOPE_IDENTITY()	
		SET @Success = 1
		RETURN 1

END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_ins_ForcedStockChkProduct',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
	
GO
	
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_del_ForcedStockCheck]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_del_ForcedStockCheck]
GO
/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_del_ForcedStockCheck]    Script Date: 07/05/2013 17:43:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				Titu JR
	Date:				07/05/2013 19:32

	Description:		Delete record in STOCKCONTROL_ForcedStockChk

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_del_ForcedStockCheck]
---------Parameters----------
@ForcedStockCheckID INT,
@Success bit OUTPUT
AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg = ''

	/***************************
	DELETE RECORD 
	***************************/
		DELETE FROM STOCKCONTROL_ForcedStockChkRack WHERE ForcedStockCheckID = @ForcedStockCheckID
		DELETE FROM STOCKCONTROL_ForcedStockCheck WHERE ForcedStockCheckID = @ForcedStockCheckID
		
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_del_ForcedStockCheck',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
	
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_del_Category]    Script Date: 08/02/2012 16:39:51 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_del_Category]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_del_Category]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_del_Customer]    Script Date: 08/02/2012 16:39:51 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_del_Customer]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_del_Customer]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_del_Product]    Script Date: 08/02/2012 16:39:51 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_del_Product]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_del_Product]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_del_Rack]    Script Date: 08/02/2012 16:39:51 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_del_Rack]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_del_Rack]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_del_RackProduct]    Script Date: 08/02/2012 16:39:51 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_del_RackProduct]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_del_RackProduct]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_del_Supplier]    Script Date: 08/02/2012 16:39:51 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_del_Supplier]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_del_Supplier]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_ins_Category]    Script Date: 08/02/2012 16:39:51 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_ins_Category]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_ins_Category]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_ins_Customer]    Script Date: 07/26/2013 14:43:44 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_ins_Customer]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_ins_Customer]
GO


/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_ins_Product]    Script Date: 08/02/2012 16:39:51 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_ins_Product]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_ins_Product]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_ins_Rack]    Script Date: 08/02/2012 16:39:51 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_ins_Rack]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_ins_Rack]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_ins_RackProduct]    Script Date: 08/02/2012 16:39:51 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_ins_RackProduct]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_ins_RackProduct]
GO


/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_ins_Supplier]    Script Date: 07/26/2013 14:46:02 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_ins_Supplier]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_ins_Supplier]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_Category]    Script Date: 08/02/2012 16:39:51 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_sel_Category]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_sel_Category]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_Customer]    Script Date: 08/02/2012 16:39:51 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_sel_Customer]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_sel_Customer]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_Product]    Script Date: 08/02/2012 16:39:51 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_sel_Product]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_sel_Product]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_Rack]    Script Date: 08/02/2012 16:39:51 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_sel_Rack]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_sel_Rack]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_RackProduct]    Script Date: 08/02/2012 16:39:51 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_sel_RackProduct]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_sel_RackProduct]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_StockCheck]    Script Date: 08/02/2012 16:39:51 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_sel_StockCheck]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_sel_StockCheck]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_Supplier]    Script Date: 07/26/2013 14:48:36 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_sel_Supplier]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_sel_Supplier]
GO


/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_Supplier_Product]    Script Date: 08/02/2012 16:39:51 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_sel_Supplier_Product]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_sel_Supplier_Product]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_upd_Category]    Script Date: 08/02/2012 16:39:51 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_upd_Category]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_upd_Category]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_upd_Customer]    Script Date: 07/26/2013 14:50:13 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_upd_Customer]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_upd_Customer]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_upd_Product]    Script Date: 08/02/2012 16:39:51 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_upd_Product]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_upd_Product]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_upd_Rack]    Script Date: 08/02/2012 16:39:51 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_upd_Rack]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_upd_Rack]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_upd_RackProduct]    Script Date: 08/02/2012 16:39:51 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_upd_RackProduct]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_upd_RackProduct]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_upd_Supplier]    Script Date: 07/26/2013 14:51:38 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_upd_Supplier]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_upd_Supplier]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_ins_ProductCode]    Script Date: 04/18/2013 02:05:37 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_ins_ProductCode]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_ins_ProductCode]
GO


/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_ins_ProductCode]    Script Date: 04/18/2013 02:05:37 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
	Author:				TR
	Date:				01/05/2012 18:23

	Description:		Insert record in STOCKCONTROL_ProductCode

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_ins_ProductCode]
---------Parameters----------
@ProductID int,
@TraceabilityCode nvarchar(50),
@JobDetailID INT = NULL,
@SupplierID INT = NULL,
@BornIn nvarchar(100),
@RaisedIn nvarchar(100),
@SlaughteredIn nvarchar(100),
@SlaughtereHouseNo nvarchar(100),
@CutIn nvarchar(100),
@CutInPlantNo nvarchar(100),
@RecordID int OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int

DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RecordID = 0
	SET @Success = 0
	SET @ErrorMsg =''
		
	/************
	INSERT RECORD
	************/
	IF @TraceabilityCode IS NOT NULL
	BEGIN
		INSERT INTO	STOCKCONTROL_ProductCode												WITH (ROWLOCK)
				(
				ProductID, TraceabilityCode, JobDetailID, SupplierID, UpdatedOn,BornIn,RaisedIn,SlaughteredIn,SlaughtereHouseNo,CutIn,CutInPlantNo
				)
		VALUES
				(
				@ProductID, @TraceabilityCode, @JobDetailID, @SupplierID, GETDATE(),@BornIn,@RaisedIn,@SlaughteredIn,@SlaughtereHouseNo,@CutIn,@CutInPlantNo
				)

			SET @RecordID = SCOPE_IDENTITY()
			SET @Success = 1
	END
	RETURN 1
		
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_ins_ProductCode',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_upd_Supplier_Product]    Script Date: 08/02/2012 16:39:51 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_upd_Supplier_Product]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_upd_Supplier_Product]
GO



/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_Supplier_Product]    Script Date: 12/07/2012 18:31:06 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_sel_Supplier_Product]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_sel_Supplier_Product]
GO



/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_Supplier_Product]    Script Date: 12/07/2012 18:31:06 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
	Author:				TR
	Date:				01/05/2012 19:06

	Description:		Select records from STOCKCONTROL_Product

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_sel_Supplier_Product]
---------Parameters----------
@SupplierID INT

AS

SET NOCOUNT ON
SET DATEFORMAT dmy

SELECT		CASE WHEN  sp.ProductID > 0  THEN 1 ELSE 0 END AS [Select], scp.ProductID, scp.ProductCode, scp.Description, scp.CategoryID, Type, StockBy, CostPrice, SalePrice, MinimumStockLevel, Barcode1, Barcode2, BatchNumberItem, QuarantineItem, scp.Comments, scp.Active, NumberSold, TotalSalePrice, Beef, sc.Description AS CategoryDescrip

FROM		STOCKCONTROL_Product scp								WITH (READUNCOMMITTED)
LEFT JOIN	dbo.STOCKCONTROL_Category sc ON scp.CategoryID = sc.CategoryID
LEFT JOIN	dbo.STOCKCONTROL_SupplierProduct sp ON scp.ProductID = sp.ProductID AND sp.SupplierID = @SupplierID
where scp.IsSundriesProduct=1
ORDER BY 	sp.ProductID desc,scp.Description ASC
--ORDER BY 	scp.Description ASC


GO





/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_Supplier]    Script Date: 08/02/2013 12:21:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*
	Author:				TR
	Date:				01/05/2012 19:40

	Description:		Select records from STOCKCONTROL_Supplier

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_sel_Supplier]
---------Parameters----------
@SupplierName nvarchar(50) = NULL,
@SQL_WHERE nvarchar(4000) = NULL

AS

DECLARE @SQL_STRING nvarchar (4000)

SET NOCOUNT ON
SET DATEFORMAT dmy

	IF ISNULL(@SupplierName,'') <> '' 
		/**************************
			RETURN SPECIFIC RECORDS
		**************************/
		BEGIN
			SELECT		SupplierID, SupplierName, SupplierCode, Address1, Address2, Address3, Address4, Postcode, TelNo1, TelNo2, Fax, EmailAddress,EmailAddress2,EmailAddress3, ReviewDate, scs.CategoryID, Comments, AccountManager, Active, ApprovalDate, ApprovalBasis, Rating, Website, ContactName1, ContactName2, CreditLimit,BRC_ExpiryDate
			--, sc.Description AS CategoryDescrip

			FROM		STOCKCONTROL_Supplier	scs								WITH (READUNCOMMITTED)
			--INNER JOIN	dbo.STOCKCONTROL_Category sc ON scs.CategoryID = sc.CategoryID
			WHERE		SupplierName = @SupplierName

			ORDER BY 	SupplierName ASC

			RETURN
		END

	IF ISNULL(@SQL_WHERE,'') <> '' 
		/*********************************************
			SELECT RECORDS ACCORDING TO WHERE CRITERIA
		*********************************************/
		BEGIN
			SET @SQL_STRING = 'SELECT		SupplierID, SupplierName, SupplierCode, Address1, Address2, Address3, Address4, Postcode, TelNo1, TelNo2, Fax, EmailAddress,EmailAddress2,EmailAddress3, ReviewDate, scs.CategoryID, Comments, AccountManager, Active, ApprovalDate, ApprovalBasis, Rating, Website, ContactName1, ContactName2, CreditLimit,BRC_ExpiryDate '
			SET @SQL_STRING = @SQL_STRING + 'FROM		STOCKCONTROL_Supplier	scs	 '
			--SET @SQL_STRING = @SQL_STRING + 'INNER JOIN	dbo.STOCKCONTROL_Category sc ON scs.CategoryID = sc.CategoryID '
			
			SET @SQL_STRING = @SQL_STRING + @SQL_WHERE

			EXEC(@SQL_STRING)

			RETURN
		END

	/*********************
		RETURN ALL RECORDS
	*********************/
	BEGIN
		SELECT		SupplierID, SupplierName, SupplierCode, Address1, Address2, Address3, Address4, Postcode, TelNo1, TelNo2, Fax, EmailAddress,EmailAddress2,EmailAddress3, ReviewDate, scs.CategoryID, Comments, AccountManager, Active, ApprovalDate, ApprovalBasis, Rating, Website, ContactName1, ContactName2, CreditLimit,BRC_ExpiryDate
		--, sc.Description AS CategoryDescrip

		FROM		STOCKCONTROL_Supplier	scs								WITH (READUNCOMMITTED)
		--INNER JOIN	dbo.STOCKCONTROL_Category sc ON scs.CategoryID = sc.CategoryID
		
		ORDER BY 	SupplierName ASC

		RETURN
	END



GO



/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_StockCheck]    Script Date: 06/30/2012 17:43:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				TR
	Date:				01/05/2012 19:27

	Description:		Select records from STOCKCONTROL_StockCheck

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_sel_StockCheck]
---------Parameters----------

AS

SET NOCOUNT ON
SET DATEFORMAT dmy

	SELECT   StockCheckID ,sc.RackLocationID, r.RackID, sc.ProductID ,ScanDateTime ,Quantity ,UserName,sp.ProductCode,sc.CheckType , sp.[Description]
 FROM  dbo.STOCKCONTROL_StockCheck  sc 
 INNER JOIN STOCKCONTROL_Rack r on sc.RackLocationID = r.RackLocationID
 INNER JOIN STOCKCONTROL_Product sp on sc.ProductID = sp.ProductID
 ORDER BY  StockCheckID DESC
GO
/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_RackProduct]    Script Date: 06/30/2012 17:43:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				TR
	Date:				01/05/2012 19:27

	Description:		Select records from STOCKCONTROL_RackProduct

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_sel_RackProduct]
---------Parameters----------
@ProductID INT,
@SQL_WHERE nvarchar(4000) = NULL

AS

DECLARE @SQL_STRING nvarchar (4000)

SET NOCOUNT ON
SET DATEFORMAT dmy

	IF @ProductID >= 0 
		/**************************
			RETURN SPECIFIC RECORDS
		**************************/
		BEGIN
			SELECT CASE WHEN  rp.ID > 0  THEN 1 ELSE 0 END AS [Select],
			rp.ID, r.RackID, r.RackLocationID, rp.ProductID, rp.Qty, r.Description ,rp.LastScanTime,rp.HandsetUserName

			FROM STOCKCONTROL_Rack r
			Left JOIN STOCKCONTROL_RackProduct	rp on r.RackLocationID = rp.RackLocationID AND rp.ProductID = @ProductID

			ORDER BY 	[Select] DESC, r.RackID ASC

			RETURN
		END

	IF ISNULL(@SQL_WHERE,'') <> '' 
		/*********************************************
			SELECT RECORDS ACCORDING TO WHERE CRITERIA
		*********************************************/
		BEGIN
			SET @SQL_STRING = 'SELECT CASE WHEN  rp.ID > 0  THEN 1 ELSE 0 END AS [Select],rp.LastScanTime,rp.HandsetUserName, '
			SET @SQL_STRING = @SQL_STRING + 'rp.ID, r.RackID, r.RackLocationID, rp.ProductID, rp.Qty, r.Description '
			SET @SQL_STRING = @SQL_STRING + 'FROM STOCKCONTROL_Rack r '
			SET @SQL_STRING = @SQL_STRING + 'Left JOIN STOCKCONTROL_RackProduct	rp on r.RackLocationID = rp.RackLocationID '

			SET @SQL_STRING = @SQL_STRING + @SQL_WHERE
			SET @SQL_STRING = @SQL_STRING + ' ORDER BY 	[Select] DESC, r.RackID ASC'

			EXEC(@SQL_STRING)

			RETURN
		END

	/*********************
		RETURN ALL RECORDS
	*********************/
	BEGIN
		SELECT CASE WHEN  rp.ID > 0  THEN 1 ELSE 0 END AS [Select],
		rp.ID, r.RackID, r.RackLocationID, rp.ProductID, rp.Qty, r.Description ,rp.LastScanTime,rp.HandsetUserName
		FROM STOCKCONTROL_Rack r
		Left JOIN STOCKCONTROL_RackProduct	rp on r.RackLocationID = rp.RackLocationID 

		ORDER BY 	[Select] DESC, r.RackID ASC

		RETURN
	END
GO
/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_Rack]    Script Date: 06/30/2012 17:43:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				TR
	Date:				01/05/2012 19:17

	Description:		Select records from STOCKCONTROL_Rack

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_sel_Rack]
---------Parameters----------
@Description nvarchar(50) = NULL,
@SQL_WHERE nvarchar(4000) = NULL

AS

DECLARE @SQL_STRING nvarchar (4000)

SET NOCOUNT ON
SET DATEFORMAT dmy

	IF ISNULL(@Description,'') <> '' 
		/**************************
			RETURN SPECIFIC RECORDS
		**************************/
		BEGIN
			SELECT		RackLocationID, RackID, Description

			FROM		STOCKCONTROL_Rack								WITH (READUNCOMMITTED)

			WHERE		Description = @Description

			ORDER BY 	Description ASC

			RETURN
		END

	IF ISNULL(@SQL_WHERE,'') <> '' 
		/*********************************************
			SELECT RECORDS ACCORDING TO WHERE CRITERIA
		*********************************************/
		BEGIN
			SET @SQL_STRING = 'SELECT RackLocationID, RackID, Description '
			SET @SQL_STRING = @SQL_STRING + 'FROM STOCKCONTROL_Rack '

			SET @SQL_STRING = @SQL_STRING + @SQL_WHERE

			EXEC(@SQL_STRING)

			RETURN
		END

	/*********************
		RETURN ALL RECORDS
	*********************/
	BEGIN
		SELECT		RackLocationID, RackID, Description

		FROM		STOCKCONTROL_Rack								WITH (READUNCOMMITTED)

		ORDER BY 	Description ASC

		RETURN
	END
GO


/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_Product]    Script Date: 12/07/2012 17:01:30 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_sel_Product]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_sel_Product]
GO


/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_Product]    Script Date: 12/07/2012 17:01:30 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				TR
	Date:				01/05/2012 19:06

	Description:		Select records from STOCKCONTROL_Product

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_sel_Product]
---------Parameters----------
@Description nvarchar(50) = NULL,
@SQL_WHERE nvarchar(MAX) = NULL

AS

DECLARE @SQL_STRING nvarchar (MAX)

SET NOCOUNT ON
SET DATEFORMAT dmy

	IF ISNULL(@Description,'') <> '' 
		/**************************
			RETURN SPECIFIC RECORDS
		**************************/
		BEGIN
			SELECT		ProductID, ProductCode, scp.Description, scp.CategoryID, Type, StockBy, CostPrice, SalePrice, MinimumStockLevel, Barcode1, Barcode2, BatchNumberItem, QuarantineItem, scp.Comments, scp.Active, NumberSold, TotalSalePrice, Beef, sc.Description AS CategoryDescrip,  dbo.fnGetSuppliersOfProduct(ProductID) AS SupplierName,ActualMargin,RequiredMargin,IsSundriesProduct,IsCustomeProduct, PieceQuantity ,DisplayUntil,BestBefore,scp.MinTemp,scp.MaxTemp,scp.CofO, scp.PLU,scp.QtyInStock,scp.AlertCreated,IsSerialProduct,Ingredients


			FROM		STOCKCONTROL_Product scp								WITH (READUNCOMMITTED)
			LEFT JOIN	dbo.STOCKCONTROL_Category sc ON scp.CategoryID = sc.CategoryID
			--INNER JOIN	dbo.STOCKCONTROL_Supplier sp ON scp.SupplierID = sp.SupplierID
			WHERE		scp.Description = @Description

			ORDER BY 	sc.Description ASC

			RETURN
		END

	IF ISNULL(@SQL_WHERE,'') <> '' 
		/*********************************************
			SELECT RECORDS ACCORDING TO WHERE CRITERIA
		*********************************************/
		BEGIN
			SET @SQL_STRING = 'SELECT ProductID, ProductCode, scp.Description, scp.CategoryID, Type, StockBy, CostPrice, SalePrice, MinimumStockLevel, Barcode1, Barcode2, BatchNumberItem, QuarantineItem, scp.Comments, scp.Active, NumberSold, TotalSalePrice, Beef, sc.Description AS CategoryDescrip,  dbo.fnGetSuppliersOfProduct(ProductID) AS SupplierName,ActualMargin,RequiredMargin,IsSundriesProduct,IsCustomeProduct, PieceQuantity ,DisplayUntil,BestBefore,scp.MinTemp,scp.MaxTemp,scp.CofO, scp.PLU,scp.QtyInStock,scp.AlertCreated,IsSerialProduct,Ingredients '

			SET @SQL_STRING = @SQL_STRING + 'FROM		STOCKCONTROL_Product scp '
			SET @SQL_STRING = @SQL_STRING + 'LEFT JOIN	dbo.STOCKCONTROL_Category sc ON scp.CategoryID = sc.CategoryID '
			--SET @SQL_STRING = @SQL_STRING + 'INNER JOIN	dbo.STOCKCONTROL_Supplier sp ON scp.SupplierID = sp.SupplierID '
									
			SET @SQL_STRING = @SQL_STRING + @SQL_WHERE

			EXEC(@SQL_STRING)

			RETURN
		END

	/*********************
		RETURN ALL RECORDS
	*********************/
	BEGIN
			SELECT		ProductID, ProductCode, scp.Description, scp.CategoryID, Type, StockBy, CostPrice, SalePrice, MinimumStockLevel, Barcode1, Barcode2, BatchNumberItem, QuarantineItem, scp.Comments, scp.Active, NumberSold, TotalSalePrice, Beef, sc.Description AS CategoryDescrip, dbo.fnGetSuppliersOfProduct(ProductID) AS SupplierName,ActualMargin,RequiredMargin ,IsSundriesProduct,IsCustomeProduct, PieceQuantity,DisplayUntil,BestBefore,scp.MinTemp,scp.MaxTemp,scp.CofO, scp.PLU, scp.QtyInStock,scp.AlertCreated,Ingredients


			FROM		STOCKCONTROL_Product scp								WITH (READUNCOMMITTED)
			LEFT JOIN	dbo.STOCKCONTROL_Category sc ON scp.CategoryID = sc.CategoryID
			--INNER JOIN	dbo.STOCKCONTROL_Supplier sp ON scp.SupplierID = sp.SupplierID

			ORDER BY 	sc.Description ASC

		RETURN
	END


GO
/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_Customer]    Script Date: 08/01/2012 20:45:03 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
	Author:				TR
	Date:				01/05/2012 18:36

	Description:		Select records from STOCKCONTROL_Customer

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_sel_Customer]
---------Parameters----------
@CustomerName nvarchar(50) = NULL,
@SQL_WHERE nvarchar(4000) = NULL

AS

DECLARE @SQL_STRING nvarchar (4000)

SET NOCOUNT ON
SET DATEFORMAT dmy

	IF ISNULL(@CustomerName,'') <> '' 
		/**************************
			RETURN SPECIFIC RECORDS
		**************************/
		BEGIN
			SELECT		CustomerID , CustomerName, AccountManager, Address1, Address2, Address3, Address4, Address5, Postcode1,Postcode2,Postcode3,Postcode4,Postcode5, EmailAddress, TelNo1, ReviewDate, Comments, scc.CategoryID , Status, DeliveryDates

			FROM		STOCKCONTROL_Customer	scc								WITH (READUNCOMMITTED)
			--INNER JOIN	dbo.STOCKCONTROL_Category sc ON scc.CategoryID = sc.CategoryID
			
			WHERE		CustomerName = @CustomerName

			ORDER BY 	CustomerName ASC

			RETURN
		END

	IF ISNULL(@SQL_WHERE,'') <> '' 
		/*********************************************
			SELECT RECORDS ACCORDING TO WHERE CRITERIA
		*********************************************/
		BEGIN
			SET @SQL_STRING = 'SELECT		CustomerID , CustomerName, AccountManager, Address1, Address2, Address3, Address4, Address5, Postcode1,Postcode2,Postcode3,Postcode4,Postcode5, EmailAddress, TelNo1, ReviewDate, Comments, scc.CategoryID , Status, DeliveryDates '
			SET @SQL_STRING = @SQL_STRING + 'FROM		STOCKCONTROL_Customer	scc '
			--SET @SQL_STRING = @SQL_STRING + 'INNER JOIN	dbo.STOCKCONTROL_Category sc ON scc.CategoryID = sc.CategoryID '

			SET @SQL_STRING = @SQL_STRING + @SQL_WHERE

			EXEC(@SQL_STRING)

			RETURN
		END

	/*********************
		RETURN ALL RECORDS
	*********************/
	BEGIN
		SELECT		CustomerID , CustomerName, AccountManager, Address1, Address2, Address3, Address4, Address5, Postcode1,Postcode2,Postcode3,Postcode4,Postcode5, EmailAddress, TelNo1, ReviewDate, Comments, scc.CategoryID , Status, DeliveryDates


		FROM		STOCKCONTROL_Customer	scc								WITH (READUNCOMMITTED)
		--INNER JOIN	dbo.STOCKCONTROL_Category sc ON scc.CategoryID = sc.CategoryID
		
		ORDER BY 	CustomerName ASC

		RETURN
	END

GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_Category]    Script Date: 09/18/2012 19:28:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				TR
	Date:				01/05/2012 18:23

	Description:		Select records from STOCKCONTROL_Category

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_sel_Category]
---------Parameters----------
@Description nvarchar(50) = NULL,
@SQL_WHERE nvarchar(4000) = NULL

AS

DECLARE @SQL_STRING nvarchar (4000)

SET NOCOUNT ON
SET DATEFORMAT dmy

	IF ISNULL(@Description,'') <> '' 
		/**************************
			RETURN SPECIFIC RECORDS
		**************************/
		BEGIN
			SELECT		CategoryID, Description,MinTemp,MaxTemp

			FROM		STOCKCONTROL_Category								WITH (READUNCOMMITTED)

			WHERE		Description = @Description

			ORDER BY 	Description ASC

			RETURN
		END

	IF ISNULL(@SQL_WHERE,'') <> '' 
		/*********************************************
			SELECT RECORDS ACCORDING TO WHERE CRITERIA
		*********************************************/
		BEGIN
			SET @SQL_STRING = 'SELECT CategoryID, Description,MinTemp,MaxTemp '
			SET @SQL_STRING = @SQL_STRING + 'FROM STOCKCONTROL_Category '

			SET @SQL_STRING = @SQL_STRING + @SQL_WHERE

			EXEC(@SQL_STRING)

			RETURN
		END

	/*********************
		RETURN ALL RECORDS
	*********************/
	BEGIN
		SELECT		CategoryID, Description,MinTemp,MaxTemp

		FROM		STOCKCONTROL_Category								WITH (READUNCOMMITTED)

		ORDER BY 	Description ASC

		RETURN
	END
GO
/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_upd_Supplier_Product]    Script Date: 06/30/2012 17:43:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				TR
	Date:				01/05/2012 19:40

	Description:		Update record in STOCKCONTROL_Product

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_upd_Supplier_Product]
---------Parameters----------
@SupplierID int,
@ProductIdList NVARCHAR(MAX),
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 
DECLARE @ProductID INT

SET NOCOUNT ON
SET DATEFORMAT dmy	

BEGIN TRY	
	SET @Success = 0
	SET @ErrorMsg = ''
	--TODO: need to update
	/*
	IF @SupplierID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		SupplierID
							FROM		STOCKCONTROL_Supplier				WITH (READUNCOMMITTED)
							WHERE 		SupplierID = @SupplierID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_Supplier - Could not find record ' + CAST(@SupplierID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			CREATE TABLE #Product
				(
				ProductID INT,
				Processed BIT DEFAULT 0
				)

			BEGIN TRANSACTION
			
			UPDATE	dbo.STOCKCONTROL_Product
			SET		SupplierID = 0
			WHERE	SupplierID = @SupplierID
						
			SELECT * INTO #ProductCodeSelected FROM dbo.fnSplitV1('|',@ProductIdList) 	
			
			INSERT INTO #Product
			        ( ProductID )
			SELECT * FROM #ProductCodeSelected						
						
			WHILE EXISTS(SELECT Processed FROM #Product WHERE Processed = 0)
				BEGIN
					SET @Success = 0
		
					SELECT	@ProductID = ProductID
					FROM	#Product	
					WHERE	Processed = 0
					
					UPDATE	dbo.STOCKCONTROL_Product
					SET		SupplierID = @SupplierID
					WHERE	ProductID = @ProductID
					
					/*****************
						PROCESSED
					*****************/
					UPDATE	#Product
					SET		Processed =	1						
					WHERE 	ProductID = @ProductID					
				END

			COMMIT TRAN
							
							
							
							
							
							
							
			DROP TABLE #ProductCodeSelected
			DROP TABLE #Product
																											
			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@SupplierID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
	*/
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_upd_Supplier_Product',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
GO
/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_upd_Supplier]    Script Date: 08/02/2013 12:19:51 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*
	Author:				TR
	Date:				01/05/2012 19:40

	Description:		Update record in STOCKCONTROL_Supplier

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_upd_Supplier]
---------Parameters----------
@SupplierID int,
@SupplierName nvarchar(50),
@SupplierCode nvarchar(15),
@Address1 nvarchar(50),
@Address2 nvarchar(50),
@Address3 nvarchar(50),
@Address4 nvarchar(50),
@Postcode nvarchar(8),
@TelNo1 nvarchar(16),
@TelNo2 nvarchar(16),
@Fax nvarchar(16),
@EmailAddress nvarchar(50),
@EmailAddress2 nvarchar(50)= NULL,
@EmailAddress3 nvarchar(50)= NULL,
@ReviewDate datetime,
@Comments nvarchar(4000),
@AccountManager nvarchar(50),
@Active bit,
@ApprovalDate datetime = NULL,
@ApprovalBasis nvarchar(30),
@Rating smallint,
@Website nvarchar(250),
@ContactName1 nvarchar(50),
@ContactName2 nvarchar(50),
@CreditLimit decimal(18,2) = NULL,
@BRC_ExpiryDate datetime = NULL,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 
DECLARE @ListID INT
DECLARE @Name NVARCHAR(32)

DECLARE @ListDetailID INT

DECLARE @CurrentName NVARCHAR(50)

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF @SupplierID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		SupplierID
							FROM		STOCKCONTROL_Supplier				WITH (READUNCOMMITTED)
							WHERE 		SupplierID = @SupplierID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_Supplier - Could not find record ' + CAST(@SupplierID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			SELECT	@CurrentName = SupplierName
			FROM	dbo.STOCKCONTROL_Supplier
			WHERE	SupplierID = @SupplierID
			
			/************
			UPDATE RECORD
			************/
			UPDATE	STOCKCONTROL_Supplier												WITH (ROWLOCK)

			SET 	SupplierName = @SupplierName,
					SupplierCode = @SupplierCode,
					Address1 = @Address1,
					Address2 = @Address2,
					Address3 = @Address3,
					Address4 = @Address4,
					Postcode = @Postcode,
					TelNo1 = @TelNo1,
					TelNo2 = @TelNo2,
					Fax = @Fax,
					EmailAddress = @EmailAddress,
					EmailAddress2 = @EmailAddress2,
					EmailAddress3 = @EmailAddress3,
					ReviewDate = @ReviewDate,					
					Comments = @Comments,
					AccountManager = @AccountManager,
					Active = @Active,
					ApprovalDate = @ApprovalDate,
					ApprovalBasis = @ApprovalBasis,
					Rating = @Rating,
					Website = @Website,
					ContactName1 = @ContactName1,
					ContactName2 = @ContactName2,
					CreditLimit = @CreditLimit,
					BRC_ExpiryDate=@BRC_ExpiryDate,
					UpdatedOn = GETDATE()

			WHERE	SupplierID = @SupplierID

			SELECT	@ListID = ListID
			FROM	dbo.PROCEDURE_UserDefinedList
			WHERE	Name = 'Stock Control - Suppliers'
			
			IF ISNULL(@ListID,0) > 0
				BEGIN
					SELECT	@ListDetailID = ListDetailID
					FROM	dbo.PROCEDURE_UserDefinedListDetail
					WHERE	ListID = @ListID AND Description = @CurrentName
					
					UPDATE	dbo.PROCEDURE_UserDefinedListDetail
					SET		Description = @SupplierName
					WHERE	ListDetailID = @ListDetailID						
				END
			
			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@SupplierID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_upd_Supplier',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1



GO



/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_upd_RackProduct]    Script Date: 06/30/2012 17:43:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				TR
	Date:				01/05/2012 19:27

	Description:		Update record in STOCKCONTROL_RackProduct

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_upd_RackProduct]
---------Parameters----------
@ID INT,
@RackLocationID int,
@ProductID INT,
@Qty decimal(18,2),
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg = ''

	IF ISNULL(@RackLocationID,0) <> 0
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		RackLocationID
							FROM		STOCKCONTROL_RackProduct				WITH (READUNCOMMITTED)
							WHERE 		ID = @ID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_RackProduct - Could not find record ' + @ID
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			/************
			UPDATE RECORD
			************/
			UPDATE	STOCKCONTROL_RackProduct												WITH (ROWLOCK)

			SET 	RackLocationID = @RackLocationID,
					ProductID = @ProductID,
					Qty = @Qty,
					UpdatedOn = GETDATE()

			WHERE	ID = @ID

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + @RackLocationID
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_upd_RackProduct',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
GO
/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_upd_Rack]    Script Date: 06/30/2012 17:43:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				TR
	Date:				01/05/2012 19:17

	Description:		Update record in STOCKCONTROL_Rack

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_upd_Rack]
---------Parameters----------
@RackLocationID INT,
@RackID nvarchar(50),
@Description nvarchar(50),
@CheckDuplicates BIT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF ISNULL(@RackLocationID,0) <> 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		RackID
							FROM		STOCKCONTROL_Rack				WITH (READUNCOMMITTED)
							WHERE 		RackLocationID = @RackLocationID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_Rack - Could not find record ' + @RackLocationID
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END
			
			IF @CheckDuplicates = 1
				BEGIN
					/***************************
					DON'T ALLOW DUPLICATE RECORD
					***************************/
					IF EXISTS	(
								SELECT 		RackID
								FROM		STOCKCONTROL_Rack						WITH (READUNCOMMITTED)
								WHERE 		RackID = @RackID AND RackLocationID <> @RackLocationID
								)
					BEGIN
						SET @ErrorMsg = '##01Duplicate record ' + @RackID  
						RAISERROR(@ErrorMsg,16,1)
					RETURN -1
					END
				END

			/************
			UPDATE RECORD
			************/
			UPDATE	STOCKCONTROL_Rack												WITH (ROWLOCK)

			SET 	Description = @Description,
			RackID = @RackID,
			UpdatedOn = GETDATE()

			WHERE	RackLocationID = @RackLocationID

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + @RackID
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_upd_Rack',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
GO

																																																																																																																																																																																								



/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_upd_Product]    Script Date: 12/07/2012 17:05:20 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
	Author:				TR
	Date:				01/05/2012 19:06

	Description:		Update record in STOCKCONTROL_Product

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_upd_Product]
---------Parameters----------
@ProductID int,
@ProductCode nvarchar(20),
@Description nvarchar(50),
@CategoryID int,
@Type nvarchar(50),
@StockBy nvarchar(50),
@CostPrice real,
@SalePrice real,
@MinimumStockLevel int,
@Barcode1 nvarchar(25),
@Barcode2 nvarchar(25),
@BatchNumberItem bit,
@QuarantineItem bit,
@Comments nvarchar(4000),
@Active bit,
@NumberSold REAL,
@TotalSalePrice REAL,
@Beef BIT,
@ActualMargin  real,
@RequiredMargin real,
@IsSundriesProduct bit,
@IsCustomeProduct bit,
@PieceQuantity decimal(18,2) = NULL,
@DisplayUntil int = NULL,
@BestBefore int = NULL,
@MinTemp decimal(18,2) = NULL,
@MaxTemp decimal(18,2) = NULL,
@CofO nvarchar(20) = NULL,
@PLU int = NULL,
@QtyInStock decimal(18,2) = NULL,
@IsSerialProduct bit = NULL,
@Ingredients nvarchar(100) = NULL,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 
DECLARE @ListID INT
DECLARE @Name NVARCHAR(32)
DECLARE @ListDetailID INT
DECLARE @CurrentName NVARCHAR(50)

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF @ProductID > 0
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		ProductID
							FROM		STOCKCONTROL_Product				WITH (READUNCOMMITTED)
							WHERE 		ProductID = @ProductID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_Product - Could not find record ' + @ProductID
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			SELECT	@CurrentName = Description
			FROM	dbo.STOCKCONTROL_Product
			WHERE	ProductID = @ProductID
			
			/************
			UPDATE RECORD
			************/
			UPDATE	STOCKCONTROL_Product												WITH (ROWLOCK)

			SET 	ProductCode = @ProductCode,
					Description = @Description,
					CategoryID = @CategoryID,
					Type = @Type,
					StockBy = @StockBy,
					CostPrice = @CostPrice,
					SalePrice = @SalePrice,
					MinimumStockLevel = @MinimumStockLevel,
					Barcode1 = @Barcode1,
					Barcode2 = @Barcode2,
					BatchNumberItem = @BatchNumberItem,
					QuarantineItem = @QuarantineItem,
					Comments = @Comments,
					Active = @Active,
					NumberSold = @NumberSold,
					TotalSalePrice = @TotalSalePrice,
					Beef = @Beef,
					ActualMargin=@ActualMargin ,
					RequiredMargin =@RequiredMargin,					
					IsSundriesProduct=@IsSundriesProduct ,
					IsCustomeProduct=@IsCustomeProduct,
					PieceQuantity = @PieceQuantity,
					DisplayUntil = @DisplayUntil,
					BestBefore=@BestBefore,
					MinTemp=@MinTemp,
					MaxTemp=@MaxTemp,
					CofO=@CofO,
					PLU=@PLU,
					QtyInStock = @QtyInStock,
					IsSerialProduct = @IsSerialProduct,
					Ingredients = @Ingredients,
					UpdatedOn = GETDATE()

			WHERE	ProductID = @ProductID

			SELECT	@ListID = ListID
			FROM	dbo.PROCEDURE_UserDefinedList
			WHERE	Name = 'Stock Control - Product'
			
			IF ISNULL(@ListID,0) > 0
				BEGIN
					SELECT	@ListDetailID = ListDetailID
					FROM	dbo.PROCEDURE_UserDefinedListDetail
					WHERE	ListID = @ListID AND Description = @CurrentName
					
					UPDATE	dbo.PROCEDURE_UserDefinedListDetail
					SET		Description = @Description
					WHERE	ListDetailID = @ListDetailID						
				END			
					
			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + @ProductID
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF ISNULL(@ErrorMsg,'') =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_upd_Product',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_upd_Product]    Script Date: 12/07/2012 17:05:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_upd_ProductAlert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_upd_ProductAlert]
GO



/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_upd_Product]    Script Date: 12/07/2012 17:05:20 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
	Author:				TR
	Date:				01/05/2012 19:06

	Description:		Update A statuslert in STOCKCONTROL_Product

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_upd_ProductAlert]
---------Parameters----------
@AlertCreated bit,
@ProductID int 

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 


SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY

	IF @ProductID > 0
		BEGIN
			
			UPDATE	STOCKCONTROL_Product												WITH (ROWLOCK)

			SET 	AlertCreated = @AlertCreated

			WHERE	ProductID = @ProductID
			
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + @ProductID
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF ISNULL(@ErrorMsg,'') =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_upd_ProductAlert',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_upd_Customer]    Script Date: 07/26/2013 14:50:13 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
	Author:				TR
	Date:				01/05/2012 18:36

	Description:		Update record in STOCKCONTROL_Customer

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_upd_Customer]
---------Parameters----------
@CustomerID  int,
@CustomerName nvarchar(50),
@AccountManager nvarchar(30),
@Address1 nvarchar(250),
@Address2 nvarchar(250),
@Address3 nvarchar(250),
@Address4 nvarchar(250),
@Address5 nvarchar(250) = NULL,
@Postcode1 nvarchar(8),
@Postcode2 nvarchar(8),
@Postcode3 nvarchar(8),
@Postcode4 nvarchar(8),
@Postcode5 nvarchar(8),
@EmailAddress nvarchar(50),
@EmailAddress2 nvarchar(50) = NULL,
@EmailAddress3 nvarchar(50) = NULL,
@TelNo1 nvarchar(16),
@ReviewDate datetime,
@Comments nvarchar(4000),
@CategoryID  int = NULL,
@Status nvarchar(20),
@DeliveryDates nvarchar(100), 
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

DECLARE @ListID INT
DECLARE @Name NVARCHAR(32)
DECLARE @ListDetailID INT
DECLARE @CurrentName NVARCHAR(50)

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg =''

	IF @CustomerID  > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		CustomerID 
							FROM		STOCKCONTROL_Customer				WITH (READUNCOMMITTED)
							WHERE 		CustomerID  = @CustomerID 
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_Customer - Could not find record ' + CAST(@CustomerID  AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			SELECT	@CurrentName = CustomerName
			FROM	dbo.STOCKCONTROL_Customer
			WHERE	CustomerID = @CustomerID
			
			/************
			UPDATE RECORD
			************/
			UPDATE	STOCKCONTROL_Customer												WITH (ROWLOCK)

			SET 	CustomerName = @CustomerName,
					AccountManager = @AccountManager,
					Address1 = @Address1,
					Address2 = @Address2,
					Address3 = @Address3,
					Address4 = @Address4,
					Address5 = @Address5,
					Postcode1 = @Postcode1,
					Postcode2 = @Postcode2,
					Postcode3 = @Postcode3,
					Postcode4 = @Postcode4,
					Postcode5 = @Postcode5,
					EmailAddress = @EmailAddress,
					EmailAddress2 = @EmailAddress2,
					EmailAddress3 = @EmailAddress3,
					TelNo1 = @TelNo1,
					ReviewDate = @ReviewDate,
					Comments = @Comments,
					CategoryID  = @CategoryID ,
					Status = @Status,
					DeliveryDates = @DeliveryDates,
					UpdatedOn = GETDATE()

			WHERE	CustomerID  = @CustomerID 









			SELECT	@ListID = ListID
			FROM	dbo.PROCEDURE_UserDefinedList
			WHERE	Name = 'Stock Control - Customer'
			
			IF ISNULL(@ListID,0) > 0
				BEGIN
					SELECT	@ListDetailID = ListDetailID
					FROM	dbo.PROCEDURE_UserDefinedListDetail
					WHERE	ListID = @ListID AND Description = @CurrentName
					
					UPDATE	dbo.PROCEDURE_UserDefinedListDetail
					SET		Description = @CustomerName
					WHERE	ListDetailID = @ListDetailID						
				END
				
			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@CustomerID  AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_upd_Customer',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO



/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_upd_Category]    Script Date: 06/30/2012 17:43:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				TR
	Date:				01/05/2012 18:23

	Description:		Update record in STOCKCONTROL_Category

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_upd_Category]
---------Parameters----------
@CategoryID int,
@Description nvarchar(50),
@MinTemp real=0,
@MaxTemp real=0,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF @CategoryID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		CategoryID
							FROM		STOCKCONTROL_Category				WITH (READUNCOMMITTED)
							WHERE 		CategoryID = @CategoryID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_Category - Could not find record ' + CAST(@CategoryID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			/************
			UPDATE RECORD
			************/
			UPDATE	STOCKCONTROL_Category												WITH (ROWLOCK)

			SET 	Description = @Description,
					MinTemp = @MinTemp,
					MaxTemp = @MaxTemp,
					UpdatedOn = GETDATE()
			WHERE	CategoryID = @CategoryID

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@CategoryID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_upd_Category',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_ins_Supplier]    Script Date: 08/02/2013 12:22:19 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*
	Author:				TR
	Date:				01/05/2012 19:40

	Description:		Insert record in STOCKCONTROL_Supplier

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_ins_Supplier]
---------Parameters----------
@SupplierName nvarchar(50),
@SupplierCode nvarchar(15),
@Address1 nvarchar(50),
@Address2 nvarchar(50),
@Address3 nvarchar(50),
@Address4 nvarchar(50),
@Postcode nvarchar(8),
@TelNo1 nvarchar(16),
@TelNo2 nvarchar(16),
@Fax nvarchar(16),
@EmailAddress nvarchar(50),
@EmailAddress2 nvarchar(50)= NULL,
@EmailAddress3 nvarchar(50)= NULL,
@ReviewDate datetime,
@Comments nvarchar(4000),
@AccountManager nvarchar(50),
@Active bit,
@ApprovalDate datetime = NULL,
@ApprovalBasis nvarchar(30),
@Rating smallint,
@Website nvarchar(250),
@ContactName1 nvarchar(50),
@ContactName2 nvarchar(50),
@CreditLimit Decimal(18,2) = NULL,
@CheckDuplicates bit,
@BRC_ExpiryDate datetime = NULL,
@RecordID int OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 
DECLARE @SequencePosition INT
DECLARE @ListID INT
DECLARE @SequenceNo INT 
DECLARE @Name NVARCHAR(32)

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RecordID = 0
	SET @Success = 0

	
	BEGIN TRANSACTION
	
	IF @CheckDuplicates = 1
		BEGIN
			/***************************
			DON'T ALLOW DUPLICATE RECORD
			***************************/
			IF EXISTS	(
						SELECT 		SupplierID
						FROM		STOCKCONTROL_Supplier						WITH (READUNCOMMITTED)
						WHERE 		SupplierName = @SupplierName
						)
			BEGIN
				SET @ErrorMsg = '##01Duplicate record ' + @SupplierName 
				RAISERROR(@ErrorMsg,16,1)
			RETURN -1
			END
		END

	/************
	INSERT RECORD
	************/			
	INSERT INTO	STOCKCONTROL_Supplier												WITH (ROWLOCK)
			(
			SupplierName, SupplierCode, Address1, Address2, Address3, Address4, Postcode, TelNo1, TelNo2, Fax, EmailAddress,EmailAddress2,EmailAddress3, ReviewDate, Comments, AccountManager, Active, ApprovalDate, ApprovalBasis, Rating, Website, ContactName1, ContactName2, CreditLimit,BRC_ExpiryDate,UpdatedOn
			)
	VALUES
			(
			@SupplierName, @SupplierCode, @Address1, @Address2, @Address3, @Address4, @Postcode, @TelNo1, @TelNo2, @Fax, @EmailAddress,@EmailAddress2,@EmailAddress3, @ReviewDate, @Comments, @AccountManager, @Active, @ApprovalDate, @ApprovalBasis, @Rating, @Website, @ContactName1, @ContactName2, @CreditLimit,@BRC_ExpiryDate,GETDATE()
			)

		SET @RecordID = SCOPE_IDENTITY()
		
		SELECT	@ListID = ListID
		FROM	dbo.PROCEDURE_UserDefinedList
		WHERE	Name = 'Stock Control - Suppliers'
		
		IF ISNULL(@ListID,0) = 0
			BEGIN
				SET @SequenceNo = (SELECT ISNULL(MAX(SequenceNo),0) FROM PROCEDURE_UserDefinedList WHERE CorrectiveAction = 0) + 1
				INSERT INTO dbo.PROCEDURE_UserDefinedList
				        ( Name, CorrectiveAction, Active, SignatureRequired, AssignUser, SequenceNo  )
				VALUES  ( 'Stock Control - Suppliers', 0,1, 0, 0, @SequenceNo)
				
				SET @ListID = SCOPE_IDENTITY()
			END

		SELECT 	@SequencePosition = ISNULL(MAX(SequencePosition),0) + 1
		FROM	dbo.PROCEDURE_UserDefinedListDetail											WITH (READCOMMITTED)
		WHERE	ListID = @ListID
		
		IF @SequencePosition = 0 OR @SequencePosition IS NULL SET @SequencePosition = 1		

		INSERT INTO dbo.PROCEDURE_UserDefinedListDetail
		        ( ListID ,
		          Description ,
		          SequencePosition ,
		          Active
		        )
		VALUES  ( @ListID ,
		          @SupplierName ,
		          @SequencePosition ,
		          1
		        )
		
		COMMIT TRANSACTION
				        	
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_ins_Supplier',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1



GO



/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_ins_RackProduct]    Script Date: 06/30/2012 17:43:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				TR
	Date:				01/05/2012 19:27

	Description:		Insert record in STOCKCONTROL_RackProduct

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_ins_RackProduct]
---------Parameters----------
@RackLocationID INT,
@ProductID int,
@Qty decimal(18,2),
@CheckDuplicates bit,
@ID INT OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int

DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg = ''
	SET @ID = 0
	
	IF @CheckDuplicates = 1
		BEGIN
			/***************************
			DON'T ALLOW DUPLICATE RECORD
			***************************/
			--IF EXISTS	(
			--			SELECT 		RackLocationID
			--			FROM		STOCKCONTROL_RackProduct		WITH (READUNCOMMITTED)
			--			WHERE 		ProductID = @ProductID AND RackLocationID = @RackLocationID
			--			)
			--BEGIN
			--	--SET @ErrorMsg = '##01Duplicate record ' +CAST(@ProductID AS nvarchar(12))
			--	--RAISERROR(@ErrorMsg,16,1)
			--RETURN -1						
			--END
			SELECT 		@ID = ID
			FROM		STOCKCONTROL_RackProduct		WITH (READUNCOMMITTED)
			WHERE 		ProductID = @ProductID AND RackLocationID = @RackLocationID
		END

	/************
	INSERT RECORD
	************/
	IF @ID > 0
		BEGIN
			UPDATE STOCKCONTROL_RackProduct SET Qty = @Qty WHERE ID = @ID
		END
	ELSE
		BEGIN
			INSERT INTO	STOCKCONTROL_RackProduct	WITH (ROWLOCK)
					(
					RackLocationID, ProductID, Qty,UpdatedOn
					)
			VALUES
					(
					@RackLocationID, @ProductID, @Qty,GETDATE()
					)
				
				SET @ID  = SCOPE_IDENTITY()
				
		END	
		
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_ins_RackProduct',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
GO
/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_ins_Rack]    Script Date: 06/30/2012 17:43:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				TR
	Date:				01/05/2012 19:17

	Description:		Insert record in STOCKCONTROL_Rack

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_ins_Rack]
---------Parameters----------
@RackID nvarchar(50),
@Description nvarchar(50),
@CheckDuplicates bit,
@RackLocationID INT OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int

DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg = ''

	IF @CheckDuplicates = 1
		BEGIN
			/***************************
			DON'T ALLOW DUPLICATE RECORD
			***************************/
			IF EXISTS	(
						SELECT 		RackID
						FROM		STOCKCONTROL_Rack						WITH (READUNCOMMITTED)
						WHERE 		RackID = @RackID
						)
			BEGIN
				SET @ErrorMsg = '##01Duplicate record ' + @RackID  
				RAISERROR(@ErrorMsg,16,1)
			RETURN -1
			END
		END

	/************
	INSERT RECORD
	************/
	INSERT INTO	STOCKCONTROL_Rack												WITH (ROWLOCK)
			(
			RackID, Description, UpdatedOn
			)
	VALUES
			(
			@RackID, @Description, GETDATE()
			)
			
		SET @RackLocationID = SCOPE_IDENTITY()
		
		INSERT INTO STOCKCONTROL_RackProduct (ProductID,RackLocationID,Qty, UpdatedOn)
		SELECT p.ProductID, r.RackLocationID, 0, GETDATE() 
		FROM STOCKCONTROL_Product p
		CROSS JOIN STOCKCONTROL_Rack r 
		WHERE r.RackLocationID = @RackLocationID
		
		
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_ins_Rack',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_ins_Product]    Script Date: 12/07/2012 16:59:41 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_ins_Product]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_ins_Product]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_ins_Product]    Script Date: 12/07/2012 16:59:41 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
	Author:				TR
	Date:				01/05/2012 19:06

	Description:		Insert record in STOCKCONTROL_Product

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_ins_Product]
---------Parameters----------
@ProductCode nvarchar(20),
@Description nvarchar(50),
@CategoryID int,
@Type nvarchar(50),
@StockBy nvarchar(50),
@CostPrice real,
@SalePrice real,
@MinimumStockLevel int,
@Barcode1 nvarchar(25),
@Barcode2 nvarchar(25),
@BatchNumberItem bit,
@QuarantineItem bit,
@Comments nvarchar(4000),
@Active bit,
@NumberSold REAL,
@TotalSalePrice REAL,
@Beef BIT,
@CheckDuplicates bit,
@ActualMargin  real,
@RequiredMargin real,
@IsSundriesProduct bit,
@IsCustomeProduct bit,
@PieceQuantity decimal(18,2) = NULL,
@DisplayUntil int = NULL,
@BestBefore int = NULL,
@MinTemp decimal(18,2) = NULL,
@MaxTemp decimal(18,2) = NULL,
@CofO nvarchar(20) = NULL,
@PLU int = NULL,
@QtyInStock decimal(18,2) = NULL,
@IsSerialProduct bit = NULL,
@Ingredients nvarchar(100) = NULL,
@RecordID int OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 
DECLARE @SequencePosition INT
DECLARE @ListID INT
DECLARE @SequenceNo INT 
DECLARE @Name NVARCHAR(32)

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	BEGIN TRANSACTION
	
	IF @CheckDuplicates = 1
		BEGIN
			/***************************
			DON'T ALLOW DUPLICATE RECORD
			***************************/
			IF EXISTS	(
						SELECT 		ProductCode
						FROM		STOCKCONTROL_Product						WITH (READUNCOMMITTED)
						WHERE 		ProductCode = @ProductCode
						)
			BEGIN
				SET @ErrorMsg = '##01Duplicate product code ' + @ProductCode 
				RAISERROR(@ErrorMsg,16,1)
			RETURN -1
			END
		END

	/************
	INSERT RECORD
	************/
	INSERT INTO	STOCKCONTROL_Product												WITH (ROWLOCK)
			(
			ProductCode,Description, CategoryID, Type, StockBy, CostPrice, SalePrice, MinimumStockLevel, Barcode1, Barcode2, BatchNumberItem, QuarantineItem, Comments, Active, NumberSold, TotalSalePrice, Beef,ActualMargin,RequiredMargin,IsSundriesProduct,IsCustomeProduct,PieceQuantity,DisplayUntil,BestBefore,MinTemp,MaxTemp,CofO,PLU,QtyInStock,IsSerialProduct,Ingredients,UpdatedOn

			)
	VALUES
			(
			@ProductCode, @Description, @CategoryID, @Type, @StockBy, @CostPrice, @SalePrice, @MinimumStockLevel, @Barcode1, @Barcode2, @BatchNumberItem, @QuarantineItem, @Comments, @Active, @NumberSold, @TotalSalePrice, @Beef,@ActualMargin,@RequiredMargin,@IsSundriesProduct,@IsCustomeProduct,@PieceQuantity,@DisplayUntil,@BestBefore,@MinTemp,@MaxTemp,@CofO,@PLU,@QtyInStock,@IsSerialProduct,@Ingredients,GETDATE()

			)

		SET @RecordID = SCOPE_IDENTITY()
		
		SELECT	@ListID = ListID
		FROM	dbo.PROCEDURE_UserDefinedList
		WHERE	Name = 'Stock Control - Product'
		
		IF ISNULL(@ListID,0) = 0
			BEGIN
				SET @SequenceNo = (SELECT ISNULL(MAX(SequenceNo),0) FROM PROCEDURE_UserDefinedList WHERE CorrectiveAction = 0) + 1
				INSERT INTO dbo.PROCEDURE_UserDefinedList
				        ( Name, CorrectiveAction, Active, SignatureRequired, AssignUser, SequenceNo )
				VALUES  ( 'Stock Control - Product', 0, 1, 0, 0, @SequenceNo)
				
				SET @ListID = SCOPE_IDENTITY()
			END

		SELECT 	@SequencePosition = ISNULL(MAX(SequencePosition),0) + 1
		FROM	dbo.PROCEDURE_UserDefinedListDetail											WITH (READCOMMITTED)
		WHERE	ListID = @ListID
		
		IF @SequencePosition = 0 OR @SequencePosition IS NULL SET @SequencePosition = 1		

		INSERT INTO dbo.PROCEDURE_UserDefinedListDetail
		        ( ListID ,
		          Description ,
		          SequencePosition ,
		          Active
		        )
		VALUES  ( @ListID ,
		          @Description ,
		          @SequencePosition ,
		          1
		        )		

		INSERT INTO STOCKCONTROL_RackProduct (ProductID,RackLocationID,Qty)
		SELECT p.ProductID, r.RackLocationID, 0 
		FROM STOCKCONTROL_Product p
		CROSS JOIN STOCKCONTROL_Rack r 
		WHERE p.ProductID = @RecordID
		
		COMMIT TRANSACTION
		
		
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF ISNULL(@ErrorMsg,'') =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_ins_Product',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO
/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_ins_Customer]    Script Date: 07/26/2013 14:43:44 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
	Author:				TR
	Date:				01/05/2012 18:36

	Description:		Insert record in STOCKCONTROL_Customer

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_ins_Customer]
---------Parameters----------
@CustomerName nvarchar(50),
@AccountManager nvarchar(30),
@Address1 nvarchar(250),
@Address2 nvarchar(250),
@Address3 nvarchar(250),
@Address4 nvarchar(250),
@Address5 nvarchar(250) = NULL,
@Postcode1 nvarchar(8),
@Postcode2 nvarchar(8),
@Postcode3 nvarchar(8),
@Postcode4 nvarchar(8),
@Postcode5 nvarchar(8),
@EmailAddress nvarchar(50),
@EmailAddress2 nvarchar(50)= NULL,
@EmailAddress3 nvarchar(50)= NULL,
@TelNo1 nvarchar(16),
@ReviewDate datetime,
@Comments nvarchar(4000),
@CategoryID  int = NULL,
@Status nvarchar(20),
@CheckDuplicates bit,
@DeliveryDates nvarchar(100),
@RecordID int OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 
DECLARE @SequencePosition INT
DECLARE @ListID INT
DECLARE @Name NVARCHAR(32)

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RecordID = 0
	SET @Success = 0
	SET @ErrorMsg =''
	
	
	
	
	
	BEGIN TRAN
	
	IF @CheckDuplicates = 1
		BEGIN
			/***************************
			DON'T ALLOW DUPLICATE RECORD
			***************************/
			IF EXISTS	(
						SELECT 		CustomerID 
						FROM		STOCKCONTROL_Customer						WITH (READUNCOMMITTED)
						WHERE 		CustomerName = @CustomerName
						)
			BEGIN
				SET @ErrorMsg = '##01Duplicate record ' + CAST(@CustomerName AS nvarchar(64))
				RAISERROR(@ErrorMsg,16,1)
			RETURN -1
			END
		END

	/************
	INSERT RECORD
	************/
	INSERT INTO	STOCKCONTROL_Customer												WITH (ROWLOCK)
			(
			CustomerName, AccountManager, Address1, Address2, Address3, Address4, Address5, Postcode1,Postcode2,Postcode3,Postcode4,Postcode5, EmailAddress,EmailAddress2,EmailAddress3, TelNo1, ReviewDate, Comments, CategoryID , Status, DeliveryDates,UpdatedOn
			)
	VALUES
			(
			@CustomerName, @AccountManager, @Address1, @Address2, @Address3, @Address4, @Address5, @Postcode1,@Postcode2,@Postcode3,@Postcode4,@Postcode5, @EmailAddress,@EmailAddress2,@EmailAddress3, @TelNo1, @ReviewDate, @Comments, @CategoryID , @Status, @DeliveryDates,GETDATE()
			)

		SET @RecordID = SCOPE_IDENTITY()

		SELECT	@ListID = ListID
		FROM	dbo.PROCEDURE_UserDefinedList
		WHERE	Name = 'Stock Control - Customer'
		
		IF ISNULL(@ListID,0) = 0
			BEGIN
				INSERT INTO dbo.PROCEDURE_UserDefinedList
				        ( Name, CorrectiveAction, Active )
				VALUES  ( 'Stock Control - Customer', 0,1)
				
				SET @ListID = SCOPE_IDENTITY()
			END

		SELECT 	@SequencePosition = MAX(SequencePosition) + 1
		FROM	dbo.PROCEDURE_UserDefinedListDetail											WITH (READCOMMITTED)
		WHERE	ListID = @ListID
		
		IF @SequencePosition = 0 OR @SequencePosition IS NULL SET @SequencePosition = 1		

		INSERT INTO dbo.PROCEDURE_UserDefinedListDetail
		        ( ListID ,
		          Description ,
		          SequencePosition ,
		          Active
		        )
		VALUES  ( @ListID ,
		          @CustomerName ,
		          @SequencePosition ,
		          1
		        )		

		
		
		COMMIT TRANSACTION
		
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_ins_Customer',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO
/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_ins_Category]    Script Date: 09/18/2012 19:28:35 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				TR
	Date:				01/05/2012 18:23

	Description:		Insert record in STOCKCONTROL_Category

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_ins_Category]
---------Parameters----------
@CategoryID int,
@Description nvarchar(50),
@CheckDuplicates bit,
@MinTemp real=0,
@MaxTemp real=0,
@RecordID int OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int

DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RecordID = 0
	SET @Success = 0

	IF @CheckDuplicates = 1
		BEGIN
			/***************************
			DON'T ALLOW DUPLICATE RECORD
			***************************/
			IF EXISTS	(
						SELECT 		CategoryID
						FROM		STOCKCONTROL_Category						WITH (READUNCOMMITTED)
						WHERE 		Description = @Description
						)
			BEGIN
				SET @ErrorMsg = '##01Duplicate record ' + CAST(@Description AS nvarchar(64))
				RAISERROR(@ErrorMsg,16,1)
			RETURN -1
			END
		END

	/************
	INSERT RECORD
	************/
	INSERT INTO	STOCKCONTROL_Category												WITH (ROWLOCK)
			(
			Description,MinTemp,MaxTemp,UpdatedOn
			)
	VALUES
			(
			@Description,@MinTemp,@MaxTemp,GETDATE()
			)

		SET @RecordID = SCOPE_IDENTITY()
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_ins_Category',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
GO
/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_del_Supplier]    Script Date: 06/30/2012 17:43:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				TR
	Date:				01/05/2012 19:40

	Description:		Delete record from STOCKCONTROL_Supplier

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_del_Supplier]
---------Parameters----------
@SupplierID int,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

DECLARE @ListID INT
DECLARE @SupplierName NVARCHAR(50)

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg = ''

	IF @SupplierID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		SupplierID
							FROM		STOCKCONTROL_Supplier							WITH (READUNCOMMITTED)
							WHERE 		SupplierID = @SupplierID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_Supplier - Could not find record ' + CAST(@SupplierID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END
			
			IF EXISTS(SELECT SupplierID FROM STOCKCONTROL_PurchaseOrder WHERE SupplierID = @SupplierID)	
			BEGIN
				SET @ErrorMsg = '##04This Product is used in a Purchase Order. So, can not be deleted.'
						RAISERROR(@ErrorMsg,16,1)
						RETURN -1
			END	

			SELECT	@SupplierName = SupplierName 
			FROM	dbo.STOCKCONTROL_Supplier
			WHERE	SupplierID = @SupplierID

			SELECT	@ListID = ListID
			FROM	dbo.PROCEDURE_UserDefinedList
			WHERE	Name = 'Stock Control - Suppliers'

			IF ISNULL(@ListID,0) > 0
				BEGIN
					DELETE	dbo.PROCEDURE_UserDefinedListDetail
					WHERE	ListID = @ListID
					AND		Description = @SupplierName			
				END

			
			DELETE	STOCKCONTROL_SupplierProduct	WITH (ROWLOCK)
			WHERE 	SupplierID = @SupplierID
						
			DELETE	STOCKCONTROL_Supplier							WITH (ROWLOCK)
			WHERE 	SupplierID = @SupplierID
			
			
			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@SupplierID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_del_Supplier',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
GO
/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_del_RackProduct]    Script Date: 06/30/2012 17:43:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				TR
	Date:				01/05/2012 19:27

	Description:		Delete record from STOCKCONTROL_RackProduct

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_del_RackProduct]
---------Parameters----------
@ID nvarchar(50),
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg = ''

	IF ISNULL(@ID,'') <> ''
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		RackLocationID
							FROM		STOCKCONTROL_RackProduct							WITH (READUNCOMMITTED)
							WHERE 		ID = @ID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_RackProduct - Could not find record ' + @ID 
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			DELETE	STOCKCONTROL_RackProduct							WITH (ROWLOCK)

			WHERE 	ID = @ID

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + @ID
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_del_RackProduct',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
GO
/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_del_Rack]    Script Date: 06/30/2012 17:43:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				TR
	Date:				01/05/2012 19:17

	Description:		Delete record from STOCKCONTROL_Rack

	History		Name		Date		Mod		
	=============================================================================================================================================
	FK validation before delete Rack 


	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_del_Rack]
---------Parameters----------
@RackLocationID INT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg = ''
	IF ISNULL(@RackLocationID,0) <> 0
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		RackID
							FROM		STOCKCONTROL_Rack							WITH (READUNCOMMITTED)
							WHERE 		RackLocationID = @RackLocationID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_Rack - Could not find record ' + @RackLocationID
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END
			
			IF EXISTS (SELECT RackLocationID FROM	STOCKCONTROL_RackProduct  WHERE RackLocationID = @RackLocationID AND Qty > 0)
			BEGIN
				SET @ErrorMsg = '##02Rack contains some product. So, can not be deleted.' + @RackLocationID
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END
			
			DELETE	STOCKCONTROL_RackProduct	WITH (ROWLOCK)
			WHERE 	RackLocationID = @RackLocationID
			
			UPDATE LOCATION_ObjectNew 
			SET RackLocationID = NULL 
			WHERE RackLocationID = @RackLocationID

			DELETE	STOCKCONTROL_Rack							WITH (ROWLOCK)
			WHERE 	RackLocationID = @RackLocationID
						

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + @RackLocationID
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_del_Rack',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
GO
/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_del_Product]    Script Date: 06/30/2012 17:43:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				TR
	Date:				01/05/2012 19:06

	Description:		Delete record from STOCKCONTROL_Product

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_del_Product]
---------Parameters----------
@ProductID INT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

DECLARE @ListID INT
DECLARE @DescName NVARCHAR(50)

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg = ''

	IF @ProductID > 0
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		ProductID
							FROM		STOCKCONTROL_Product							WITH (READUNCOMMITTED)
							WHERE 		ProductID = @ProductID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_Product - Could not find record ' + @ProductID
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END
			
			IF EXISTS(SELECT ProductID FROM STOCKCONTROL_PurchaseOrderDetail WHERE ProductID = @ProductID)	
			BEGIN
				SET @ErrorMsg = '##04This Product is used in a Purchase Order. So, can not be deleted.'
						RAISERROR(@ErrorMsg,16,1)
						RETURN -1
			END	
			
			IF EXISTS(SELECT ProductID FROM STOCKCONTROL_SalesOrderDetail WHERE ProductID = @ProductID)	
			BEGIN
				SET @ErrorMsg = '##04This Product is used in a Sales Order. So, can not be deleted.'
						RAISERROR(@ErrorMsg,16,1)
						RETURN -1
			END	
			
			IF EXISTS(SELECT ProductID FROM ComplaintProduct WHERE ProductID = @ProductID)	
			BEGIN
				SET @ErrorMsg = '##04This Product is used in a Complaint. So, can not be deleted.'
						RAISERROR(@ErrorMsg,16,1)
						RETURN -1
			END	


			SELECT	@DescName = Description 
			FROM	dbo.STOCKCONTROL_Product
			WHERE	ProductID = @ProductID

			SELECT	@ListID = ListID
			FROM	dbo.PROCEDURE_UserDefinedList
			WHERE	Name = 'Stock Control - Product'

			IF ISNULL(@ListID,0) > 0
				BEGIN
					DELETE	dbo.PROCEDURE_UserDefinedListDetail
					WHERE	ListID = @ListID
					AND		Description = @DescName			
				END
				
			DELETE	STOCKCONTROL_SupplierProduct	WITH (ROWLOCK)
			WHERE 	ProductID = @ProductID
			
			DELETE	STOCKCONTROL_RackProduct	WITH (ROWLOCK)
			WHERE 	ProductID = @ProductID
			
			DELETE	STOCKCONTROL_StockCheck	WITH (ROWLOCK)
			WHERE 	ProductID = @ProductID
			
			DELETE	STOCKCONTROL_RecipeProduct	WITH (ROWLOCK)
			WHERE 	ProductID = @ProductID
			
			DELETE STOCKCONTROL_ProductCode	WITH (ROWLOCK)
			WHERE 	ProductID = @ProductID
								
			DELETE	STOCKCONTROL_Product							WITH (ROWLOCK)
			WHERE 	ProductID = @ProductID
			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + @ProductID
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF ISNULL(@ErrorMsg,'') =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_del_Product',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
GO
/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_del_Customer]    Script Date: 06/30/2012 17:43:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				TR
	Date:				01/05/2012 18:36

	Description:		Delete record from STOCKCONTROL_Customer

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_del_Customer]
---------Parameters----------
@CustomerID  int,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

DECLARE @ListID INT
DECLARE @CustomerName NVARCHAR(50)

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF @CustomerID  > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		CustomerID 
							FROM		STOCKCONTROL_Customer							WITH (READUNCOMMITTED)
							WHERE 		CustomerID  = @CustomerID 
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_Customer - Could not find record ' + CAST(@CustomerID  AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END
			
			IF EXISTS(SELECT CustomerID FROM STOCKCONTROL_SalesOrder WHERE CustomerID = @CustomerID)	
			BEGIN
				SET @ErrorMsg = '##04This Customer is used in a Sales Order. So, can not be deleted.'
						RAISERROR(@ErrorMsg,16,1)
						RETURN -1
			END	
			
			IF EXISTS(SELECT CustomerID FROM Complaint WHERE CustomerID = @CustomerID)	
			BEGIN
				SET @ErrorMsg = '##04This Customer is used in a Complaint. So, can not be deleted.'
						RAISERROR(@ErrorMsg,16,1)
						RETURN -1
			END	

			SELECT	@CustomerName =  CustomerName 
			FROM	dbo.STOCKCONTROL_Customer
			WHERE	CustomerID = @CustomerID

			SELECT	@ListID = ListID
			FROM	dbo.PROCEDURE_UserDefinedList
			WHERE	Name = 'Stock Control - Customer'

			IF ISNULL(@ListID,0) > 0
				BEGIN
					DELETE	dbo.PROCEDURE_UserDefinedListDetail
					WHERE	ListID = @ListID
					AND		Description = @CustomerName			
				END
				
			DELETE	STOCKCONTROL_Customer							WITH (ROWLOCK)

			WHERE 	CustomerID  = @CustomerID 

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@CustomerID  AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_del_Customer',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
GO
/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_del_Category]    Script Date: 06/30/2012 17:43:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				TR
	Date:				01/05/2012 18:23

	Description:		Delete record from STOCKCONTROL_Category

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_del_Category]
---------Parameters----------
@CategoryID int,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF @CategoryID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		CategoryID
							FROM		STOCKCONTROL_Category							WITH (READUNCOMMITTED)
							WHERE 		CategoryID = @CategoryID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_Category - Could not find record ' + CAST(@CategoryID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			DELETE	STOCKCONTROL_Category							WITH (ROWLOCK)

			WHERE 	CategoryID = @CategoryID

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@CategoryID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_del_Category',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
GO
/****** Object:  Default [DF_STOCKCONTROL_Product_CostPrice]    Script Date: 06/30/2012 17:42:54 ******/
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_STOCKCONTROL_Product_CostPrice]') AND type = 'D')
ALTER TABLE [dbo].[STOCKCONTROL_Product] ADD  CONSTRAINT [DF_STOCKCONTROL_Product_CostPrice]  DEFAULT ((0)) FOR [CostPrice]
GO

/****** Object:  Default [DF_STOCKCONTROL_Product_SalePrice]    Script Date: 06/30/2012 17:42:54 ******/
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_STOCKCONTROL_Product_SalePrice]') AND type = 'D')
ALTER TABLE [dbo].[STOCKCONTROL_Product] ADD  CONSTRAINT [DF_STOCKCONTROL_Product_SalePrice]  DEFAULT ((0)) FOR [SalePrice]
GO
/****** Object:  Default [DF_STOCKCONTROL_Product_MinimumStockLevel]    Script Date: 06/30/2012 17:42:54 ******/
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_STOCKCONTROL_Product_MinimumStockLevel]') AND type = 'D')
ALTER TABLE [dbo].[STOCKCONTROL_Product] ADD  CONSTRAINT [DF_STOCKCONTROL_Product_MinimumStockLevel]  DEFAULT ((0)) FOR [MinimumStockLevel]
GO
/****** Object:  Default [DF_STOCKCONTROL_RackProduct_Qty]    Script Date: 06/30/2012 17:42:54 ******/
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_STOCKCONTROL_RackProduct_Qty]') AND type = 'D')
ALTER TABLE [dbo].[STOCKCONTROL_RackProduct] ADD  CONSTRAINT [DF_STOCKCONTROL_RackProduct_Qty]  DEFAULT ((0)) FOR [Qty]
GO
/****** Object:  Check [CK_STOCKCONTROL_Product]    Script Date: 06/30/2012 17:42:54 ******/
IF NOT EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'[dbo].[CK_STOCKCONTROL_Product]') AND parent_object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_Product]'))
BEGIN
ALTER TABLE [dbo].[STOCKCONTROL_Product]  WITH CHECK ADD  CONSTRAINT [CK_STOCKCONTROL_Product] CHECK  (((1)=(1)))
--GO
ALTER TABLE [dbo].[STOCKCONTROL_Product] CHECK CONSTRAINT [CK_STOCKCONTROL_Product]
--GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'aa' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'STOCKCONTROL_Product', @level2type=N'CONSTRAINT',@level2name=N'CK_STOCKCONTROL_Product'
--GO
END


/****** Object:  UserDefinedFunction [dbo].[fnGetSuppliersOfProduct]    Script Date: 07/31/2012 19:59:08 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fnGetSuppliersOfProduct]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[fnGetSuppliersOfProduct]
GO

/****** Object:  UserDefinedFunction [dbo].[fnGetSuppliersOfProduct]    Script Date: 07/31/2012 19:59:08 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnGetSuppliersOfProduct] ( @ProductID INT ) 
RETURNS NVARCHAR(MAX)
AS
BEGIN

-- define the last customer ID handled
DECLARE @LastID INT
SET @LastID = 0

-- define the customer ID to be handled now
DECLARE @IDToHandle INT
DECLARE @Supplier NVARCHAR(MAX)
DECLARE @Suppliers NVARCHAR(MAX)

SET @Suppliers = NULL


-- select the next customer to handle    
SELECT TOP 1 @IDToHandle = sppd.Id, @Supplier= SP.SupplierName
FROM dbo.STOCKCONTROL_Supplier sp
INNER JOIN dbo.STOCKCONTROL_SupplierProduct sppd on sp.SupplierID = sppd.SupplierID
WHERE sppd.Id > @LastID AND sppd.ProductID = @ProductID
ORDER BY sppd.Id ASC

SET @LastID = @IDToHandle
SET @Suppliers = ISNULL(@Supplier,'')

-- as long as we have customers......    
WHILE @IDToHandle IS NOT NULL
BEGIN
    -- call your sproc

    -- set the last customer handled to the one we just handled
    SET @LastID = @IDToHandle
    SET @IDToHandle = NULL
       

    -- select the next customer to handle    
    SELECT TOP 1 @IDToHandle = sppd.Id, @Supplier= SP.SupplierName
	FROM dbo.STOCKCONTROL_Supplier sp
	INNER JOIN dbo.STOCKCONTROL_SupplierProduct sppd on sp.SupplierID = sppd.SupplierID
	WHERE sppd.Id > @LastID AND sppd.ProductID = @ProductID
	ORDER BY sppd.Id ASC
	
	IF @IDToHandle IS NOT NULL
		SET @Suppliers = ISNULL(@Suppliers,'') + ', ' + ISNULL(@Supplier,'')
END

RETURN @Suppliers

END

GO

/****** Object:  UserDefinedFunction [dbo].[fnGetProcudureVerificationStatus]    Script Date: 07/31/2012 19:59:08 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fnGetProcudureVerificationStatus]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[fnGetProcudureVerificationStatus]
GO

/****** Object:  UserDefinedFunction [dbo].[fnGetProcudureVerificationStatus]    Script Date: 07/31/2012 19:59:08 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnGetProcudureVerificationStatus] ( @StepID INT ) 
RETURNS NVARCHAR(MAX)
AS
BEGIN

DECLARE @VerifyStatus BIT

SET @VerifyStatus = 0


-- select the next customer to handle    
SELECT @VerifyStatus = NeedToVerify
FROM dbo.Procedure_Step sp
WHERE StepID = @StepID

RETURN @VerifyStatus

END

GO

------------------
/****** Object:  UserDefinedFunction [dbo].[fnGetSuppliersOfProduct]    Script Date: 07/31/2012 19:59:08 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fnGetFullnameOfUserOrDept]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[fnGetFullnameOfUserOrDept]
GO

/****** Object:  UserDefinedFunction [dbo].[fnGetFullnameOfUserOrDept]    Script Date: 07/31/2012 19:59:08 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnGetFullnameOfUserOrDept] ( @AssignTo nvarchar(100)) 
RETURNS NVARCHAR(MAX)
AS
BEGIN

DECLARE @FullName NVARCHAR(MAX)

SET @FullName = ''


IF CHARINDEX('D-',@AssignTo) > 0
BEGIN
	SELECT @FullName =  RoleDescription FROM USER_Role WHERE RoleID = CAST(SUBSTRING(@AssignTo, CHARINDEX('-', @AssignTo)+1 , LEN(@AssignTo) - CHARINDEX('-', @AssignTo)) AS INT)
END

ELSE
	SELECT @FullName = FirstName + ' '+ LastName FROM USER_User WHERE UserName = @AssignTo



RETURN @FullName

END

GO

--/****** Object:  UserDefinedFunction [dbo].[fnGetSuppliersOfProduct]    Script Date: 07/31/2012 19:59:08 ******/
--IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fnGetPurchaseOrderStatus]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
--DROP FUNCTION [dbo].[fnGetPurchaseOrderStatus]
--GO

--/****** Object:  UserDefinedFunction [dbo].[fnGetSuppliersOfProduct]    Script Date: 07/31/2012 19:59:08 ******/
--SET ANSI_NULLS ON
--GO

--SET QUOTED_IDENTIFIER ON
--GO

--CREATE FUNCTION [dbo].[fnGetPurchaseOrderStatus] ( @PurchaseOrderID INT ) 
--RETURNS NVARCHAR(MAX)
--AS
--BEGIN

--DECLARE @Value Bit 
--DECLARE @Result NVARCHAR(MAX)

--SET @Value = 0

--SET @Value =(SELECT CASE WHEN  SUM(p.Quantity) <= SUM(p.ReceivedQuantity)  THEN 1 ELSE 0 END FROM STOCKCONTROL_PurchaseOrderDetail  p WHERE( p.POID = @PurchaseOrderID))

--IF(@Value = 1 )
--SET @Result ='Completed'

--ELSE
--SET @Result ='IN_PROGRESS'

--RETURN @Result



--END

--GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fnGetRacksOfProduct]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[fnGetRacksOfProduct]
GO

/****** Object:  UserDefinedFunction [dbo].[fnGetRacksOfProduct]    Script Date: 06/06/2013 16:30:46 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnGetRacksOfProduct] ( @ProductID INT ) 
RETURNS NVARCHAR(MAX)
AS
BEGIN

-- define the last customer ID handled
DECLARE @LastID INT
SET @LastID = 0

-- define the customer ID to be handled now
DECLARE @IDToHandle INT
DECLARE @Rack NVARCHAR(MAX)
DECLARE @Racks NVARCHAR(MAX)

SET @Racks = NULL


-- select the next customer to handle    
SELECT TOP 1 @IDToHandle = sppd.Id, @Rack= SP.Description
FROM dbo.STOCKCONTROL_Rack sp
INNER JOIN dbo.STOCKCONTROL_RackProduct sppd on sp.RackLocationID = sppd.RackLocationID
WHERE sppd.Id > @LastID AND sppd.ProductID = @ProductID
ORDER BY sppd.Id ASC

SET @LastID = @IDToHandle
SET @Racks = ISNULL(@Rack,'')

-- as long as we have customers......    
WHILE @IDToHandle IS NOT NULL
BEGIN
    -- call your sproc

    -- set the last customer handled to the one we just handled
    SET @LastID = @IDToHandle
    SET @IDToHandle = NULL
       

    -- select the next customer to handle    
    SELECT TOP 1 @IDToHandle = sppd.Id, @Rack= SP.Description
	FROM dbo.STOCKCONTROL_Rack sp
	INNER JOIN dbo.STOCKCONTROL_RackProduct sppd on sp.RackLocationID = sppd.RackLocationID
	WHERE sppd.ID > @LastID AND sppd.ProductID = @ProductID
	ORDER BY sppd.Id ASC
	
	IF @IDToHandle IS NOT NULL
		SET @Racks = ISNULL(@Racks,'') + ', ' + ISNULL(@Rack,'')
END

RETURN @Racks

END
GO
--====================================
--Import old SupplierId to new STOCKCONTROL_SupplierProduct table
--==================================== 
/*DECLARE @ProductCode nvarchar(20)
DECLARE @SupplierID INT

WHILE Exists(SELECT ProductCode,SupplierID FROM STOCKCONTROL_Product WHERE ISNULL(SupplierID,0) >0)
BEGIN
	SET @ProductCode = NULL
	SET @SupplierID = NULL
	
	SELECT TOP 1 @ProductCode=ProductCode,@SupplierID=SupplierID 
	FROM STOCKCONTROL_Product 
	WHERE ISNULL(SupplierID,0) >0
	
	IF (@ProductCode IS NOT NULL) AND (@SupplierID IS NOT NULL)
	BEGIN
		IF NOT EXISTS (SELECT * FROM STOCKCONTROL_SupplierProduct WHERE SupplierID = @SupplierID AND ProductCode=@ProductCode)
		INSERT INTO STOCKCONTROL_SupplierProduct
		(SupplierID,ProductCode)
		VALUES
		(@SupplierID,@ProductCode)
		
		UPDATE STOCKCONTROL_Product
		SET SupplierID = NULL
		WHERE 
		ProductCode = @ProductCode
	END	
END

GO*/




/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_upd_Supplier_Active]    Script Date: 09/07/2012 13:57:56 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_upd_Supplier_Active]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_upd_Supplier_Active]
GO



/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_upd_Supplier_Active]    Script Date: 09/07/2012 13:57:56 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				MR
	Date:				26/06/2011 

	Description:		Update record in PROCEDURE_Step

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
Create PROCEDURE [dbo].[STOCKCONTROL_usp_upd_Supplier_Active]
---------Parameters----------
@SupplierID int,
@Active bit = NULL,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 


SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF @SupplierID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		SupplierID
							FROM		STOCKCONTROL_Supplier				WITH (READUNCOMMITTED)
							WHERE 		SupplierID = @SupplierID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_Supplier - Could not find record ' + CAST(@SupplierID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END
			
			UPDATE	STOCKCONTROL_Supplier												WITH (ROWLOCK)
			SET 	Active = @Active
			WHERE	SupplierID = @SupplierID		
			
			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@SupplierID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_upd_Supplier_Active',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1



GO


--================================================================================================================================
--Sales Order related Stored Procedures
--================================================================================================================================

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_del_SalesOrderDetail]    Script Date: 09/18/2012 20:28:38 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_del_SalesOrderDetail]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_del_SalesOrderDetail]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_SalesOrderDetail]    Script Date: 09/18/2012 20:28:38 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_sel_SalesOrderDetail]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_sel_SalesOrderDetail]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_ins_SalesOrder]    Script Date: 09/18/2012 20:28:38 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_ins_SalesOrder]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_ins_SalesOrder]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_upd_SalesOrderDetail]    Script Date: 09/18/2012 20:28:39 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_upd_SalesOrderDetail]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_upd_SalesOrderDetail]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_upd_SalesOrder]    Script Date: 09/18/2012 20:28:39 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_upd_SalesOrder]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_upd_SalesOrder]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_SalesOrder]    Script Date: 09/18/2012 20:28:39 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_sel_SalesOrder]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_sel_SalesOrder]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_PreviousOrderAndNotes]    Script Date: 09/18/2012 20:28:39 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_sel_PreviousCustomerOrder]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_sel_PreviousCustomerOrder]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_sel_PreviousDeliveryNotes]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_sel_PreviousDeliveryNotes]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_SalesOrder]    Script Date: 09/18/2012 20:28:39 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_sel_SalesOrder]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_sel_SalesOrder]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_ins_SalesOrderDetail]    Script Date: 09/18/2012 20:28:39 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_ins_SalesOrderDetail]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_ins_SalesOrderDetail]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_del_Deliverer]    Script Date: 09/18/2012 20:28:39 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_del_Deliverer]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_del_Deliverer]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_upd_Deliverer]    Script Date: 09/18/2012 20:28:39 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_upd_Deliverer]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_upd_Deliverer]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_ins_Deliverer]    Script Date: 09/18/2012 20:28:39 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_ins_Deliverer]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_ins_Deliverer]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_Deliverer]    Script Date: 09/18/2012 20:28:39 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_sel_Deliverer]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_sel_Deliverer]
GO



/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_del_SalesOrderDetail]    Script Date: 09/18/2012 20:28:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				Titu
	Date:				17-Sep-2012

	Description:		Delete record from STOCKCONTROL_SalesOrderDetail

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
Create PROCEDURE [dbo].[STOCKCONTROL_usp_del_SalesOrderDetail]
---------Parameters----------
@OrderDetailID int,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF @OrderDetailID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		OrderDetailID
							FROM		STOCKCONTROL_SalesOrderDetail							WITH (READUNCOMMITTED)
							WHERE 		OrderDetailID = @OrderDetailID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_SalesOrderDetail - Could not find record ' + CAST(@OrderDetailID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			DELETE	STOCKCONTROL_SalesOrderDetail							WITH (ROWLOCK)

			WHERE 	OrderDetailID = @OrderDetailID

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@OrderDetailID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_del_SalesOrderDetail',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_SalesOrderDetail]    Script Date: 09/18/2012 20:28:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*
	Author:				Titu(Jr)
	Date:				14-sep-2012

	Description:		Select records from STOCKCONTROL_SalesOrderDetail

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_sel_SalesOrderDetail]
---------Parameters----------
@OrderID INT,
@SQL_WHERE nvarchar(4000) = NULL

AS

DECLARE @SQL_STRING nvarchar (4000)

SET NOCOUNT ON
SET DATEFORMAT dmy

	IF @OrderID <> 0 
		/**************************
			RETURN SPECIFIC RECORDS
		**************************/
		BEGIN
			SELECT		sod.OrderDetailID, sod.OrderID, sod.Pack, sod.ProductID, sod.SalePrice, sop.[Description] ProductDescription, sop.StockBy ProductStockBy, sop.[Type] ProductType, sod.Pack*sod.SalePrice TotalSalePrice,sod.Comment,sod.PickedQty
			FROM		STOCKCONTROL_SalesOrderDetail	sod							WITH (READUNCOMMITTED)
			INNER JOIN  STOCKCONTROL_Product sop on sod.ProductID = sop.ProductID
			WHERE		sod.OrderID = @OrderID
			ORDER BY 	sod.OrderDetailID ASC
			
			RETURN
		END

	IF ISNULL(@SQL_WHERE,'') <> '' 
		/*********************************************
			SELECT RECORDS ACCORDING TO WHERE CRITERIA
		*********************************************/
		BEGIN
			SET @SQL_STRING = 'SELECT	sod.OrderDetailID, sod.OrderID, sod.Pack, sod.ProductID, sod.SalePrice, sop.[Description] ProductDescription, sop.StockBy ProductStockBy, sop.[Type] ProductType, sod.Pack*sod.SalePrice TotalSalePrice,sod.Comment,sod.PickedQty '			
			SET @SQL_STRING = @SQL_STRING + 'FROM		STOCKCONTROL_SalesOrderDetail	sod	 '
			SET @SQL_STRING = @SQL_STRING + 'INNER JOIN  STOCKCONTROL_Product sop on sod.ProductID = sop.ProductID	 '
			SET @SQL_STRING = @SQL_STRING + @SQL_WHERE

			EXEC(@SQL_STRING)

			RETURN
		END

	/*********************
		RETURN ALL RECORDS
	*********************/
	BEGIN
		SELECT		sod.OrderDetailID, sod.OrderID, sod.Pack, sod.ProductID, sod.SalePrice, sop.[Description] ProductDescription, sop.StockBy ProductStockBy, sop.[Type] ProductType, sod.Pack*sod.SalePrice TotalSalePrice,sod.Comment,sod.PickedQty
		FROM		STOCKCONTROL_SalesOrderDetail	sod							WITH (READUNCOMMITTED)
		INNER JOIN  STOCKCONTROL_Product sop on sod.ProductID = sop.ProductID
		ORDER BY 	sod.OrderDetailID ASC

		RETURN
	END


GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_ins_SalesOrder]    Script Date: 09/18/2012 20:28:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				Titu(Jr)
	Date:				12-Sep-2012

	Description:		Insert record in STOCKCONTROL_SalesOrder

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_ins_SalesOrder]
---------Parameters----------
@CustomerID int,
@CustomerOrderNumber nvarchar(20) = NULL,
@OrderedBy nvarchar(100),
@OrderDate datetime,
@DeliveryDate datetime,
@DeliveryByID int,
@DeliveryNotes nvarchar(100),
@Comments nvarchar(200),
@OrderType int,
@OrderStatus int ,
@OrderTakenBy int = null,
@RepeatCustomerOrder bit = null,
@RepeatDeliveryNotes bit = null,
@DeliveryTo NVARCHAR(100) = NULL,	
@RecordID int OUTPUT,
@Success bit OUTPUT,
@OrderNumber NVARCHAR(20) OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 
DECLARE @Name NVARCHAR(32)
--DECLARE @OrderNumber NVARCHAR(20)

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RecordID = 0
	SET @Success = 0

	
	BEGIN TRANSACTION

	/************
	INSERT RECORD
	************/	
	DECLARE @min INT
	DECLARE @max INT
	DECLARE @count INT

	SELECT  @max = ISNULL( MAX(Convert(int, OrderNumber)), 0), @count = ISNULL(COUNT(OrderNumber),0)
	FROM STOCKCONTROL_SalesOrder
	
	SET @min = 1
	
	IF @count = @max
		BEGIN
			SELECT @OrderNumber = ISNULL( MAX(Convert(INT, OrderNumber)), 0)+1 FROM STOCKCONTROL_SalesOrder	
		END
	ELSE
		BEGIN
			WHILE @min < @max
			BEGIN
			   IF NOT EXISTS (SELECT * FROM STOCKCONTROL_SalesOrder WHERE OrderNumber = RIGHT( '00000'+ CONVERT(nvarchar(20), @min),6))
					BREAK
			   SET @min = @min + 1
			END
			
			SET @OrderNumber = @min
		END	

			
	
	SET @OrderNumber = RIGHT( '00000'+ CONVERT(nvarchar(20), @OrderNumber),6)
	INSERT INTO STOCKCONTROL_SalesOrder	WITH (ROWLOCK)
           ([OrderNumber]
			,[CustomerOrderNumber]
           ,[CustomerID]
           ,[OrderedBy]
           ,[OrderDate]
           ,[DeliveryDate]
           ,[DeliveryByID]
           ,[DeliveryNotes]
           ,[Comments]
           ,[OrderType]
           ,[OrderStatus]
           ,[OrderTakenBy]
           ,[RepeatCustomerOrder]
           ,[RepeatDeliveryNotes]
           ,[DeliveryTo]
           ,Updatedon)
     VALUES
           ( @OrderNumber
           ,@CustomerOrderNumber
           ,@CustomerID
           ,@OrderedBy
           ,@OrderDate
           ,@DeliveryDate
           ,@DeliveryByID
           ,@DeliveryNotes
           ,@Comments
           ,@OrderType
           ,@OrderStatus
           ,@OrderTakenBy
           ,@RepeatCustomerOrder
           ,@RepeatDeliveryNotes	
           ,@DeliveryTo
           ,GETDATE()	)


		SET @RecordID = SCOPE_IDENTITY()
					
		COMMIT TRANSACTION
				        	
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_ins_SalesOrder',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1



GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_upd_SalesOrderDetail]    Script Date: 09/18/2012 20:28:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				Titu(Jr)
	Date:				14-Sep-2012 

	Description:		Update record in STOCKCONTROL_usp_upd_SalesOrderDetail

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
Create PROCEDURE [dbo].[STOCKCONTROL_usp_upd_SalesOrderDetail]
---------Parameters----------
@OrderDetailID int,
@OrderID int,
@ProductID int,
@Pack decimal(18,2),
@SalePrice decimal(18,2),
@Comment NVARCHAR(50) = NULL ,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF @OrderDetailID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		OrderDetailID
							FROM		STOCKCONTROL_SalesOrderDetail				WITH (READUNCOMMITTED)
							WHERE 		OrderDetailID = @OrderDetailID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_SalesOrderDetail - Could not find record ' + CAST(@OrderDetailID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			/************
			UPDATE RECORD
			************/
			UPDATE	STOCKCONTROL_SalesOrderDetail		WITH (ROWLOCK)

			SET 	OrderID = @OrderID,
					ProductID = @ProductID,
					Pack = @Pack,
					SalePrice = @SalePrice,
					Comment = @Comment,
					UpdatedOn = GETDATE()

			WHERE	OrderDetailID = @OrderDetailID
			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@OrderDetailID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_upd_SalesOrderDetail',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_upd_SalesOrder]    Script Date: 09/18/2012 20:28:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				Titu(Jr)
	Date:				14-Sep-2012 

	Description:		Update record in STOCKCONTROL_usp_upd_SalesOrder

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_upd_SalesOrder]
---------Parameters----------
@OrderID int,
@CustomerID int,
@OrderedBy nvarchar(100),
@CustomerOrderNumber nvarchar(20) = NULL,
@DeliveryDate datetime,
@DeliveryByID int,
@DeliveryNotes nvarchar(100),
@Comments nvarchar(200),
@OrderTakenBy int = null,
@RepeatCustomerOrder bit = null,
@RepeatDeliveryNotes bit = null,
@DeliveryTo nvarchar(100)= null,	
@OrderType int,
@OrderStatus int,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF @OrderID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		OrderID
							FROM		STOCKCONTROL_SalesOrder				WITH (READUNCOMMITTED)
							WHERE 		OrderID = @OrderID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_SalesOrder - Could not find record ' + CAST(@OrderID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			/************
			UPDATE RECORD
			************/
			UPDATE	STOCKCONTROL_SalesOrder		WITH (ROWLOCK)

			SET 	CustomerID = @CustomerID,
					OrderTakenBy = @OrderTakenBy,
					OrderedBy = @OrderedBy,
					CustomerOrderNumber = @CustomerOrderNumber ,
					DeliveryDate = @DeliveryDate,
					DeliveryByID = @DeliveryByID,
					DeliveryNotes = @DeliveryNotes,
					Comments = @Comments,
					OrderType = @OrderType ,
					OrderStatus = @OrderStatus,
					RepeatCustomerOrder = @RepeatCustomerOrder,
					RepeatDeliveryNotes	= @RepeatDeliveryNotes,
					DeliveryTo = @DeliveryTo	,
					UpdatedOn = GETDATE()
					
						

			WHERE	OrderID = @OrderID
			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@OrderID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_upd_SalesOrder',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO
--STOCKCONTROL_usp_sel_PreviousOrderAndNotes

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_PreviousCustomerOrder]    Script Date: 09/18/2012 20:28:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*
	Author:				Titu(Jr)
	Date:				10-sep-2012

	Description:		Select previous records from STOCKCONTROL_SalesOrder

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_sel_PreviousCustomerOrder]
---------Parameters----------
@CustomerID INT

AS


SET NOCOUNT ON
SET DATEFORMAT dmy

	IF @CustomerID <> 0 
		/**************************
			RETURN SPECIFIC RECORDS
		**************************/
		BEGIN
					SELECT TOP 1 OrderID,CustomerOrderNumber,OrderNumber,CustomerID,OrderType,OrderStatus,DeliveryNotes, DeliveryTo
					FROM STOCKCONTROL_SalesOrder
					WHERE CustomerID=@CustomerID AND OrderStatus = 1
					ORDER BY OrderID DESC
					
			
			RETURN
		END
	
	RETURN	


GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_PreviousDeliveryNotes]    Script Date: 09/18/2012 20:28:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*
	Author:				Titu(Jr)
	Date:				10-sep-2012

	Description:		Select previous records from STOCKCONTROL_SalesOrder

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_sel_PreviousDeliveryNotes]
---------Parameters----------
@CustomerID INT

AS

DECLARE @SQL_STRING nvarchar (4000)

SET NOCOUNT ON
SET DATEFORMAT dmy

	IF @CustomerID <> 0 
		/**************************
			RETURN SPECIFIC RECORDS
		**************************/
		BEGIN
		
					SELECT TOP 1 OrderID,CustomerOrderNumber,OrderNumber,CustomerID,OrderType,OrderStatus,DeliveryNotes,RepeatCustomerOrder,RepeatDeliveryNotes, DeliveryTo
					FROM STOCKCONTROL_SalesOrder
					WHERE CustomerID=@CustomerID AND OrderStatus = 1
					ORDER BY OrderID DESC
					
			
			RETURN
		END


GO



/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_SalesOrder]    Script Date: 09/18/2012 20:28:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*
	Author:				Titu(Jr)
	Date:				10-sep-2012

	Description:		Select records from STOCKCONTROL_SalesOrder

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_sel_SalesOrder]
---------Parameters----------
@OrderID INT,
@SQL_WHERE nvarchar(4000) = NULL

AS

DECLARE @SQL_STRING nvarchar (4000)

SET NOCOUNT ON
SET DATEFORMAT dmy

	IF @OrderID <> 0 
		/**************************
			RETURN SPECIFIC RECORDS
		**************************/
		BEGIN
			SELECT		scs.OrderID, scs.OrderNumber, scs.CustomerOrderNumber, scs.CustomerID, scs.OrderedBy, scs.OrderDate, scs.DeliveryDate, scs.DeliveryByID, od.Deliverer DeliveryBy, scs.DeliveryNotes, scs.Comments, scs.OrderType, scs.OrderStatus, cs.CustomerName,scs.OrderTakenBy,scs.RepeatCustomerOrder,scs.RepeatDeliveryNotes,scs.PickingStatus
			,ISNULL(cs.Address1+', ','')+ISNULL(cs.Address2+', ','')+ISNULL(cs.Address3+', ','')+ISNULL(cs.Address4,'') CustomerAddress, ISNULL(cs.Postcode1+', ','') Postcode1,ISNULL(cs.Postcode2+', ','') Postcode2,ISNULL(cs.Postcode3+', ','') Postcode3,ISNULL(cs.Postcode4+', ','') Postcode4,ISNULL(cs.Postcode5+', ','') Postcode5,(us.FirstName + ' '+us.LastName) as FullName, DeliveryTo
			FROM		STOCKCONTROL_SalesOrder	scs								WITH (READUNCOMMITTED)
			INNER JOIN  STOCKCONTROL_Customer cs on scs.CustomerID = cs.CustomerID
			LEFT JOIN  STOCKCONTROL_Deliverer od on scs.DeliveryByID = od.DelivererID
			LEFT JOIN	dbo.USER_User us ON scs.OrderTakenBy = us.UserID
			WHERE		scs.OrderID = @OrderID
			ORDER BY 	scs.OrderNumber DESC
			
			RETURN
		END

	IF ISNULL(@SQL_WHERE,'') <> '' 
		/*********************************************
			SELECT RECORDS ACCORDING TO WHERE CRITERIA
		*********************************************/
		BEGIN
			SET @SQL_STRING = 'SELECT scs.OrderID, scs.OrderNumber, scs.CustomerOrderNumber, scs.CustomerID, scs.OrderedBy, scs.OrderDate, scs.DeliveryDate, scs.DeliveryByID, od.Deliverer DeliveryBy, scs.DeliveryNotes, scs.Comments, scs.OrderType, scs.OrderStatus, cs.CustomerName,scs.OrderTakenBy,scs.RepeatCustomerOrder,scs.RepeatDeliveryNotes,scs.PickingStatus '
			SET @SQL_STRING = @SQL_STRING + ',ISNULL(cs.Address1+'', '','''')+ISNULL(cs.Address2+'', '','''')+ISNULL(cs.Address3+'', '','''')+ISNULL(cs.Address4,'''') CustomerAddress, ISNULL(cs.Postcode1+'', '','''') Postcode1,ISNULL(cs.Postcode2+'', '','''') Postcode2,ISNULL(cs.Postcode3+'', '','''') Postcode3,ISNULL(cs.Postcode4+'', '','''') Postcode4,ISNULL(cs.Postcode5+'', '','''') Postcode5,(us.FirstName + '' ''+us.LastName) as FullName, DeliveryTo '
			SET @SQL_STRING = @SQL_STRING + 'FROM		STOCKCONTROL_SalesOrder	scs	 '
			SET @SQL_STRING = @SQL_STRING + 'INNER JOIN  STOCKCONTROL_Customer cs on scs.CustomerID = cs.CustomerID	 '
			SET @SQL_STRING = @SQL_STRING + 'LEFT JOIN  STOCKCONTROL_Deliverer od on scs.DeliveryByID = od.DelivererID '
			SET @SQL_STRING = @SQL_STRING + 'LEFT JOIN	dbo.USER_User us ON scs.OrderTakenBy = us.UserID '
			SET @SQL_STRING = @SQL_STRING + @SQL_WHERE

			EXEC(@SQL_STRING)

			RETURN
		END

	/*********************
		RETURN ALL RECORDS
	*********************/
	BEGIN
		SELECT		scs.OrderID, scs.OrderNumber, scs.CustomerOrderNumber, scs.CustomerID, scs.OrderedBy, scs.OrderDate, scs.DeliveryDate, scs.DeliveryByID, od.Deliverer DeliveryBy, scs.DeliveryNotes, scs.Comments, scs.OrderType, scs.OrderStatus, cs.CustomerName,scs.OrderTakenBy,scs.RepeatCustomerOrder,scs.RepeatDeliveryNotes	,scs.PickingStatus	 		
		,ISNULL(cs.Address1+', ','')+ISNULL(cs.Address2+', ','')+ISNULL(cs.Address3+', ','')+ISNULL(cs.Address4,'') CustomerAddress,ISNULL(cs.Postcode1+', ','') Postcode1,ISNULL(cs.Postcode2+', ','') Postcode2,ISNULL(cs.Postcode3+', ','') Postcode3,ISNULL(cs.Postcode4+', ','') Postcode4,ISNULL(cs.Postcode5+', ','') Postcode5,(us.FirstName + ' '+us.LastName) as FullName, DeliveryTo
		FROM		STOCKCONTROL_SalesOrder	scs								WITH (READUNCOMMITTED)
		INNER JOIN  STOCKCONTROL_Customer cs on scs.CustomerID = cs.CustomerID
		LEFT JOIN  STOCKCONTROL_Deliverer od on scs.DeliveryByID = od.DelivererID
		LEFT JOIN	dbo.USER_User us ON scs.OrderTakenBy = us.UserID
		ORDER BY 	scs.OrderNumber DESC

		RETURN
	END


GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_del_SalesOrder]    Script Date: 10/19/2012 21:13:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_del_SalesOrder]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_del_SalesOrder]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_del_SalesOrder]    Script Date: 10/19/2012 21:13:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
	Author:				Titu(Jr)
	Date:				

	Description:		Delete record from STOCKCONTROL_SalesOrder

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_del_SalesOrder]
---------Parameters----------
@OrderID  int,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

DECLARE @ListID INT
DECLARE @CustomerName NVARCHAR(50)

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @ErrorMsg = ''
	SET @Success = 0

	IF @OrderID  > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		OrderID 
							FROM		STOCKCONTROL_SalesOrder							WITH (READUNCOMMITTED)
							WHERE 		OrderID  = @OrderID 
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_SalesOrder - Could not find record ' + CAST(@OrderID  AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			
			DELETE STOCKCONTROL_SalesOrderDetail			WITH (ROWLOCK)
			WHERE 	OrderID  = @OrderID  
			
				
			DELETE	STOCKCONTROL_SalesOrder							WITH (ROWLOCK)
			WHERE 	OrderID  = @OrderID 
			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@OrderID  AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_del_SalesOrder',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO




/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_ins_SalesOrderDetail]    Script Date: 09/18/2012 20:28:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				Titu(Jr)
	Date:				12-Sep-2012

	Description:		Insert record in STOCKCONTROL_SalesOrder

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_ins_SalesOrderDetail]
---------Parameters----------
@OrderID int,
@ProductID int,
@Pack decimal(18,2),
@SalePrice decimal(18,2),
@Comment NVARCHAR(50) = null,
@RecordID int OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RecordID = 0
	SET @Success = 0

	
	BEGIN TRANSACTION

	/************
	INSERT RECORD
	************/	
	
	
	INSERT INTO STOCKCONTROL_SalesOrderDetail	WITH (ROWLOCK)
           (OrderID
           ,ProductID
           ,Pack
           ,SalePrice
           ,Comment
           ,UpdatedOn)
     VALUES
           (@OrderID
           ,@ProductID
           ,@Pack
           ,@SalePrice
           ,@Comment
           ,GETDATE())


		SET @RecordID = SCOPE_IDENTITY()
					
		COMMIT TRANSACTION
				        	
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_ins_SalesOrderDetail',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1


GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_del_Deliverer]    Script Date: 09/18/2012 20:28:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				Titu
	Date:				06-Sep-2012 18:23

	Description:		Delete record from STOCKCONTROL_Deliverer

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_del_Deliverer]
---------Parameters----------
@DelivererID int,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF @DelivererID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		DelivererID
							FROM		STOCKCONTROL_Deliverer							WITH (READUNCOMMITTED)
							WHERE 		DelivererID = @DelivererID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_Deliverer - Could not find record ' + CAST(@DelivererID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			DELETE	STOCKCONTROL_Deliverer							WITH (ROWLOCK)

			WHERE 	DelivererID = @DelivererID

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@DelivererID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_del_Deliverer',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_upd_Deliverer]    Script Date: 09/18/2012 20:28:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				Titu
	Date:				06-Sep-2012 18:23

	Description:		Update record in STOCKCONTROL_Deliverer

	History		Name		Date		Mod			
	=============================================================================================================================================



	=============================================================================================================================================
*/
Create PROCEDURE [dbo].[STOCKCONTROL_usp_upd_Deliverer]
---------Parameters----------
@DelivererID int,
@Deliverer nvarchar(100),
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF @DelivererID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		DelivererID
							FROM		STOCKCONTROL_Deliverer				WITH (READUNCOMMITTED)
							WHERE 		DelivererID = @DelivererID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_Deliverer - Could not find record ' + CAST(@DelivererID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			/************
			UPDATE RECORD
			************/
			UPDATE	STOCKCONTROL_Deliverer												WITH (ROWLOCK)

			SET 	Deliverer = @Deliverer

			WHERE	DelivererID = @DelivererID

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@DelivererID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_upd_Deliverer',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_ins_Deliverer]    Script Date: 09/18/2012 20:28:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				Titu
	Date:				06-Sep-2012 18:23

	Description:		Select records from STOCKCONTROL_Deliverer

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_ins_Deliverer]
---------Parameters----------
@Deliverer nvarchar(100),
@CheckDuplicates bit,
@RecordID int OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int

DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RecordID = 0
	SET @Success = 0

	IF @CheckDuplicates = 1
		BEGIN
			/***************************
			DON'T ALLOW DUPLICATE RECORD
			***************************/
			IF EXISTS	(
						SELECT 		DelivererID
						FROM		STOCKCONTROL_Deliverer						WITH (READUNCOMMITTED)
						WHERE 		Deliverer = @Deliverer
						)
			BEGIN
				SET @ErrorMsg = '##01Duplicate record ' + CAST(@Deliverer AS nvarchar(100))
				RAISERROR(@ErrorMsg,16,1)
			RETURN -1
			END
		END

	/************
	INSERT RECORD
	************/
	INSERT INTO	STOCKCONTROL_Deliverer												WITH (ROWLOCK)
			(
			Deliverer
			)
	VALUES
			(
			@Deliverer
			)

		SET @RecordID = SCOPE_IDENTITY()
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_ins_Deliverer',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_Deliverer]    Script Date: 09/18/2012 20:28:39 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				Titu
	Date:				06-Sep-2012 18:23

	Description:		Select records from STOCKCONTROL_Deliverer

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_sel_Deliverer]
---------Parameters----------
@Deliverer nvarchar(100) = NULL,
@SQL_WHERE nvarchar(4000) = NULL

AS

DECLARE @SQL_STRING nvarchar (4000)

SET NOCOUNT ON
SET DATEFORMAT dmy

	IF ISNULL(@Deliverer,'') <> '' 
		/**************************
			RETURN SPECIFIC RECORDS
		**************************/
		BEGIN
			SELECT		DelivererID, Deliverer
			FROM		STOCKCONTROL_Deliverer								WITH (READUNCOMMITTED)
			WHERE		Deliverer = @Deliverer
			ORDER BY 	Deliverer ASC

			RETURN
		END

	IF ISNULL(@SQL_WHERE,'') <> '' 
		/*********************************************
			SELECT RECORDS ACCORDING TO WHERE CRITERIA
		*********************************************/
		BEGIN
			SET @SQL_STRING = 'SELECT		DelivererID, Deliverer '
			SET @SQL_STRING = @SQL_STRING + 'FROM		STOCKCONTROL_Deliverer '
			SET @SQL_STRING = @SQL_STRING + @SQL_WHERE

			EXEC(@SQL_STRING)

			RETURN
		END

	/*********************
		RETURN ALL RECORDS
	*********************/
	BEGIN
		SELECT		DelivererID, Deliverer
		FROM		STOCKCONTROL_Deliverer								WITH (READUNCOMMITTED)
		ORDER BY 	Deliverer ASC

		RETURN
	END

GO


/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_Search_Product]    Script Date: 10/04/2012 19:39:48 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_Search_Product]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_Search_Product]
GO


/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_Search_Product]    Script Date: 10/04/2012 19:39:48 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				TR
	Date:				01/05/2012 19:06

	Description:		Select records from STOCKCONTROL_Product

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
Create PROCEDURE [dbo].[STOCKCONTROL_usp_Search_Product]
---------Parameters----------
@SQL_WHERE nvarchar(4000) = NULL

AS

DECLARE @SQL_STRING nvarchar (4000)

SET NOCOUNT ON
SET DATEFORMAT dmy

SET @SQL_STRING = 'SELECT	DISTINCT scp.ProductID, ProductCode, scp.Description, scp.CategoryID, Type, StockBy, CostPrice, SalePrice, MinimumStockLevel, Barcode1, Barcode2, BatchNumberItem, QuarantineItem, scp.Comments, scp.Active, NumberSold, TotalSalePrice, Beef, sc.Description AS CategoryDescrip,  dbo.fnGetSuppliersOfProduct(scp.ProductID) AS SupplierName,ActualMargin,RequiredMargin, IsSundriesProduct, IsCustomeProduct, scp.PieceQuantity,scp.QtyInStock,scp.Ingredients, scp.CofO, scp.PLU '

	SET @SQL_STRING = @SQL_STRING + 'FROM STOCKCONTROL_Product scp WITH (READUNCOMMITTED) '
	SET @SQL_STRING = @SQL_STRING + 'LEFT JOIN	dbo.STOCKCONTROL_Category sc ON scp.CategoryID = sc.CategoryID '
	SET @SQL_STRING = @SQL_STRING + 'LEFT JOIN dbo.STOCKCONTROL_SupplierProduct scsp on scp.ProductID=scsp.ProductID '
	SET @SQL_STRING = @SQL_STRING + 'LEFT JOIN STOCKCONTROL_Supplier sp on sp.SupplierID = scsp.SupplierID '
	--SET @SQL_STRING = @SQL_STRING + 'WHERE scp.Description is not null '									
	SET @SQL_STRING = @SQL_STRING + @SQL_WHERE
	EXEC(@SQL_STRING)
GO





/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_Customer]    Script Date: 07/26/2013 14:47:43 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_sel_Customer]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_sel_Customer]
GO



/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_Customer]    Script Date: 07/26/2013 14:47:43 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*
	Author:				TR
	Date:				01/05/2012 18:36

	Description:		Select records from STOCKCONTROL_Customer

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_sel_Customer]
---------Parameters----------
@CustomerName nvarchar(50) = NULL,
@SQL_WHERE nvarchar(4000) = NULL

AS

DECLARE @SQL_STRING nvarchar (4000)

SET NOCOUNT ON
SET DATEFORMAT dmy

	IF ISNULL(@CustomerName,'') <> '' 
		/**************************
			RETURN SPECIFIC RECORDS
		**************************/
		BEGIN
			SELECT		CustomerID , CustomerName, AccountManager, Address1, Address2, Address3, Address4, Address5, Postcode1,Postcode2,Postcode3,Postcode4,Postcode5, EmailAddress,EmailAddress2,EmailAddress3, TelNo1, ReviewDate, Comments, scc.CategoryID , Status, DeliveryDates

			FROM		STOCKCONTROL_Customer	scc								WITH (READUNCOMMITTED)
			--INNER JOIN	dbo.STOCKCONTROL_Category sc ON scc.CategoryID = sc.CategoryID
			
			WHERE		CustomerName = @CustomerName

			ORDER BY 	CustomerName ASC

			RETURN
		END

	IF ISNULL(@SQL_WHERE,'') <> '' 
		/*********************************************
			SELECT RECORDS ACCORDING TO WHERE CRITERIA
		*********************************************/
		BEGIN
			SET @SQL_STRING = 'SELECT	DISTINCT	CustomerID , CustomerName, AccountManager, Address1, Address2, Address3, Address4, Address5, Postcode1,Postcode2,Postcode3,Postcode4,Postcode5, EmailAddress,EmailAddress2,EmailAddress3, TelNo1, ReviewDate, Comments, scc.CategoryID , Status, DeliveryDates '
			SET @SQL_STRING = @SQL_STRING + 'FROM		STOCKCONTROL_Customer	scc '
			SET @SQL_STRING = @SQL_STRING + 'LEFT JOIN	dbo.STOCKCONTROL_Category sc ON scc.CategoryID = sc.CategoryID '

			SET @SQL_STRING = @SQL_STRING + @SQL_WHERE

			EXEC(@SQL_STRING)

			RETURN
		END

	/*********************
		RETURN ALL RECORDS
	*********************/
	BEGIN
		SELECT		CustomerID , CustomerName, AccountManager, Address1, Address2, Address3, Address4, Address5, Postcode1,Postcode2,Postcode3,Postcode4,Postcode5, EmailAddress,EmailAddress2,EmailAddress3, TelNo1, ReviewDate, Comments, scc.CategoryID , Status, DeliveryDates


		FROM		STOCKCONTROL_Customer	scc								WITH (READUNCOMMITTED)
		--INNER JOIN	dbo.STOCKCONTROL_Category sc ON scc.CategoryID = sc.CategoryID
		
		ORDER BY 	CustomerName ASC

		RETURN
	END



GO




--============================================================================
--Service Company related query
--============================================================================



IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_sel_ServiceCompany]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_sel_ServiceCompany]
GO

/*
	Author:				Titu(Jr)
	Date:				28/12/2012

	Description:		Select records from STOCKCONTROL_ServiceCompany

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_sel_ServiceCompany]
---------Parameters----------
@ServiceCompanyID int = NULL,
@SQL_WHERE nvarchar(4000) = NULL

AS

DECLARE @SQL_STRING nvarchar (4000)

SET NOCOUNT ON
SET DATEFORMAT dmy

	IF ISNULL(@ServiceCompanyID,0) <> 0 
		/**************************
			RETURN SPECIFIC RECORDS
		**************************/
		BEGIN
			SELECT		ServiceCompanyID, ServiceCompanyName, AccountManager, Address1, Address2, Address3, Address4, Postcode, TelNo1, TelNo2, ReviewDate, Comments, Active, ContactName
			FROM		STOCKCONTROL_ServiceCompany	scs		WITH (READUNCOMMITTED)
			WHERE		ServiceCompanyID = @ServiceCompanyID
			ORDER BY 	ServiceCompanyName ASC

			RETURN
		END

	IF ISNULL(@SQL_WHERE,'') <> '' 
		/*********************************************
			SELECT RECORDS ACCORDING TO WHERE CRITERIA
		*********************************************/
		BEGIN
			SET @SQL_STRING = 'SELECT		ServiceCompanyID, ServiceCompanyName, AccountManager, Address1, Address2, Address3, Address4, Postcode, TelNo1, TelNo2, ReviewDate, Comments, Active, ContactName '
			SET @SQL_STRING = @SQL_STRING + 'FROM	STOCKCONTROL_ServiceCompany	scs		WITH (READUNCOMMITTED)	 '			
			SET @SQL_STRING = @SQL_STRING + @SQL_WHERE

			EXEC(@SQL_STRING)

			RETURN
		END

	/*********************
		RETURN ALL RECORDS
	*********************/
	BEGIN
		SELECT		ServiceCompanyID, ServiceCompanyName, AccountManager, Address1, Address2, Address3, Address4, Postcode, TelNo1, TelNo2, ReviewDate, Comments, Active, ContactName
		FROM		STOCKCONTROL_ServiceCompany	scs		WITH (READUNCOMMITTED)		
		ORDER BY 	ServiceCompanyName ASC

		RETURN
	END

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_upd_ServiceCompany]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_upd_ServiceCompany]
GO
/*
	Author:				Titu(Jr)
	Date:				28/12/2012
	
	Description:		Update record in STOCKCONTROL_ServiceCompany

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_upd_ServiceCompany]
---------Parameters----------
@ServiceCompanyID int,
@ServiceCompanyName nvarchar(50),
@AccountManager nvarchar(50)  = NULL,
@Address1 nvarchar(50) = NULL,
@Address2 nvarchar(50) = NULL,
@Address3 nvarchar(50) = NULL,
@Address4 nvarchar(50) = NULL,
@Postcode nvarchar(8) = NULL,
@TelNo1 nvarchar(16) = NULL,
@TelNo2 nvarchar(16) = NULL,
@ContactName nvarchar(50) = NULL,
@ReviewDate datetime = NULL,
@Comments nvarchar(4000) = NULL,
@Active bit,

@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 
DECLARE @ListID INT
DECLARE @Name NVARCHAR(32)


SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg = ''

	IF @ServiceCompanyID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		ServiceCompanyID
							FROM		STOCKCONTROL_ServiceCompany				WITH (READUNCOMMITTED)
							WHERE 		ServiceCompanyID = @ServiceCompanyID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_ServiceCompany - Could not find record ' + CAST(@ServiceCompanyID AS nvarchar(10))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

		
			
			/************
			UPDATE RECORD
			************/
			UPDATE	STOCKCONTROL_ServiceCompany												WITH (ROWLOCK)

			SET 	ServiceCompanyName = @ServiceCompanyName,
					AccountManager = @AccountManager,					
					Address1 = @Address1,
					Address2 = @Address2,
					Address3 = @Address3,
					Address4 = @Address4,
					Postcode = @Postcode,
					TelNo1 = @TelNo1,
					TelNo2 = @TelNo2,
					ReviewDate = @ReviewDate,					
					Comments = @Comments,
					Active = @Active,					
					ContactName = @ContactName

			WHERE	ServiceCompanyID = @ServiceCompanyID
			
			
			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@ServiceCompanyID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_upd_ServiceCompany',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_ins_ServiceCompany]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_ins_ServiceCompany]
GO
/*
	Author:				Titu(Jr)
	Date:				28/12/2012

	Description:		Insert record in STOCKCONTROL_ServiceCompany

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_ins_ServiceCompany]
---------Parameters----------
@ServiceCompanyName nvarchar(50),
@AccountManager nvarchar(50) = NULL,
@Address1 nvarchar(50) = NULL,
@Address2 nvarchar(50) = NULL,
@Address3 nvarchar(50) = NULL,
@Address4 nvarchar(50) = NULL,
@Postcode nvarchar(8) = NULL,
@TelNo1 nvarchar(16) = NULL,
@TelNo2 nvarchar(16) = NULL,
@ContactName nvarchar(50) = NULL,
@ReviewDate datetime = NULL,
@Comments nvarchar(4000) = NULL,
@Active bit,
@CheckDuplicates bit,
@RecordID int OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 
DECLARE @SequencePosition INT
DECLARE @ListID INT
DECLARE @SequenceNo INT 
DECLARE @Name NVARCHAR(32)

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RecordID = 0
	SET @Success = 0
	SET @ErrorMsg = ''

	

	
	IF @CheckDuplicates = 1
		BEGIN
			/***************************
			DON'T ALLOW DUPLICATE RECORD
			***************************/
			IF EXISTS	(
						SELECT 		ServiceCompanyID
						FROM		STOCKCONTROL_ServiceCompany						WITH (READUNCOMMITTED)
						WHERE 		ServiceCompanyName = @ServiceCompanyName
						)
			BEGIN
				SET @ErrorMsg = '##01Duplicate record ' + @ServiceCompanyName 
				RAISERROR(@ErrorMsg,16,1)
			RETURN -1
			END
		END

	/************
	INSERT RECORD
	************/			
	INSERT INTO	STOCKCONTROL_ServiceCompany												WITH (ROWLOCK)
			(
			ServiceCompanyName, AccountManager, Address1, Address2, Address3, Address4, Postcode, TelNo1, TelNo2,  ReviewDate, Comments,  Active, ContactName
			)
	VALUES
			(
			@ServiceCompanyName, @AccountManager, @Address1, @Address2, @Address3, @Address4, @Postcode, @TelNo1, @TelNo2, @ReviewDate, @Comments,  @Active, @ContactName
			)

		SET @RecordID = SCOPE_IDENTITY()
		
		
				        	
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_ins_ServiceCompany',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_del_ServiceCompany]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_del_ServiceCompany]
GO
/*
	Author:				TR
	Date:				01/05/2012 19:40

	Description:		Delete record from STOCKCONTROL_ServiceCompany

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_del_ServiceCompany]
---------Parameters----------
@ServiceCompanyID int,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

DECLARE @ListID INT
DECLARE @SupplierName NVARCHAR(50)

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg = ''

	IF @ServiceCompanyID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		ServiceCompanyID
							FROM		STOCKCONTROL_ServiceCompany							WITH (READUNCOMMITTED)
							WHERE 		ServiceCompanyID = @ServiceCompanyID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_ServiceCompany - Could not find record ' + CAST(@ServiceCompanyID AS nvarchar(10))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END		
			
			IF EXISTS(SELECT LocationID FROM LOCATION_ObjectNew WHERE ServiceCompanyID = @ServiceCompanyID)	
			BEGIN
				SET @ErrorMsg = '##04This Service Company is used in a Location Object. So, can not be deleted.'
						RAISERROR(@ErrorMsg,16,1)
						RETURN -1
			END	
						
			DELETE	STOCKCONTROL_ServiceCompany							WITH (ROWLOCK)
			WHERE 	ServiceCompanyID = @ServiceCompanyID
			
			
			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@ServiceCompanyID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_del_ServiceCompany',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
GO

--=======================================================================================


/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_search_StockCheck]    Script Date: 10/05/2012 13:02:30 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_search_StockCheck]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_search_StockCheck]
GO

/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_search_StockCheck]    Script Date: 10/05/2012 13:02:30 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				TR
	Date:				01/05/2012 19:06

	Description:		Select records from STOCKCONTROL_Product

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_search_StockCheck]
---------Parameters----------
@SQL_WHERE nvarchar(4000) = NULL

AS

DECLARE @SQL_STRING nvarchar (4000)

SET NOCOUNT ON
SET DATEFORMAT dmy

IF ISNULL(@SQL_WHERE,'') = ''
BEGIN
		SELECT DISTINCT StockCheckID ,scsc.RackLocationID, r.RackID ,scsc.ProductID ,ScanDateTime ,Quantity ,UserName,scp.ProductCode,scsc.CheckType,scp.[Description],
		CASE CheckType
         WHEN 1 THEN 'Adhoc'
         WHEN 2 THEN 'Forced By Location'
         WHEN 3 THEN 'Forced By Product'
         ELSE ''
      END AS CheckTypeName
		FROM dbo.STOCKCONTROL_StockCheck scsc WITH (READUNCOMMITTED) 
		LEFT JOIN dbo.STOCKCONTROL_Product scp on scsc.ProductID = scp.ProductID 
		LEFT JOIN dbo.STOCKCONTROL_Rack r on scsc.RackLocationID = r.RackLocationID 		
END

SET @SQL_STRING = 'SELECT DISTINCT StockCheckID ,scsc.RackLocationID, r.RackID ,scsc.ProductID ,ScanDateTime ,Quantity ,UserName,scp.ProductCode,scsc.CheckType,scp.[Description], '
    SET @SQL_STRING = @SQL_STRING + 'CASE CheckType WHEN 1 THEN ''Adhoc'' WHEN 2 THEN ''Forced By Location'' WHEN 3 THEN ''Forced By Product'' ELSE '''' END AS CheckTypeName '
	SET @SQL_STRING = @SQL_STRING + ' FROM dbo.STOCKCONTROL_StockCheck scsc WITH (READUNCOMMITTED) '
	SET @SQL_STRING = @SQL_STRING + 'LEFT JOIN dbo.STOCKCONTROL_Product scp on scsc.ProductID = scp.ProductID '
	SET @SQL_STRING = @SQL_STRING + 'LEFT JOIN dbo.STOCKCONTROL_Rack r on scsc.RackLocationID = r.RackLocationID '
	--SET @SQL_STRING = @SQL_STRING + 'where StockCheckID is not null '							
	SET @SQL_STRING = @SQL_STRING + @SQL_WHERE
	PRINT(@SQL_STRING)
	EXEC(@SQL_STRING)
GO



/****** Object:  StoredProcedure [dbo].[REPORT_usp_SalesOrderProducts]    Script Date: 10/24/2012 14:28:33 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[REPORT_usp_SalesOrderProducts]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[REPORT_usp_SalesOrderProducts]
GO


/****** Object:  StoredProcedure [dbo].[REPORT_usp_SalesOrderProducts]    Script Date: 10/24/2012 14:28:33 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
	Author:				Titu(Jr)
	Date:				22/10/2012 
	Description:		Select ordered products of a single product

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/


Create PROCEDURE [dbo].[REPORT_usp_SalesOrderProducts]

---------Parameters----------
@SalesOrderId INT 

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)
DECLARE @SQL NVARCHAR(MAX)
BEGIN TRY
	SET @ErrorMsg = ''
--	SET @Success = 0

	SELECT pr.[Description], pr.ProductCode,
	CASE pr.[Type] WHEN 'Weight' THEN so.Pack ELSE NULL END AS 'Weight' ,
	CASE  WHEN pr.[Type] <> 'Weight' THEN so.Pack ELSE NULL END AS 'Qty',
	so.Comment
	FROM
	dbo.STOCKCONTROL_SalesOrderDetail so
	INNER JOIN dbo.STOCKCONTROL_Product pr on so.ProductID = pr.ProductID
	WHERE so.OrderID = @SalesOrderId
	

	
--	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) <> '##'
		BEGIN	
			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[REPORT_usp_SalesOrderProducts]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1


GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_ins_Recipe]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_ins_Recipe]
GO

--======================================Recipe query========================================================
/*
	Author:				Titu(Jr)
	Date:				09-Nov-2012

	Description:		Insert record in STOCKCONTROL_Recipe

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
Create PROCEDURE [dbo].[STOCKCONTROL_usp_ins_Recipe]
---------Parameters----------
@Description nvarchar(100),
@RecordID int OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 
DECLARE @Name NVARCHAR(32)
--DECLARE @OrderNumber NVARCHAR(20)

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RecordID = 0
	SET @Success = 0
	SET @ErrorMsg = ''
	
	BEGIN TRANSACTION

	/************
	INSERT RECORD
	************/	
	
	INSERT INTO STOCKCONTROL_Recipe	WITH (ROWLOCK)
           (
           [Description]
           )
     VALUES
           (
           @Description
           )


		SET @RecordID = SCOPE_IDENTITY()
					
		COMMIT TRANSACTION
				        	
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_ins_Recipe',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_upd_Recipe]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_upd_Recipe]
GO

/*
	Author:				Titu(Jr)
	Date:				09-Nov-2012 

	Description:		Update record in STOCKCONTROL_Recipe

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_upd_Recipe]
---------Parameters----------
@RecipeID int,
@Description nvarchar(100),
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg = ''

	IF @RecipeID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		RecipeID
							FROM		STOCKCONTROL_Recipe				WITH (READUNCOMMITTED)
							WHERE 		RecipeID = @RecipeID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_Recipe - Could not find record ' + CAST(@RecipeID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			/************
			UPDATE RECORD
			************/
			UPDATE	STOCKCONTROL_Recipe		WITH (ROWLOCK)
			SET 	Description = @Description
			WHERE	RecipeID = @RecipeID
			
			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@RecipeID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_upd_Recipe',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
	
GO	


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_del_Recipe]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_del_Recipe]
GO

/*
	Author:				Titu(Jr)
	Date:				10-Nov-2012 18:23

	Description:		Delete record from STOCKCONTROL_Recipe

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_del_Recipe]
---------Parameters----------
@RecipeID int,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg = ''

	IF @RecipeID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		RecipeID
							FROM		STOCKCONTROL_Recipe			WITH (READUNCOMMITTED)
							WHERE 		RecipeID = @RecipeID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_Recipe - Could not find record ' + CAST(@RecipeID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END
			
			DELETE STOCKCONTROL_RecipeProduct WITH (ROWLOCK)
			WHERE	RecipeID = @RecipeID


			DELETE	STOCKCONTROL_Recipe							WITH (ROWLOCK)

			WHERE 	RecipeID = @RecipeID

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@RecipeID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_del_Recipe',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_ins_RecipeProduct]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_ins_RecipeProduct]
GO

/*
	Author:				Titu(Jr)
	Date:				09-Nov-2012

	Description:		Insert record in STOCKCONTROL_RecipeProduct

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_ins_RecipeProduct]
---------Parameters----------
@RecipeID int,
@ProductID int,
@Quantity decimal(18,2),
@RecordID int OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RecordID = 0
	SET @Success = 0
	SET @ErrorMsg = ''

	
	BEGIN TRANSACTION

	/************
	INSERT RECORD
	************/	
		
	INSERT INTO STOCKCONTROL_RecipeProduct	WITH (ROWLOCK)
           (RecipeID
           ,ProductID
           ,Quantity)
     VALUES
           (@RecipeID
           ,@ProductID
           ,@Quantity)


		SET @RecordID = SCOPE_IDENTITY()
					
		COMMIT TRANSACTION
				        	
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_ins_RecipeProduct',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
	
GO	


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_ins_FinishedProductItem]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_ins_FinishedProductItem]
GO

/*
	Author:				Titu(Jr)
	Date:				25-Apr-2014

	Description:		Insert record in STOCKCONTROL_FinishedProductItem

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_ins_FinishedProductItem]
---------Parameters----------
@FinishedProductID int,
@ProductID int,
@Quantity decimal(18,2) = NULL,
@RecordID int OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RecordID = 0
	SET @Success = 0
	SET @ErrorMsg = ''
	
	BEGIN TRANSACTION

	/************
	INSERT RECORD
	************/	
		
	INSERT INTO STOCKCONTROL_FinishedProductItem	WITH (ROWLOCK)
           (FinishedProductID
           ,ProductID
           ,Quantity)
     VALUES
           (@FinishedProductID
           ,@ProductID
           ,@Quantity)


		SET @RecordID = SCOPE_IDENTITY()
					
		COMMIT TRANSACTION
				        	
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_ins_FinishedProductItem',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
	
GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_upd_RecipeProduct]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_upd_RecipeProduct]
GO

/*
	Author:				Titu(Jr)
	Date:				09-Nov-2012 

	Description:		Update record in STOCKCONTROL_RecipeProduct

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_upd_RecipeProduct]
---------Parameters----------
@RecipeProductID int,
@RecipeId int,
@ProductId int,
@Quantity decimal(18,2),
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg = ''

	IF @RecipeID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		RecipeID
							FROM		STOCKCONTROL_RecipeProduct				WITH (READUNCOMMITTED)
							WHERE 		RecipeProductID = @RecipeProductID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_RecipeProduct - Could not find record ' + CAST(@RecipeProductID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			/************
			UPDATE RECORD
			************/
			UPDATE	STOCKCONTROL_RecipeProduct		WITH (ROWLOCK)
			SET 	RecipeID = @RecipeID,
					ProductID = @ProductId,
					Quantity = @Quantity
					
			WHERE	RecipeProductID = @RecipeProductID
			
			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@RecipeProductID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_upd_RecipeProduct',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
	
GO	



IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_upd_FinishedProductItem]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_upd_FinishedProductItem]
GO

/*
	Author:				Titu(Jr)
	Date:				25-Apr-2014 

	Description:		Update record in STOCKCONTROL_RecipeProduct

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_upd_FinishedProductItem]
---------Parameters----------
@ID int,
@FinishedProductID int,
@ProductID int,
@Quantity decimal(18,2) = NULL,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg = ''

	IF @ID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		FinishedProductID
							FROM		STOCKCONTROL_FinishedProductItem				WITH (READUNCOMMITTED)
							WHERE 		ID = @ID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_FinishedProductItem - Could not find record ' + CAST(@ID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			/************
			UPDATE RECORD
			************/
			UPDATE	STOCKCONTROL_FinishedProductItem		WITH (ROWLOCK)
			SET 	FinishedProductID = @FinishedProductID,
					ProductID = @ProductID,
					Quantity = @Quantity
					
			WHERE	ID = @ID
			
			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@ID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_upd_FinishedProductItem',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
	
GO	


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_del_RecipeProduct]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_del_RecipeProduct]
GO

/*
	Author:				Titu(Jr)
	Date:				10-Nov-2012 18:23

	Description:		Delete record from STOCKCONTROL_RecipeProduct

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_del_RecipeProduct]
---------Parameters----------
@RecipeProductID int,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg = ''

	IF @RecipeProductID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		RecipeProductID
							FROM		STOCKCONTROL_RecipeProduct			WITH (READUNCOMMITTED)
							WHERE 		RecipeProductID = @RecipeProductID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_RecipeProduct - Could not find record ' + CAST(@RecipeProductID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			DELETE	STOCKCONTROL_RecipeProduct							WITH (ROWLOCK)

			WHERE 	RecipeProductID = @RecipeProductID

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@RecipeProductID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_del_RecipeProduct',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_del_FinishedProductItem]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_del_FinishedProductItem]
GO

/*
	Author:				Titu(Jr)
	Date:				10-Apr-2014 
	Description:		Delete record from STOCKCONTROL_FinishedProductItem

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_del_FinishedProductItem]
---------Parameters----------
@ID int,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg = ''

	IF @ID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		ID
							FROM		STOCKCONTROL_FinishedProductItem			WITH (READUNCOMMITTED)
							WHERE 		ID = @ID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_FinishedProductItem - Could not find record ' + CAST(@ID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			DELETE	STOCKCONTROL_FinishedProductItem							WITH (ROWLOCK)

			WHERE 	ID = @ID

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@ID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_del_FinishedProductItem',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fnGetProductsOfRecipe]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[fnGetProductsOfRecipe]
GO


/*
	Author:				Titu(Jr)
	Date:				09-Nov-2012

	Description:		select products of a recipe

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE FUNCTION [dbo].[fnGetProductsOfRecipe] ( @RecipeID INT ) 
RETURNS NVARCHAR(MAX)
AS
BEGIN

-- define the last customer ID handled
DECLARE @LastID INT
SET @LastID = 0

-- define the customer ID to be handled now
DECLARE @IDToHandle INT
DECLARE @Product NVARCHAR(MAX)
DECLARE @Products NVARCHAR(MAX)

SET @Products = NULL


-- select the next customer to handle    
SELECT TOP 1 @IDToHandle = rp.RecipeProductID, @Product= p.[Description]+'('+CONVERT(nvarchar,cast(rp.Quantity as float))+')' 
FROM dbo.STOCKCONTROL_Product p
INNER JOIN dbo.STOCKCONTROL_RecipeProduct rp on p.ProductID = rp.ProductID
WHERE rp.RecipeProductID > @LastID AND rp.RecipeID = @RecipeID
ORDER BY rp.RecipeProductID ASC



SET @LastID = @IDToHandle
SET @Products = ISNULL(@Product,'')

-- as long as we have customers......    
WHILE @IDToHandle IS NOT NULL
BEGIN
    -- call your sproc

    -- set the last customer handled to the one we just handled
    SET @LastID = @IDToHandle
    SET @IDToHandle = NULL
       

    -- select the next customer to handle    
    SELECT TOP 1 @IDToHandle = rp.RecipeProductID, @Product= p.[Description]+'('+CONVERT(nvarchar,cast(rp.Quantity as float))+')'
	FROM dbo.STOCKCONTROL_Product p
	INNER JOIN dbo.STOCKCONTROL_RecipeProduct rp on p.ProductID = rp.ProductID
	WHERE rp.RecipeProductID > @LastID AND rp.RecipeID = @RecipeID
	ORDER BY rp.RecipeProductID ASC
	
	IF @IDToHandle IS NOT NULL
		SET @Products = ISNULL(@Products,'') + ', ' + ISNULL(@Product,'')
END

RETURN @Products

END

GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_sel_Recipe]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_sel_Recipe]
GO

/*
	Author:				Titu(Jr)
	Date:				09-Nov-2012

	Description:		Select records from STOCKCONTROL_Recipe

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_sel_Recipe]
---------Parameters----------
@RecipeID INT,
@SQL_WHERE nvarchar(4000) = NULL

AS

DECLARE @SQL_STRING nvarchar (4000)

SET NOCOUNT ON
SET DATEFORMAT dmy

	IF @RecipeID <> 0 
		/**************************
			RETURN SPECIFIC RECORDS
		**************************/
		BEGIN
			SELECT		rcp.RecipeID, rcp.Description, dbo.fnGetProductsOfRecipe(rcp.RecipeID) Products
			FROM		STOCKCONTROL_Recipe	rcp							WITH (READUNCOMMITTED)			
			WHERE		rcp.RecipeID = @RecipeID
			ORDER BY 	rcp.RecipeID ASC
			
			RETURN
		END

	IF ISNULL(@SQL_WHERE,'') <> '' 
		/*********************************************
			SELECT RECORDS ACCORDING TO WHERE CRITERIA
		*********************************************/
		BEGIN
			SET @SQL_STRING = 'SELECT		rcp.RecipeID, rcp.Description, dbo.fnGetProductsOfRecipe(rcp.RecipeID) Products '			
			SET @SQL_STRING = @SQL_STRING + 'FROM		STOCKCONTROL_Recipe	rcp	 '
			SET @SQL_STRING = @SQL_STRING + @SQL_WHERE

			EXEC(@SQL_STRING)

			RETURN
		END

	/*********************
		RETURN ALL RECORDS
	*********************/
	BEGIN
			SELECT		rcp.RecipeID, rcp.Description, dbo.fnGetProductsOfRecipe(rcp.RecipeID) Products
			FROM		STOCKCONTROL_Recipe	rcp							WITH (READUNCOMMITTED)			
			ORDER BY 	rcp.RecipeID ASC
		RETURN
	END
	
GO	




/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_RecipeProduct]    Script Date: 12/12/2012 19:45:41 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_sel_RecipeProduct]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_sel_RecipeProduct]
GO



/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_RecipeProduct]    Script Date: 12/12/2012 19:45:41 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
	Author:				Titu(Jr)
	Date:				09-Nov-2012

	Description:		Select records from STOCKCONTROL_RecipeProduct

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_sel_RecipeProduct]
---------Parameters----------
@RecipeID INT

AS

SET NOCOUNT ON
SET DATEFORMAT dmy

SELECT		CASE WHEN  rp.ProductID > 0  THEN 1 ELSE 0 END AS [Select], 
rp.RecipeProductID, rp.RecipeID, rp.Quantity ,
p.ProductID, p.ProductCode, p.Description AS ProductDescription, p.StockBy AS ProductStockBy,p.[Type] AS ProductType ,p.SalePrice AS ProductSalePrice

FROM		STOCKCONTROL_Product p								WITH (READUNCOMMITTED)
LEFT JOIN	dbo.STOCKCONTROL_RecipeProduct rp ON p.ProductID = rp.ProductID AND rp.RecipeID = @RecipeID
where p.IsCustomeProduct=1
ORDER BY 	rp.ProductID desc, p.Description ASC


GO



IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_sel_FinishedProductItems]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_sel_FinishedProductItems]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/*
	Author:				Titu(Jr)
	Date:				24-Apr-2014

	Description:		Select records from STOCKCONTROL_FinishedProductItems

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_sel_FinishedProductItems]
---------Parameters----------
@FinishProductID INT

AS

SET NOCOUNT ON
SET DATEFORMAT dmy

SELECT		CASE WHEN  rp.ProductID > 0  THEN 1 ELSE 0 END AS [Select], 
rp.ID, rp.FinishedProductID, rp.Quantity ,
p.ProductID, p.ProductCode, p.Description AS ProductDescription, p.StockBy AS ProductStockBy,p.[Type] AS ProductType ,p.SalePrice AS ProductSalePrice

FROM		STOCKCONTROL_Product p								WITH (READUNCOMMITTED)
LEFT JOIN	dbo.STOCKCONTROL_FinishedProductItem rp ON p.ProductID = rp.ProductID AND rp.FinishedProductID = @FinishProductID
WHERE p.IsSundriesProduct = 1 AND p.ProductID <> @FinishProductID
ORDER BY 	rp.ProductID desc, p.Description ASC

GO



/****** Object:  StoredProcedure [dbo].[REPORT_usp_Purchase_Order_Forms]    Script Date: 11/13/2012 20:26:37 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[REPORT_usp_Purchase_Order_Forms]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[REPORT_usp_Purchase_Order_Forms]
GO


/****** Object:  StoredProcedure [dbo].[REPORT_usp_Purchase_Order_Forms]    Script Date: 11/13/2012 20:26:38 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				Palash
	Date:				13/11/2012 
	Description:		Select Purchase Order Forms of a single supplier

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/


CREATE PROCEDURE [dbo].[REPORT_usp_Purchase_Order_Forms]

---------Parameters----------
@SupplierId INT 

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)
DECLARE @SQL NVARCHAR(MAX)
BEGIN TRY
	SET @ErrorMsg = ''
--	SET @Success = 0
if @SupplierId>0 
	begin
		SELECT scsp.ProductID,scp.ProductCode,scp.Description,cat.Description Category,scp.StockBy
		FROM STOCKCONTROL_SupplierProduct scsp
		inner join STOCKCONTROL_Supplier scs on scsp.SupplierID=scs.SupplierID
		inner join STOCKCONTROL_Product scp on scsp.ProductID=scp.ProductID	
		LEFT JOIN STOCKCONTROL_Category cat on scp.CategoryID = cat.CategoryID		
		where scsp.SupplierID=@SupplierId AND scp.IsSundriesProduct = 1
		ORDER BY scp.Description
	end
ELSE
	BEGIN 
		SELECT scp.ProductID,scp.ProductCode,scp.Description,cat.Description Category,scp.StockBy
		FROM 
		--STOCKCONTROL_SupplierProduct scsp
		--inner join STOCKCONTROL_Supplier scs on scsp.SupplierID=scs.SupplierID
		--inner join 
		STOCKCONTROL_Product scp --on scsp.ProductID=scp.ProductID
		LEFT JOIN STOCKCONTROL_Category cat on scp.CategoryID = cat.CategoryID
		ORDER BY scp.Description
	END
	

	
--	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) <> '##'
		BEGIN	
			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[REPORT_usp_Purchase_Order_Forms]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1



GO

--================================================================================================================================
--Purchase Order related Stored Procedures
--================================================================================================================================

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_ins_PurchaseOrder]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_ins_PurchaseOrder]
GO

/*
	Author:				Titu(Jr)
	Date:				10-Nov-2012

	Description:		Insert record in STOCKCONTROL_PurchaseOrder

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_ins_PurchaseOrder]
---------Parameters----------
@SupplierID int,
@OrderedBy nvarchar(16),
@OrderDate datetime,
@ReceivedByDate datetime,
@Comments nvarchar(200),
@OrderStatus int,
@FilePath nvarchar(300)=NULL,
@FilePath2 nvarchar(300)=NULL,
@FilePath3 nvarchar(300)=NULL,
@RecordID int OUTPUT,
@Success bit OUTPUT,
@PONumber NVARCHAR(20) OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 
DECLARE @Name NVARCHAR(32)
--DECLARE @PONumber NVARCHAR(20)

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RecordID = 0
	SET @Success = 0
	SET @ErrorMsg =''
	
	BEGIN TRANSACTION

	/************
	INSERT RECORD
	************/	
	DECLARE @min INT
	DECLARE @max INT
	DECLARE @count INT

	SELECT  @max = ISNULL( MAX(Convert(int, PONumber)), 0), @count = ISNULL(COUNT(PONumber),0)
	FROM STOCKCONTROL_PurchaseOrder
	
	SET @min = 1
	
	IF @count = @max
		BEGIN
			SELECT @PONumber = ISNULL( MAX(Convert(INT, PONumber)), 0)+1 FROM STOCKCONTROL_PurchaseOrder	
		END
	ELSE
		BEGIN
			WHILE @min < @max
			BEGIN
			   IF NOT EXISTS (SELECT * FROM STOCKCONTROL_PurchaseOrder WHERE PONumber = RIGHT( '00000'+ CONVERT(nvarchar(20), @min),6))
					BREAK
			   SET @min = @min + 1
			END
			
			SET @PONumber = @min
		END	

			
	
	SET @PONumber = RIGHT( '00000'+ CONVERT(nvarchar(20), @PONumber),6)
	INSERT INTO STOCKCONTROL_PurchaseOrder	WITH (ROWLOCK)
           ([PONumber]			
           ,[SupplierID]
           ,[OrderedBy]
           ,[OrderDate]
           ,[ReceivedByDate]
           ,[Comments]
           ,[OrderStatus]
           ,[FilePath]
           ,[FilePath2]
           ,[FilePath3]
           ,UpdatedOn)
     VALUES
           ( @PONumber
           ,@SupplierID
           ,@OrderedBy
           ,@OrderDate
           ,@ReceivedByDate
           ,@Comments
           ,@OrderStatus
           ,@FilePath
           ,@FilePath2
           ,@FilePath3
           ,GETDATE())


		SET @RecordID = SCOPE_IDENTITY()
					
		COMMIT TRANSACTION
				        	
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_ins_PurchaseOrder',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1



GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_upd_PurchaseOrder]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_upd_PurchaseOrder]
GO

/*
	Author:				Titu(Jr)
	Date:				10-Nov-2012 

	Description:		Update record in STOCKCONTROL_PurchaseOrder

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_upd_PurchaseOrder]
---------Parameters----------
@POID int,
@SupplierID int,
@OrderedBy nvarchar(100),
@ReceivedByDate datetime,
@Comments nvarchar(200),
@FilePath nvarchar(300)=NULL,
@FilePath2 nvarchar(300)=NULL,
@FilePath3 nvarchar(300)=NULL,
@OrderStatus int,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg =''

	IF @POID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		POID
							FROM		STOCKCONTROL_PurchaseOrder				WITH (READUNCOMMITTED)
							WHERE 		POID = @POID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_PurchaseOrder - Could not find record ' + CAST(@POID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			/************
			UPDATE RECORD
			************/
			UPDATE	STOCKCONTROL_PurchaseOrder		WITH (ROWLOCK)

			SET 	SupplierID = @SupplierID,
					OrderedBy = @OrderedBy,
					ReceivedByDate = @ReceivedByDate,
					Comments = @Comments,
					OrderStatus = @OrderStatus ,
					FilePath = @FilePath,
					FilePath2 = @FilePath2,
					FilePath3 = @FilePath3,
					UpdatedOn = GETDATE()
			WHERE	POID = @POID
			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@POID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_upd_PurchaseOrder',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_sel_PurchaseOrder]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_sel_PurchaseOrder]
GO

/*
	Author:				Titu(Jr)
	Date:				10-Nov-2012

	Description:		Select records from STOCKCONTROL_PurchaseOrder

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_sel_PurchaseOrder]
---------Parameters----------
@POID INT,
@SQL_WHERE nvarchar(4000) = NULL

AS

DECLARE @SQL_STRING nvarchar (4000)

SET NOCOUNT ON
SET DATEFORMAT dmy

	IF @POID <> 0 
		/**************************
			RETURN SPECIFIC RECORDS
		**************************/
		BEGIN
			SELECT		po.POID, po.PONumber, po.SupplierID, po.OrderedBy, po.OrderDate, po.ReceivedByDate, po.Comments,  po.OrderStatus, cs.SupplierName ,po.FilePath,po.FilePath2,po.FilePath3,po.Status,po.BookedIn,po.BookedBy
			FROM		STOCKCONTROL_PurchaseOrder	po								WITH (READUNCOMMITTED)
			INNER JOIN  STOCKCONTROL_Supplier cs on po.SupplierID = cs.SupplierID
			WHERE		po.POID = @POID
			ORDER BY 	po.PONumber DESC
			
			RETURN
		END

	IF ISNULL(@SQL_WHERE,'') <> '' 
		/*********************************************
			SELECT RECORDS ACCORDING TO WHERE CRITERIA
		*********************************************/
		BEGIN
			SET @SQL_STRING = 'SELECT		po.POID, po.PONumber, po.SupplierID, po.OrderedBy, po.OrderDate, po.ReceivedByDate, po.Comments,  po.OrderStatus, cs.SupplierName,po.FilePath,po.FilePath2,po.FilePath3,po.Status,po.BookedIn,po.BookedBy '			
			SET @SQL_STRING = @SQL_STRING + 'FROM		STOCKCONTROL_PurchaseOrder	po	'
			SET @SQL_STRING = @SQL_STRING + 'INNER JOIN  STOCKCONTROL_Supplier cs on po.SupplierID = cs.SupplierID	 '
			SET @SQL_STRING = @SQL_STRING + @SQL_WHERE

			EXEC(@SQL_STRING)

			RETURN
		END

	/*********************
		RETURN ALL RECORDS
	*********************/
	BEGIN
		SELECT		po.POID, po.PONumber, po.SupplierID, po.OrderedBy, po.OrderDate, po.ReceivedByDate, po.Comments,  po.OrderStatus, cs.SupplierName ,po.FilePath,po.FilePath2,po.FilePath3,po.Status,po.BookedIn,po.BookedBy
			FROM		STOCKCONTROL_PurchaseOrder	po								WITH (READUNCOMMITTED)
			INNER JOIN  STOCKCONTROL_Supplier cs on po.SupplierID = cs.SupplierID
			ORDER BY 	po.PONumber DESC

		RETURN
	END


GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_del_PurchaseOrder]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_del_PurchaseOrder]
GO

/*
	Author:				Titu(Jr)
	Date:				10-Nov-2012
	Description:		Delete record from STOCKCONTROL_PurchaseOrder

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_del_PurchaseOrder]
---------Parameters----------
@POID  int,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

DECLARE @ListID INT
DECLARE @CustomerName NVARCHAR(50)

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @ErrorMsg = ''
	SET @Success = 0

	IF @POID  > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		POID 
							FROM		STOCKCONTROL_PurchaseOrder							WITH (READUNCOMMITTED)
							WHERE 		POID  = @POID 
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_PurchaseOrder - Could not find record ' + CAST(@POID  AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			
			DELETE STOCKCONTROL_PurchaseOrderDetail			WITH (ROWLOCK)
			WHERE 	POID  = @POID  
			
				
			DELETE	STOCKCONTROL_PurchaseOrder							WITH (ROWLOCK)
			WHERE 	POID  = @POID 
			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@POID  AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_del_PurchaseOrder',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_ins_PurchaseOrderDetail]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_ins_PurchaseOrderDetail]
GO

/*
	Author:				Titu(Jr)
	Date:				10-Nov-2012

	Description:		Insert record in STOCKCONTROL_PurchaseOrder

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_ins_PurchaseOrderDetail]
---------Parameters----------
@POID int,
@ProductID int,
@Quantity decimal(18,2),
@CostPrice decimal(18,2),
@Comment NVARCHAR(50) = null,
@RecordID int OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RecordID = 0
	SET @Success = 0
	SET @ErrorMsg =''
	
	BEGIN TRANSACTION

	/************
	INSERT RECORD
	************/	
	
	
	INSERT INTO STOCKCONTROL_PurchaseOrderDetail	WITH (ROWLOCK)
           (POID
           ,ProductID
           ,Quantity
           ,CostPrice,
            Comment,
            UpdatedOn
           )
     VALUES
           (@POID
           ,@ProductID
           ,@Quantity
           ,@CostPrice,
           @Comment,
           GETDATE()
           )


		SET @RecordID = SCOPE_IDENTITY()
					
		COMMIT TRANSACTION
				        	
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_ins_PurchaseOrderDetail',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1


GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_upd_PurchaseOrderDetail]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_upd_PurchaseOrderDetail]
GO

/*
	Author:				Titu(Jr)
	Date:				10-Nov-2012 

	Description:		Update record in STOCKCONTROL_usp_upd_PurchaseOrderDetail

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
Create PROCEDURE [dbo].[STOCKCONTROL_usp_upd_PurchaseOrderDetail]
---------Parameters----------
@PODetailID int,
@POID int,
@ProductID int,
@Quantity decimal(18,2),
@CostPrice decimal(18,2),
@Comment NVARCHAR(50) =  null,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg =''
	
	IF @PODetailID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		PODetailID
							FROM		STOCKCONTROL_PurchaseOrderDetail				WITH (READUNCOMMITTED)
							WHERE 		PODetailID = @PODetailID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_PurchaseOrderDetail - Could not find record ' + CAST(@PODetailID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			/************
			UPDATE RECORD
			************/
			UPDATE	STOCKCONTROL_PurchaseOrderDetail		WITH (ROWLOCK)

			SET 	POID = @POID,
					ProductID = @ProductID,
					Quantity = @Quantity,
					CostPrice = @CostPrice,
					Comment = @Comment,
					UpdatedOn = GETDATE()

			WHERE	PODetailID = @PODetailID
			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@PODetailID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_upd_PurchaseOrderDetail',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_del_PurchaseOrderDetail]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_del_PurchaseOrderDetail]
GO


/*
	Author:				Titu
	Date:				10-Nov-2012

	Description:		Delete record from STOCKCONTROL_PurchaseOrderDetail

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
Create PROCEDURE [dbo].[STOCKCONTROL_usp_del_PurchaseOrderDetail]
---------Parameters----------
@PODetailID int,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg =''

	IF @PODetailID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		PODetailID
							FROM		STOCKCONTROL_PurchaseOrderDetail							WITH (READUNCOMMITTED)
							WHERE 		PODetailID = @PODetailID
							)
			BEGIN
				SET @ErrorMsg = '##01Table STOCKCONTROL_PurchaseOrderDetail - Could not find record ' + CAST(@PODetailID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			DELETE	STOCKCONTROL_PurchaseOrderDetail							WITH (ROWLOCK)

			WHERE 	PODetailID = @PODetailID

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@PODetailID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'STOCKCONTROL_usp_del_PurchaseOrderDetail',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_sel_PurchaseOrderDetail]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_sel_PurchaseOrderDetail]
GO

/*
	Author:				Titu(Jr)
	Date:				10-Nov-2012

	Description:		Select records from STOCKCONTROL_PurchaseOrderDetail

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_sel_PurchaseOrderDetail]
---------Parameters----------
@POID INT,
@SupplierID INT,
@Select BIT

AS

DECLARE @SQL_STRING nvarchar (4000)

SET NOCOUNT ON
SET DATEFORMAT dmy

	IF @SupplierID = 0
		BEGIN
			SELECT DISTINCT CASE WHEN  pod.PODetailID > 0  THEN 1 ELSE 0 END AS [Select], pod.PODetailID, pod.POID, ISNULL(pod.Quantity,0) Quantity,pod.Comment,pod.ReceivedQuantity,
			p.ProductID, CASE WHEN  pod.PODetailID > 0  THEN pod.CostPrice ELSE p.CostPrice END AS [CostPrice],
			p.[Description] as ProductDescription, p.StockBy ProductStockBy, p.[Type] ProductType,
			CASE WHEN  pod.PODetailID > 0 THEN pod.Quantity*pod.CostPrice ELSE 0 END AS TotalCostPrice 
			FROM 
			STOCKCONTROL_PurchaseOrderDetail pod
			INNER JOIN dbo.STOCKCONTROL_Product p ON pod.ProductID = p.ProductID
			WHERE pod.POID = @POID	
			UNION ALL
			SELECT  DISTINCT CASE WHEN  pod.PODetailID > 0  THEN 1 ELSE 0 END AS [Select], pod.PODetailID, pod.POID, ISNULL(pod.Quantity,0) Quantity,pod.Comment,pod.ReceivedQuantity,
			p.ProductID, CASE WHEN  pod.PODetailID > 0  THEN pod.CostPrice ELSE p.CostPrice END AS [CostPrice],
			p.[Description] as ProductDescription, p.StockBy ProductStockBy, p.[Type] ProductType,
			CASE WHEN  pod.PODetailID > 0 THEN pod.Quantity*pod.CostPrice ELSE 0 END AS TotalCostPrice 
			FROM 
			dbo.STOCKCONTROL_Product p
			Left JOIN dbo.STOCKCONTROL_PurchaseOrderDetail pod ON pod.ProductID = p.ProductID AND pod.POID = @POID
			WHERE p.IsSundriesProduct = 1 AND p.Active = 1 AND (@SupplierID = 0) AND PODetailID IS NULL
		END	
	ELSE
	BEGIN
		SELECT DISTINCT CASE WHEN  pod.PODetailID > 0  THEN 1 ELSE 0 END AS [Select], pod.PODetailID, pod.POID, ISNULL(pod.Quantity,0) Quantity,pod.Comment,pod.ReceivedQuantity,
		p.ProductID, CASE WHEN  pod.PODetailID > 0  THEN pod.CostPrice ELSE p.CostPrice END AS [CostPrice],
		p.[Description] as ProductDescription, p.StockBy ProductStockBy, p.[Type] ProductType,
		CASE WHEN  pod.PODetailID > 0 THEN pod.Quantity*pod.CostPrice ELSE 0 END AS TotalCostPrice 
		FROM 
		STOCKCONTROL_PurchaseOrderDetail pod
		INNER JOIN dbo.STOCKCONTROL_Product p ON pod.ProductID = p.ProductID
		WHERE pod.POID = @POID
		UNION ALL
		SELECT  DISTINCT CASE WHEN  pod.PODetailID > 0  THEN 1 ELSE 0 END AS [Select], pod.PODetailID, pod.POID, ISNULL(pod.Quantity,0) Quantity,pod.Comment,pod.ReceivedQuantity,
		p.ProductID, CASE WHEN  pod.PODetailID > 0  THEN pod.CostPrice ELSE p.CostPrice END AS [CostPrice],
		p.[Description] as ProductDescription, p.StockBy ProductStockBy, p.[Type] ProductType,
		CASE WHEN  pod.PODetailID > 0 THEN pod.Quantity*pod.CostPrice ELSE 0 END AS TotalCostPrice 
		FROM 
		dbo.STOCKCONTROL_SupplierProduct sp
		LEFT JOIN dbo.STOCKCONTROL_PurchaseOrderDetail pod ON sp.ProductID = pod.ProductID AND pod.POID = @POID
		INNER JOIN dbo.STOCKCONTROL_Product p ON sp.ProductID = p.ProductID
		WHERE (sp.SupplierID =@SupplierID ) AND PODetailID IS NULL AND (pod.PODetailID > 0 OR @Select = 0)
	END

GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[REPORT_usp_PurchaseOrderProducts]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[REPORT_usp_PurchaseOrderProducts]
GO


/*
	Author:				Titu(Jr)
	Date:				14/11/2012 
	Description:		Select ordered products of a single purchase order

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/


Create PROCEDURE [dbo].[REPORT_usp_PurchaseOrderProducts]

---------Parameters----------
@PurchaseOrderId INT 

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)
DECLARE @SQL NVARCHAR(MAX)
BEGIN TRY
	SET @ErrorMsg = ''
--	SET @Success = 0

	SELECT pr.[Description], 
	CASE pr.[Type] WHEN 'Weight' THEN po.Quantity ELSE NULL END AS 'Weight' ,
	CASE  WHEN pr.[Type] <> 'Weight' THEN po.Quantity ELSE NULL END AS 'Qty',
	po.Comment,po.CostPrice
	FROM
	dbo.STOCKCONTROL_PurchaseOrderDetail po
	INNER JOIN dbo.STOCKCONTROL_Product pr on po.ProductID = pr.ProductID
	WHERE po.POID = @PurchaseOrderId
	

	
--	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) <> '##'
		BEGIN	
			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[REPORT_usp_PurchaseOrderProducts]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1



GO



--================================================================================================================================
--Purchase Order related Stored Procedures END
--================================================================================================================================


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_upd_ProductQuantityInStock]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_upd_ProductQuantityInStock]
GO

/*
	Author:				Titu(Jr)
	Date:				01-Apr-2013 
	Description:		Update Product QuantityInStock

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/


Create PROCEDURE [dbo].[STOCKCONTROL_usp_upd_ProductQuantityInStock]

---------Parameters----------
@ProductID INT,
@Success bit OUTPUT 

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)
DECLARE @SQL NVARCHAR(MAX)
BEGIN TRY
	SET @ErrorMsg = ''
	SET @Success = 0

	UPDATE STOCKCONTROL_Product SET QtyInStock = (SELECT ISNULL(SUM(Qty),0) FROM dbo.STOCKCONTROL_RackProduct WHERE ProductID = @ProductID), UpdatedOn = GETDATE()	 
			WHERE ProductID = @ProductID
	
	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) <> '##'
		BEGIN	
			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[STOCKCONTROL_usp_upd_ProductQuantityInStock]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1
GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKCONTROL_usp_sel_ProductCode]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STOCKCONTROL_usp_sel_ProductCode]
GO

CREATE PROCEDURE [dbo].[STOCKCONTROL_usp_sel_ProductCode]
---------Parameters----------
@TraceabilityCode nvarchar(50) = NULL,
@SQL_WHERE nvarchar(4000) = NULL

AS

DECLARE @SQL_STRING nvarchar (4000)

SET NOCOUNT ON
SET DATEFORMAT dmy

	IF ISNULL(@TraceabilityCode,'') <> '' 
		/**************************
			RETURN SPECIFIC RECORDS
		**************************/
		BEGIN
			SELECT		pcod.ID, pcod.ProductID, pcod.JobDetailID, pcod.TraceabilityCode
			FROM		STOCKCONTROL_ProductCode	pcod	WITH (READUNCOMMITTED)
			WHERE		pcod.TraceabilityCode = @TraceabilityCode
			ORDER BY 	pcod.TraceabilityCode ASC
			
			RETURN
		END

	IF ISNULL(@SQL_WHERE,'') <> '' 
		/*********************************************
			SELECT RECORDS ACCORDING TO WHERE CRITERIA
		*********************************************/
		BEGIN
			SET @SQL_STRING = 'SELECT		pcod.ID, pcod.ProductID, pcod.JobDetailID, pcod.TraceabilityCode '			
			SET @SQL_STRING = @SQL_STRING + 'FROM		STOCKCONTROL_ProductCode	pcod	 '
			SET @SQL_STRING = @SQL_STRING + @SQL_WHERE

			EXEC(@SQL_STRING)

			RETURN
		END

	/*********************
		RETURN ALL RECORDS
	*********************/
	BEGIN
		SELECT		pcod.ID, pcod.ProductID, pcod.JobDetailID, pcod.TraceabilityCode
		FROM		STOCKCONTROL_ProductCode	pcod	WITH (READUNCOMMITTED)
		ORDER BY 	pcod.TraceabilityCode ASC

		RETURN
	END


GO




IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Location_usp_ins_ObjectNew]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[Location_usp_ins_ObjectNew]
GO

/****** Object:  StoredProcedure [dbo].[Location_usp_ins_ObjectNew]    Script Date: 12/02/2013 13:29:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
	Author:				Titu(Jr)
	Date:				21-Nov-2012

	Description:		Insert record in LOCATION_ObjectNew

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[Location_usp_ins_ObjectNew]
--@ObjectID int,
@ObjectTypeId  int,
@LocationID  int,
@DescriptionLongName nvarchar(100) = NULL,
@DescriptionShortName  nvarchar(20),
@Manufacturer nvarchar(25)= NULL,
@UnitOfMeasure SMALLINT = NULL,
@ToleranceCA decimal(18, 2)= NULL,
@AmberTolerance decimal(18, 2) = NULL,
@SerialNo nvarchar(20)= NULL,
@CertificateNumber nvarchar(20)= NULL,
@PartNumber nvarchar(20) = NULL,
@PurchaseDate datetime = NULL,
@ReviewDate datetime = NULL,
@ServiceDate datetime = NULL,
@PATTestDate datetime = NULL,
@SupplierId int = NULL, 
@ServiceCompanyID INT = NULL,
@Status int = NULL,
@Owner nvarchar(MAX) = NULL,
@CorrectiveActionID int = NULL, 
@IsPortable bit = NULL,
@IsMasterProbe bit = NULL,
@ToleranceCAIfMaster decimal(18, 2) = NULL,
@WarningTolerance decimal(18, 2) = NULL,
@GPDec1 decimal(18, 2) = NULL,
@GPDec2 decimal(18, 2) = NULL,
@CreatedBy nvarchar(16),	
@CreateDate datetime,
@Active  bit,
@CheckDuplicates bit,
@IsSameAsSupplier bit = NULL,
@ServiceCompanyInfo NVARCHAR(200) = NULL,
@SupplierInfo NVARCHAR(200) = NULL,
@IsRackLocation bit,
@ServiceFrequency NVARCHAR(50) = NULL,
@ServiceFreqDayOfWeek NVARCHAR(150) = NULL,
@ServiceFreqMonth NVARCHAR(16) = NULL,
@ServiceFreqDayNo INT = NULL,
@ServiceFreqStep INT = NULL,
@RecordID int OUTPUT,
@Barcode nvarchar(250) OUTPUT,
@RackAlreadyExists BIT OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 
DECLARE @BarcodePrefix NVARCHAR(32)
DECLARE @FullPath nvarchar(500)	
--DECLARE @Barcode nvarchar(250)
DECLARE @SequencePosition int
DECLARE @Level int

DECLARE @RetuenSuccess BIT
DECLARE @ReturnRackLocationID INT


SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RecordID = 0
	SET @Success = 0
	SET @ErrorMsg = ''
	
	SET @RackAlreadyExists = 0
	
	IF @CheckDuplicates = 1
		BEGIN
			/***************************
			DON'T ALLOW DUPLICATE RECORD
			***************************/
			IF EXISTS	(
						SELECT 		ObjectID
						FROM		LOCATION_ObjectNew						WITH (READUNCOMMITTED)
						WHERE 		[DescriptionShortName] = @DescriptionShortName AND LocationID = @LocationID
						)
			BEGIN
				SET @ErrorMsg = '##01Duplicate record ' + @DescriptionShortName
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END
		END
	
	BEGIN TRANSACTION
	
		SELECT 	@SequencePosition = MAX(LOCATION_ObjectNew.SequencePosition) + 1
		FROM	LOCATION_ObjectNew	WITH (READCOMMITTED)
		WHERE	LocationID = @LocationID
		
		IF @SequencePosition = 0 OR @SequencePosition IS NULL 
			SET @SequencePosition = 1		
		
		IF @LocationID = 0
			BEGIN
				SET @Level = 1
			END
		ELSE
			BEGIN
				SELECT 	@Level =[Level] + 1
				FROM	LOCATION_ObjectNew	WITH (READCOMMITTED)
				WHERE	ObjectID = @LocationID
			END	
		
		
		SELECT @BarcodePrefix = BarcodePrefix FROM LOCATION_ObjectType WHERE ObjectTypeID = @ObjectTypeId	
		
		IF @BarcodePrefix IS NULL
		SET @BarcodePrefix = ''
		
		
		
	/************
	INSERT RECORD
	************/	
	
	INSERT INTO LOCATION_ObjectNew	WITH (ROWLOCK)
        (
		ObjectTypeId, LocationID, SequencePosition,	DescriptionLongName, DescriptionShortName, Manufacturer, UnitOfMeasure,
		ToleranceCA, AmberTolerance,SerialNo,CertificateNumber,PartNumber,PurchaseDate,	ReviewDate,	ServiceDate,IsSameAsSupplier,
		PATTestDate,SupplierId, ServiceCompanyID, [Status],[Owner],CorrectiveActionID,IsPortable,	IsMasterProbe,ToleranceCAIfMaster,WarningTolerance,
		GPDec1, GPDec2, [Level], CreateDate, CreatedBy, Active,UpdatedOn,SupplierInfo,ServiceCompanyInfo, ServiceFrequency, ServiceFreqDayOfWeek,
		ServiceFreqMonth, ServiceFreqDayNo, ServiceFreqStep 
		)
     VALUES
       (
		@ObjectTypeId,	@LocationID, @SequencePosition,	@DescriptionLongName, @DescriptionShortName, @Manufacturer,	@UnitOfMeasure,
		@ToleranceCA, @AmberTolerance,	@SerialNo, @CertificateNumber, @PartNumber, @PurchaseDate,	@ReviewDate, @ServiceDate,@IsSameAsSupplier,
		@PATTestDate, @SupplierId, @ServiceCompanyID, @Status, @Owner, @CorrectiveActionID, @IsPortable, @IsMasterProbe, @ToleranceCAIfMaster, @WarningTolerance,
		@GPDec1, @GPDec2, @Level,	@CreateDate, @CreatedBy, @Active,GETDATE(),@SupplierInfo,@ServiceCompanyInfo, @ServiceFrequency, @ServiceFreqDayOfWeek,
		@ServiceFreqMonth, @ServiceFreqDayNo, @ServiceFreqStep
		)


	SET @RecordID = SCOPE_IDENTITY()
	
	--Get new path
		IF @LocationID > 0 
			BEGIN
				SELECT 	@FullPath = FullPath
				FROM	LOCATION_ObjectNew												WITH (READCOMMITTED, ROWLOCK)
				WHERE 	ObjectID = @LocationID

				SET 	@FullPath = @FullPath + CONVERT(nvarchar(10),@RecordID) + '\'
			END
		ELSE
			BEGIN
				SET 	@FullPath = '0\' + CONVERT(nvarchar(10),@RecordID) + '\'
			END
		
		SET @Barcode = @BarcodePrefix + dbo.fnPadLeft(@RecordID,6,'0')

		--Update new path		
		UPDATE 		LOCATION_ObjectNew	WITH (ROWLOCK)
		SET			FullPath = @FullPath,
					Barcode = @Barcode					
		WHERE		ObjectID = @RecordID
		
				
		IF (@IsRackLocation = 1) AND  NOT EXISTS (SELECT RackLocationID FROM STOCKCONTROL_Rack WHERE RackID = @Barcode)
		BEGIN
			EXEC STOCKCONTROL_usp_ins_Rack @RackID = @Barcode, 
										   @Description = @DescriptionShortName, 
										   @CheckDuplicates = 0, 
										   @Success = @RetuenSuccess OUTPUT,
										   @RackLocationID = @ReturnRackLocationID OUTPUT
										   
			IF @RetuenSuccess = 1
				UPDATE 	LOCATION_ObjectNew SET 	RackLocationID = @ReturnRackLocationID WHERE ObjectID = @RecordID				   
										   
		END
		ELSE IF @IsRackLocation = 1
			SET @RackAlreadyExists = 1
		
		
				
	COMMIT TRANSACTION
			        	
	SET @Success = 1
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'Location_usp_ins_ObjectNew',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1



GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Location_usp_MapLocation_with_Rack]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[Location_usp_MapLocation_with_Rack]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Location_usp_MapLocation_with_Rack]
@ObjectID INT,
@RackLocationID int OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 


DECLARE @RetuenSuccess BIT
--DECLARE @RackLocationID INT
DECLARE @Barcode nvarchar(250)
DECLARE @DescriptionShortName  nvarchar(20)


SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RackLocationID = 0
	SET @Success = 0
	SET @ErrorMsg = ''
	
	
	BEGIN TRANSACTION
	
		SELECT 	@Barcode = Barcode, @DescriptionShortName = DescriptionShortName
		FROM	LOCATION_ObjectNew	WITH (READCOMMITTED)
		WHERE	@ObjectID  = ObjectID
		
		SELECT @RackLocationID = RackLocationID
		FROM STOCKCONTROL_Rack
		WHERE RackID = @Barcode
		
		IF @RackLocationID IS NOT NULL
		BEGIN
			UPDATE STOCKCONTROL_Rack
			SET Description = @DescriptionShortName
			WHERE RackLocationID = @RackLocationID
			
			UPDATE LOCATION_ObjectNew
			SET RackLocationID = @RackLocationID
			WHERE 	ObjectID = @ObjectID
			
			SET @Success = 1
		END	
		
		
	COMMIT TRANSACTION
			        	
	
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'Location_usp_MapLocation_with_Rack',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1



GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Location_usp_upd_ObjectNew]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[Location_usp_upd_ObjectNew]
GO

/*
	Author:				Titu(Jr)
	Date:				21-Nov-2012 

	Description:		Update record in LOCATION_ObjectNew

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[Location_usp_upd_ObjectNew]
---------Parameters----------
@ObjectID int,
--@ObjectTypeId  int,
@LocationID  int,
--@SequencePosition int,
@DescriptionLongName nvarchar(100) = NULL,
@DescriptionShortName  nvarchar(20),
@Manufacturer nvarchar(25)= NULL,
@UnitOfMeasure SMALLINT = NULL,
@ToleranceCA decimal(18, 2)= NULL,
@AmberTolerance decimal(18, 2) = NULL,
@Barcode nvarchar(250),
@SerialNo nvarchar(20)= NULL,
@CertificateNumber nvarchar(20)= NULL,
@PartNumber nvarchar(20) = NULL,
@PurchaseDate datetime = NULL,
@ReviewDate datetime = NULL,
@ServiceDate datetime = NULL,
@PATTestDate datetime = NULL,
@SupplierId int = NULL,
@ServiceCompanyID INT = NULL,
@Status int = NULL,
@Owner nvarchar(MAX) = NULL,
@CorrectiveActionID int = NULL,
@IsPortable bit = NULL,
@IsMasterProbe bit = NULL,
@ToleranceCAIfMaster decimal(18, 2) = NULL,
@WarningTolerance decimal(18, 2) = NULL,
@GPDec1 decimal(18, 2) = NULL,
@GPDec2 decimal(18, 2) = NULL,
@ServiceCompanyInfo NVARCHAR(200) = NULL,
@SupplierInfo NVARCHAR(200) = NULL,
--@Level int,
--@FullPath nvarchar(500) = NULL,		
--@CreateDate datetime,
@IsSameAsSupplier bit = NULL,
@IsRackLocation BIT,
@CheckDuplicates bit,
@Active  bit,
@ServiceFrequency NVARCHAR(50) = NULL,
@ServiceFreqDayOfWeek NVARCHAR(150) = NULL,
@ServiceFreqMonth NVARCHAR(16) = NULL,
@ServiceFreqDayNo INT = NULL,
@ServiceFreqStep INT = NULL,
@RackAlreadyExists BIT OUTPUT,
@RackCouldNotDelete BIT OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

DECLARE @RetuenSuccess BIT
DECLARE @ReturnRackLocationID INT

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg = ''
	
	SET @RackAlreadyExists = 0
    SET @RackCouldNotDelete = 0
	
	IF @ObjectID > 0 
	BEGIN
	/******************
	CHECK RECORD EXISTS
	******************/
	IF NOT EXISTS	(
					SELECT 		ObjectID
					FROM		LOCATION_ObjectNew				WITH (READUNCOMMITTED)
					WHERE 		ObjectID = @ObjectID
					)
	BEGIN
		SET @ErrorMsg = '##01Table LOCATION_ObjectNew - Could not find record ' + CAST(@ObjectID AS nvarchar(8))  
		RAISERROR(@ErrorMsg,16,1)
		RETURN -1
	END
	
	IF @CheckDuplicates = 1
		BEGIN
			/***************************
			DON'T ALLOW DUPLICATE RECORD
			***************************/
			IF EXISTS	(
						SELECT 		ObjectID
						FROM		LOCATION_ObjectNew						WITH (READUNCOMMITTED)
						WHERE 		[DescriptionShortName] = @DescriptionShortName AND LocationID = @LocationID AND ObjectID <> @ObjectID
						)
			BEGIN
				SET @ErrorMsg = '##01Duplicate record ' + @DescriptionShortName
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END
		END

		/************
		UPDATE RECORD
		************/
		UPDATE	LOCATION_ObjectNew		WITH (ROWLOCK)

		SET --ObjectTypeId  = @ObjectTypeId,
		--	LocationID = @LocationID,
		--	SequencePosition = @SequencePosition,
			DescriptionLongName = @DescriptionLongName,
			DescriptionShortName = @DescriptionShortName ,
			Manufacturer = @Manufacturer,
			UnitOfMeasure = @UnitOfMeasure,
			ToleranceCA = @ToleranceCA,
			AmberTolerance = @AmberTolerance,
			--Barcode = @Barcode,
			SerialNo=@SerialNo,
			CertificateNumber=@CertificateNumber,
			PartNumber=@PartNumber,
			PurchaseDate=@PurchaseDate,
			ReviewDate=@ReviewDate,
			ServiceDate=@ServiceDate,
			PATTestDate=@PATTestDate,
			SupplierId=@SupplierId,
			ServiceCompanyID = @ServiceCompanyID,
			IsSameAsSupplier =@IsSameAsSupplier,
			[Status]=@Status,
			[Owner]=@Owner,
			CorrectiveActionID=@CorrectiveActionID,
			IsPortable=@IsPortable,
			IsMasterProbe=@IsMasterProbe,
			ToleranceCAIfMaster=@ToleranceCAIfMaster,
			WarningTolerance=@WarningTolerance,	
			GPDec1  = @GPDec1,
			GPDec2 = @GPDec2,		
			Active = @Active,
			UpdatedOn = GETDATE(),
			ServiceCompanyInfo = @ServiceCompanyInfo ,
			SupplierInfo = @SupplierInfo,
			ServiceFrequency = @ServiceFrequency,
			ServiceFreqDayOfWeek = @ServiceFreqDayOfWeek,
			ServiceFreqMonth = @ServiceFreqMonth,
			ServiceFreqDayNo = @ServiceFreqDayNo,
			ServiceFreqStep = @ServiceFreqStep
			WHERE	ObjectID = @ObjectID
			
								
			IF ISNULL(@Barcode,'') <> ''
				BEGIN
					UPDATE	dbo.PROCEDURE_StepDetail
					SET		Description = @DescriptionLongName
					WHERE	DefaultValue = @Barcode					
				END
				
			Declare @RackLocationID INT
			SET @ReturnRackLocationID = 0
			SELECT 	@RackLocationID = RackLocationID  FROM LOCATION_ObjectNew WHERE ObjectID = @ObjectID
				
			IF (@IsRackLocation = 1) AND @RackLocationID IS NOT NULL -- NOT EXISTS (SELECT RackLocationID FROM STOCKCONTROL_Rack WHERE RackID = @Barcode)
			BEGIN
				EXEC STOCKCONTROL_usp_upd_Rack @RackLocationID = @RackLocationID,
											   @RackID = @Barcode, 
											   @Description = @DescriptionShortName, 
											   @CheckDuplicates = 0, 
											   @Success = @RetuenSuccess OUTPUT
											   											   
			END
			ELSE IF (@IsRackLocation = 1 AND @RackLocationID IS NULL) AND NOT EXISTS (SELECT RackLocationID FROM STOCKCONTROL_Rack WHERE RackID = @Barcode)
			BEGIN	
				EXEC STOCKCONTROL_usp_ins_Rack @RackID = @Barcode, 
											   @Description = @DescriptionShortName, 
											   @CheckDuplicates = 0, 
											   @Success = @RetuenSuccess OUTPUT,
											   @RackLocationID = @ReturnRackLocationID OUTPUT
										   
				IF @RetuenSuccess = 1
					UPDATE 	LOCATION_ObjectNew SET 	RackLocationID = @ReturnRackLocationID WHERE ObjectID = @ObjectID
			END
			ELSE IF @IsRackLocation = 1 AND @RackLocationID IS NULL AND EXISTS (SELECT RackLocationID FROM STOCKCONTROL_Rack WHERE RackID = @Barcode)
				SET @RackAlreadyExists = 1
			ELSE IF @IsRackLocation = 0 AND @RackLocationID IS NOT NULL AND NOT EXISTS(SELECT RackLocationID FROM STOCKCONTROL_RackProduct WHERE RackLocationID = @RackLocationID AND Qty>0)	
			BEGIN
				BEGIN TRY
				EXEC STOCKCONTROL_usp_del_Rack @RackLocationID = @RackLocationID,
											   @Success = @RetuenSuccess OUTPUT
											   
				END TRY
				BEGIN CATCH
					SET @RackCouldNotDelete = 1
				END CATCH
			END
			ELSE IF @IsRackLocation = 0 AND @RackLocationID IS NOT NULL AND EXISTS(SELECT RackLocationID FROM STOCKCONTROL_RackProduct WHERE RackLocationID = @RackLocationID AND Qty>0)	
				SET @RackCouldNotDelete = 1
				
				
				
				
			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@ObjectID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'Location_usp_upd_ObjectNew',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

GO

/****** Object:  StoredProcedure [dbo].[LOCATION_usp_upd_Move_Object]    Script Date: 08/26/2014 15:53:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LOCATION_usp_upd_Move_Object]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[LOCATION_usp_upd_Move_Object]
GO

/****** Object:  StoredProcedure [dbo].[LOCATION_usp_upd_Move_Object]    Script Date: 08/26/2014 15:53:27 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[LOCATION_usp_upd_Move_Object]

---------Parameters----------
@ObjectID INT,
@DestObjectID INT,
@Success bit OUTPUT

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)

DECLARE @PreviousLocationID INT 
DECLARE @PreviousSequencePosition INT 
DECLARE @NewSequencePosition INT 

DECLARE @CurrentObjectID INT
DECLARE @LocationID INT 
DECLARE @Level INT
DECLARE @SequencePosition INT
DECLARE @FullPath NVARCHAR(500)

BEGIN TRY
	SET @ErrorMsg = ''
	SET @Success = 0
	
	--
	IF EXISTS(SELECT ObjectID FROM dbo.LOCATION_ObjectNew WHERE ObjectID = @ObjectID AND LocationId = 0)
	BEGIN
		SET @ErrorMsg = '##01Can not move Top Level Location.' 
					RAISERROR(@ErrorMsg,16,1)
					RETURN -1
	END
	ELSE IF EXISTS(SELECT ObjectID FROM dbo.LOCATION_ObjectNew WHERE ObjectID = @DestObjectID AND FullPath LIKE  '%\' + CONVERT(NVARCHAR(10), @ObjectID) + '\%')
	BEGIN
		SET @ErrorMsg = '##02Parent Location/Object can not be moved under child Location/Object.' 
					RAISERROR(@ErrorMsg,16,1)
					RETURN -1
	END
	ELSE IF NOT EXISTS(SELECT ObjectID FROM dbo.LOCATION_ObjectNew WHERE ObjectID = @DestObjectID AND (ObjectTypeId = 99 OR ObjectTypeId = 100))
	BEGIN
		SET @ErrorMsg = '##02Cannot Move an item to another Item.' 
					RAISERROR(@ErrorMsg,16,1)
					RETURN -1
	END

	DECLARE @Process_Record TABLE(								
								ObjectID INT,
								LocationID INT,
								[Level] INT,
								SequencePosition INT,
								Processed BIT DEFAULT(0)
								);
								
	WITH Object_CTE(ObjectID, LocationID, [Level], SequencePosition )AS
		(
			SELECT ObjectID,  @DestObjectID, [Level], SequencePosition 
			FROM dbo.LOCATION_ObjectNew WHERE ObjectID = @ObjectID
			UNION ALL		
			SELECT obj.ObjectID, obj.LocationID, obj.[Level], obj.SequencePosition
			FROM dbo.LOCATION_ObjectNew obj
			INNER JOIN Object_CTE objCT ON obj.LocationID =  objCT.ObjectID
		)																						
	
	INSERT INTO @Process_Record (ObjectID, LocationID, [Level], SequencePosition, Processed)
		SELECT ObjectID, LocationID, [Level], SequencePosition, 0 
		FROM Object_CTE ORDER BY [Level], LocationID, SequencePosition
		
	SELECT @PreviousLocationID = LocationID, @PreviousSequencePosition = SequencePosition FROM dbo.LOCATION_ObjectNew WHERE ObjectID = @ObjectID	
	
	SELECT 	@NewSequencePosition = ISNULL(MAX(SequencePosition), 0) + 1 FROM	LOCATION_ObjectNew WHERE	LocationID = @DestObjectID

	BEGIN TRANSACTION
		WHILE EXISTS (SELECT ObjectID FROM @Process_Record WHERE Processed = 0)
			BEGIN
				/************************************************
				PROCESS EACH RECORD IN TEMP TABLE @Process_Record
				************************************************/
				SELECT TOP 1	@CurrentObjectID = ObjectID,
						@LocationID = LocationID, 					
						@SequencePosition = SequencePosition			
				FROM	@Process_Record			
				WHERE	Processed = 0
				ORDER BY [Level], LocationID, SequencePosition	
				
				IF @LocationID > 0 
				BEGIN
					SELECT 	@FullPath = FullPath, @Level = [Level]
					FROM	LOCATION_ObjectNew	WITH (READCOMMITTED, ROWLOCK)
					WHERE 	ObjectID = @LocationID
					SET 	@FullPath = @FullPath + CONVERT(nvarchar(10),@CurrentObjectID) + '\'
				END
				ELSE
					BEGIN
						SET @Level = 0
						SET @FullPath = '0\' + CONVERT(nvarchar(10),@CurrentObjectID) + '\'
					END
				
				UPDATE 		LOCATION_ObjectNew	WITH (ROWLOCK)
				SET			LocationID = @LocationID, [Level] = @Level + 1, FullPath = @FullPath, UpdatedOn = GETDATE()
				WHERE		ObjectID = @CurrentObjectID

											
				/*****************
					PROCESSED
				*****************/
				UPDATE	@Process_Record
				SET		Processed = 1
				WHERE 	ObjectID = @CurrentObjectID
			END											
	
		--Update sequence of old location's clildren
		UPDATE 		LOCATION_ObjectNew	WITH (ROWLOCK)
		SET			SequencePosition = SequencePosition -1, UpdatedOn = GETDATE()
		WHERE		LocationID = @PreviousLocationID AND SequencePosition > @PreviousSequencePosition
		
		--Update sequence draged object
			
		UPDATE 		LOCATION_ObjectNew	WITH (ROWLOCK)
		SET			SequencePosition = @NewSequencePosition, UpdatedOn = GETDATE()
		WHERE		ObjectID = @ObjectID
				
	COMMIT TRANSACTION							

	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
							
				
	IF LEFT(@ErrorMsg,2) <> '##'
		BEGIN	
			/*SET @ErrorParamsData =	'@Barcode = ' + @Barcode + ', @Pallet_No = ' +  CAST(@Pallet_No AS nvarchar(8))  + */

			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = 'LOCATION_usp_upd_Move_Object',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1

GO




IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LOCATION_usp_ins_ObjectType]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[LOCATION_usp_ins_ObjectType]
GO

/****** Object:  StoredProcedure [dbo].[LOCATION_usp_ins_ObjectType]    Script Date: 12/02/2013 16:39:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				TR
	Date:				16/01/2009 11:40

	Description:		Insert record in LOCATION_ObjectType

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[LOCATION_usp_ins_ObjectType]
---------Parameters----------
@Description nvarchar(50),
@BarcodePrefix nvarchar(2),
@IconID int,
@CheckDuplicates bit,
@RecordID int OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int

DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RecordID = 0
	SET @Success = 0

	IF @CheckDuplicates = 1
		BEGIN
			/***************************
			DON'T ALLOW DUPLICATE RECORD
			***************************/
			IF EXISTS	(
						SELECT 		ObjectTypeID
						FROM		LOCATION_ObjectType						WITH (READUNCOMMITTED)
						WHERE 		Description = @Description
						)
			BEGIN
				SET @ErrorMsg = '##01Object type ' + @Description + ' exists in the database'
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			IF EXISTS	(
						SELECT 		ObjectTypeID
						FROM		LOCATION_ObjectType						WITH (READUNCOMMITTED)
						WHERE 		BarcodePrefix = @BarcodePrefix
						)
			BEGIN
				SET @ErrorMsg = '##03Barcode prefix ' + @BarcodePrefix + ' exists in the database'
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END
		END

	/************
	INSERT RECORD
	************/
	INSERT INTO	LOCATION_ObjectType												WITH (ROWLOCK)
			(
			Description, BarcodePrefix, IconID,UpdatedOn
			)
	VALUES
			(
			@Description, @BarcodePrefix, @IconID,GETDATE()
			)

		SET @RecordID = SCOPE_IDENTITY()
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'LOCATION_usp_ins_ObjectType',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LOCATION_usp_upd_ObjectType]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[LOCATION_usp_upd_ObjectType]
GO
/****** Object:  StoredProcedure [dbo].[LOCATION_usp_upd_ObjectType]    Script Date: 12/02/2013 16:57:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
	Author:				TR
	Date:				16/01/2009 11:40

	Description:		Update record in LOCATION_ObjectType

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[LOCATION_usp_upd_ObjectType]
---------Parameters----------
@ObjectTypeID int,
@Description nvarchar(50),
/*@BarcodePrefix nvarchar(2),*/
@IconID int,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

DECLARE @Records int

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0

	IF @ObjectTypeID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		ObjectTypeID
							FROM		LOCATION_ObjectType				WITH (READUNCOMMITTED)
							WHERE 		ObjectTypeID = @ObjectTypeID
							)
			BEGIN
				SET @ErrorMsg = '##01Table LOCATION_ObjectType - Could not find record ' + CAST(@ObjectTypeID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			IF EXISTS	(
						SELECT 		ObjectTypeID
						FROM		LOCATION_ObjectType				WITH (READUNCOMMITTED)
						WHERE 		Description = @Description
						)
			BEGIN
				SET @ErrorMsg = '##01Object type ' + @Description + ' exists in the database'
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END

			/************
			UPDATE RECORD
			************/
			UPDATE	LOCATION_ObjectType												WITH (ROWLOCK)

			SET 	Description = @Description,
/*					BarcodePrefix = @BarcodePrefix,*/
					IconID = @IconID,
					UpdatedOn = GETDATE()

			WHERE	ObjectTypeID = @ObjectTypeID

			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@ObjectTypeID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'LOCATION_usp_upd_ObjectType',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
GO


/****** Object:  StoredProcedure [dbo].[LOCATION_usp_upd_Copy_Object]    Script Date: 12/02/2013 13:32:04 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LOCATION_usp_upd_Copy_Object]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[LOCATION_usp_upd_Copy_Object]
GO

/*
	Author:				Titu(Jr)
	Date:				14-Jun-2013

	Description:		Copy Object

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[LOCATION_usp_upd_Copy_Object]

---------Parameters----------
@ObjectID INT,
@CreatedBy nvarchar(16),
@CreateDate DATETIME,
@CopyID INT OUTPUT,
@Success bit OUTPUT

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)

DECLARE @LocationID INT
DECLARE @BarcodePrefix nvarchar (10)
DECLARE @Barcode nvarchar(50)
DECLARE @ObjectTypeId INT
DECLARE @SequencePosition INT
DECLARE @FullPath nvarchar(500)	

DECLARE @ID INT

BEGIN TRY

	SET @ErrorMsg = ''
	SET @CopyID = 0
	SET @Success = 0
	
	BEGIN TRANSACTION
		SELECT @LocationID = LocationID, @ObjectTypeId = ObjectTypeId  FROM LOCATION_ObjectNew WHERE [ObjectID] = @ObjectID
		
		SELECT @BarcodePrefix = BarcodePrefix FROM LOCATION_ObjectType WHERE ObjectTypeID = @ObjectTypeId	
			
		IF @BarcodePrefix IS NULL
			SET @BarcodePrefix = ''
			
		SELECT 	@SequencePosition = MAX(LOCATION_ObjectNew.SequencePosition) + 1
		FROM	LOCATION_ObjectNew	WITH (READCOMMITTED)
		WHERE	LocationID = @LocationID
		
		IF @SequencePosition = 0 OR @SequencePosition IS NULL 
			SET @SequencePosition = 1	
		
		INSERT INTO LOCATION_ObjectNew	
			(
			ObjectTypeId,
			LocationID, 
			SequencePosition,
			DescriptionLongName,
			DescriptionShortName, 
			Manufacturer, 
			UnitOfMeasure,
			ToleranceCA, 
			AmberTolerance,
			SerialNo,
			CertificateNumber,
			PartNumber,
			PurchaseDate,	
			ReviewDate,	
			ServiceDate,			
			PATTestDate,
			SupplierId,			
			[Status],
			[Owner],
			CorrectiveActionID,
			IsPortable,	
			IsMasterProbe,
			ToleranceCAIfMaster,
			WarningTolerance,
			GPDec1, 
			GPDec2, 
			[Level], 
			CreateDate, 
			CreatedBy, 
			Active,
			ServiceCompanyID,
			IsSameAsSupplier,
			SupplierInfo,
			ServiceCompanyInfo,
			ServiceFrequency,
			ServiceFreqDayOfWeek,
			ServiceFreqMonth,
			ServiceFreqDayNo,
			ServiceFreqStep,
			UpdatedOn
			)
			SELECT 
			ObjectTypeId,
			LocationID, 
			@SequencePosition,
			DescriptionLongName,
			'Copy of ' + DescriptionShortName, 
			Manufacturer, 
			UnitOfMeasure,
			ToleranceCA, 
			AmberTolerance,
			SerialNo,
			CertificateNumber,
			PartNumber,
			PurchaseDate,	
			ReviewDate,	
			ServiceDate,			
			PATTestDate,
			SupplierId,			
			[Status],
			[Owner],
			CorrectiveActionID,
			IsPortable,	
			IsMasterProbe,
			ToleranceCAIfMaster,
			WarningTolerance,
			GPDec1, 
			GPDec2, 
			[Level], 
			GETDATE(), 
			@CreatedBy, 
			Active,
			ServiceCompanyID,
			IsSameAsSupplier,
			SupplierInfo,
			ServiceCompanyInfo,
			ServiceFrequency,
			ServiceFreqDayOfWeek,
			ServiceFreqMonth,
			ServiceFreqDayNo,
			ServiceFreqStep,
			GETDATE()
		  FROM [dbo].[LOCATION_ObjectNew] 
		  WHERE [ObjectID] = @ObjectID

		SET @ID = SCOPE_IDENTITY()
		SET @CopyID = @ID
		
		--Get new path
		IF @LocationID > 0 
			BEGIN
				SELECT 	@FullPath = FullPath
				FROM	LOCATION_ObjectNew												WITH (READCOMMITTED, ROWLOCK)
				WHERE 	ObjectID = @LocationID

				SET 	@FullPath = @FullPath + CONVERT(nvarchar(10),@ID) + '\'
			END
		ELSE
			BEGIN
				SET 	@FullPath = '0\' + CONVERT(nvarchar(10),@ID) + '\'
			END
		
		SET @Barcode = @BarcodePrefix + dbo.fnPadLeft(@ID,6,'0')

		--Update new path		
		UPDATE 		LOCATION_ObjectNew	WITH (ROWLOCK)
		SET			FullPath = @FullPath,
					Barcode = @Barcode					
		WHERE		ObjectID = @ID
		
		--IF EXISTS(SELECT ID FROM PROCEDURE_Step_Associated_Document WHERE ObjectID = @ObjectID AND (ObjectType = 8 OR ObjectType = 9) )
		--		BEGIN
													
		--			INSERT INTO PROCEDURE_Step_Associated_Document
		--				(   ObjectID,
		--					DocumentTitle ,
		--					DocumentPath,
		--					LastChangeDateFromSytem ,
		--					LastChangeDateOutsideSystem,
		--					ObjectType,
		--					DocumentContent,
		--					ReferenceDocID,
		--					UpdatedOn)
		--			SELECT	@ID,
		--					DocumentTitle,
		--					DocumentPath,
		--					LastChangeDateFromSytem,
		--					LastChangeDateOutsideSystem,
		--					ObjectType,
		--					NULL,
		--					CASE WHEN DocumentContent IS NULL THEN ReferenceDocID ELSE ID END,
		--					GETDATE()
		--			FROM PROCEDURE_Step_Associated_Document 
		--			WHERE ObjectID = @ObjectID AND (ObjectType = 8 OR ObjectType = 9)
					
		--		END
		
		EXEC	PROCEDURE_usp_Copy_Step_Associated_Document	@ObjectID = @ObjectID,
															@CopyToObjectID = @ID,
															@ObjectType = 8,
															@Success = 0
															
		EXEC	PROCEDURE_usp_Copy_Step_Associated_Document	@ObjectID = @ObjectID,
															@CopyToObjectID = @ID,
															@ObjectType = 9,
															@Success = 0															

	COMMIT TRANSACTION
	
	SET @Success = 1			
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg = ''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) <> '##'
		BEGIN				

			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[LOCATION_usp_upd_Copy_Object]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Location_usp_sel_ObjectNew]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[Location_usp_sel_ObjectNew]
GO



/*
	Author:				Titu(Jr)
	Date:				21-Nov-2012

	Description:		Select records from LOCATION_ObjectNew

	History		Name		Date		Mod		
	=============================================================================================================================================
@GPDec1 decimal(18, 2) = NULL,
@GPDec2 decimal(18, 2) = NULL,
@CreatedBy nvarchar(16),


	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[Location_usp_sel_ObjectNew]
---------Parameters----------
@ObjectID INT = NULL,
@LocationID INT = NULL,
@SQL_WHERE nvarchar(4000) = NULL

AS

DECLARE @SQL_STRING nvarchar (4000)

SET NOCOUNT ON
SET DATEFORMAT dmy
	
	
	IF ISNULL(@ObjectID,0) <> 0 
		/**************************
			RETURN SPECIFIC RECORDS
		**************************/
		BEGIN
			SELECT obj.ObjectID, obj.ObjectTypeId, otyp.IconID, obj.LocationID, obj.SequencePosition, obj.DescriptionLongName, obj.DescriptionShortName, obj.RackLocationID, CASE WHEN obj.RackLocationID IS NULL THEN 0 ELSE 1 END AS IsRackLocation, obj.Manufacturer, obj.UnitOfMeasure, obj.ToleranceCA,
				obj.AmberTolerance, obj.Barcode, obj.SerialNo, obj.CertificateNumber, obj.PartNumber, obj.PurchaseDate, obj.ReviewDate, obj.ServiceDate, obj.PATTestDate, obj.SupplierId, obj.ServiceCompanyID,obj.IsSameAsSupplier,
				obj.[Status], obj.[Owner], obj.CorrectiveActionID, obj.IsPortable, obj.IsMasterProbe, obj.ToleranceCAIfMaster, obj.WarningTolerance, obj.[Level], obj.FullPath, obj.CreateDate, obj.Active 
				,obj.GPDec1, obj.GPDec2, obj.CreatedBy ,llc.Name as CorrectiveAction,obj.ServiceCompanyInfo,obj.SupplierInfo, obj.ServiceFrequency, obj.ServiceFreqDayOfWeek, obj.ServiceFreqMonth, obj.ServiceFreqDayNo, obj.ServiceFreqStep
			FROM		LOCATION_ObjectNew obj	WITH (READUNCOMMITTED)
			INNER JOIN LOCATION_ObjectType otyp on obj.ObjectTypeId = otyp.ObjectTypeID
			LEFT JOIN PROCEDURE_UserDefinedList llc on obj.CorrectiveActionID = llc.ListID
			WHERE		obj.ObjectID = @ObjectID
			ORDER BY obj.SequencePosition

			RETURN
		END

	IF ISNULL(@LocationID,0) <> 0 
		/**************************
			RETURN SPECIFIC RECORDS
		**************************/
		BEGIN
			SELECT obj.ObjectID, obj.ObjectTypeId, otyp.IconID, obj.LocationID, obj.SequencePosition, obj.DescriptionLongName, obj.DescriptionShortName, obj.RackLocationID, CASE WHEN obj.RackLocationID IS NULL THEN 0 ELSE 1 END AS IsRackLocation, obj.Manufacturer, obj.UnitOfMeasure, obj.ToleranceCA,
				obj.AmberTolerance, obj.Barcode, obj.SerialNo, obj.CertificateNumber, obj.PartNumber, obj.PurchaseDate, obj.ReviewDate, obj.ServiceDate, obj.PATTestDate, obj.SupplierId, obj.ServiceCompanyID,obj.IsSameAsSupplier,
				obj.[Status], obj.[Owner], obj.CorrectiveActionID, obj.IsPortable, obj.IsMasterProbe, obj.ToleranceCAIfMaster, obj.WarningTolerance, obj.[Level], obj.FullPath, obj.CreateDate, obj.Active 
				,obj.GPDec1, obj.GPDec2, obj.CreatedBy,llc.Name as CorrectiveAction,obj.ServiceCompanyInfo,obj.SupplierInfo, obj.ServiceFrequency, obj.ServiceFreqDayOfWeek, obj.ServiceFreqMonth, obj.ServiceFreqDayNo, obj.ServiceFreqStep
			FROM		LOCATION_ObjectNew obj	WITH (READUNCOMMITTED)
			INNER JOIN LOCATION_ObjectType otyp on obj.ObjectTypeId = otyp.ObjectTypeID
			LEFT JOIN PROCEDURE_UserDefinedList llc on obj.CorrectiveActionID = llc.ListID
			WHERE		obj.LocationID = @LocationID
			ORDER BY obj.SequencePosition

			RETURN
		END

	IF ISNULL(@SQL_WHERE,'') <> '' 
		/*********************************************
			SELECT RECORDS ACCORDING TO WHERE CRITERIA
		*********************************************/
		BEGIN
			SET @SQL_STRING = 'SELECT obj.ObjectID, obj.ObjectTypeId, otyp.IconID, obj.LocationID, obj.SequencePosition, obj.DescriptionLongName, obj.DescriptionShortName, obj.RackLocationID, CASE WHEN obj.RackLocationID IS NULL THEN 0 ELSE 1 END AS IsRackLocation, obj.Manufacturer, obj.UnitOfMeasure, obj.ToleranceCA, '
			SET @SQL_STRING = @SQL_STRING + 'obj.AmberTolerance, obj.Barcode, obj.SerialNo, obj.CertificateNumber, obj.PartNumber, obj.PurchaseDate, obj.ReviewDate, obj.ServiceDate, obj.PATTestDate, obj.SupplierId, obj.ServiceCompanyID,obj.IsSameAsSupplier, '
			SET @SQL_STRING = @SQL_STRING + 'obj.[Status], obj.[Owner], obj.CorrectiveActionID, obj.IsPortable, obj.IsMasterProbe, obj.ToleranceCAIfMaster, obj.WarningTolerance, obj.[Level], obj.FullPath, obj.CreateDate, obj.Active, obj.GPDec1, obj.GPDec2, obj.CreatedBy,llc.Name as CorrectiveAction,obj.ServiceCompanyInfo,obj.SupplierInfo, obj.ServiceFrequency, obj.ServiceFreqDayOfWeek, obj.ServiceFreqMonth, obj.ServiceFreqDayNo, obj.ServiceFreqStep  '
			SET @SQL_STRING = @SQL_STRING + 'FROM		LOCATION_ObjectNew obj '
			SET @SQL_STRING = @SQL_STRING + 'INNER JOIN LOCATION_ObjectType otyp on obj.ObjectTypeId = otyp.ObjectTypeID '
			SET @SQL_STRING = @SQL_STRING + 'LEFT JOIN PROCEDURE_UserDefinedList llc on obj.CorrectiveActionID = llc.ListID '
			SET @SQL_STRING = @SQL_STRING + @SQL_WHERE
			SET @SQL_STRING = @SQL_STRING + ' ORDER BY obj.SequencePosition'
			
			EXEC(@SQL_STRING)

			RETURN
		END
		
		SELECT obj.ObjectID, obj.ObjectTypeId, otyp.IconID, obj.LocationID, obj.SequencePosition, obj.DescriptionLongName, obj.DescriptionShortName, obj.RackLocationID, CASE WHEN obj.RackLocationID IS NULL THEN 0 ELSE 1 END AS IsRackLocation, obj.Manufacturer, obj.UnitOfMeasure, obj.ToleranceCA,
			obj.AmberTolerance, obj.Barcode, obj.SerialNo, obj.CertificateNumber, obj.PartNumber, obj.PurchaseDate, obj.ReviewDate, obj.ServiceDate, obj.PATTestDate, obj.SupplierId, obj.ServiceCompanyID,obj.IsSameAsSupplier,
			obj.[Status], obj.[Owner], obj.CorrectiveActionID, obj.IsPortable, obj.IsMasterProbe, obj.ToleranceCAIfMaster, obj.WarningTolerance, obj.[Level], obj.FullPath, obj.CreateDate, obj.Active 
			,obj.GPDec1, obj.GPDec2, obj.CreatedBy ,llc.Name as CorrectiveAction, obj.ServiceCompanyInfo, obj.SupplierInfo, obj.ServiceFrequency, obj.ServiceFreqDayOfWeek, obj.ServiceFreqMonth, obj.ServiceFreqDayNo, obj.ServiceFreqStep
		FROM		LOCATION_ObjectNew obj	WITH (READUNCOMMITTED)
		INNER JOIN LOCATION_ObjectType otyp on obj.ObjectTypeId = otyp.ObjectTypeID
		LEFT JOIN PROCEDURE_UserDefinedList llc on obj.CorrectiveActionID = llc.ListID
		ORDER BY obj.SequencePosition

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Location_usp_sel_ObjectAssociatedProcedure]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[Location_usp_sel_ObjectAssociatedProcedure]
GO



/*
	Author:				Titu(Jr)
	Date:				18-Jul-2014

	Description:		Select Procedures associated to Location/Object

	History		Name		Date		Mod		
	=============================================================================================================================================


	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[Location_usp_sel_ObjectAssociatedProcedure]
---------Parameters----------
@ObjectID INT

AS
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy
BEGIN TRY
	--SET @Success = 0
	SET @ErrorMsg = ''
	
	SELECT DISTINCT pr.StepID,  pr.Name, pr.CheckFrequency, pr.Active, pr.UserName
	FROM dbo.LOCATION_ObjectNew Obj
	INNER JOIN dbo.PROCEDURE_StepDetail st ON Obj.Barcode = st.DefaultValue  --AND (DataTypeName = 'Scan and Check' OR DataTypeName = 'Scan Only')
	INNER JOIN dbo.PROCEDURE_Step pr ON st.StepID = pr.StepID
	WHERE Obj.ObjectID = @ObjectID


	--SET @Success = 1
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg = ''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	--SET @Success = 0
	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'Location_usp_sel_ObjectAssociatedProcedure',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 
	RETURN -1	
	
GO



IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LOCATION_usp_del_ObjectNew]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[LOCATION_usp_del_ObjectNew]
GO
/*
	Author:				Titu(Jr)
	Date:				10-Dec-2012

	Description:		Delete record from LOCATION_ObjectNew

	History		Name		Date		Mod		
	=============================================================================================================================================
	DELETE associated rack 


	=============================================================================================================================================
*/
Create PROCEDURE [dbo].[LOCATION_usp_del_ObjectNew]
---------Parameters----------
@ObjectID int,
--@Barcode NVARCHAR(24),
@IsStepDelete bit,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 

DECLARE @LocationID INT
DECLARE @Records INT
DECLARE @RackLocationID INT
DECLARE @RetuenSuccess BIT
DECLARE @RackCouldNotDelete BIT
DECLARE @Barcode NVARCHAR(24)

--DECLARE @TypeID INT
DECLARE @Description NVARCHAR(200)

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg =''
	SET @RetuenSuccess = 0
	SET @RackCouldNotDelete = 0

	IF @ObjectID > 0 
		BEGIN
			/******************
			CHECK RECORD EXISTS
			******************/
			IF NOT EXISTS	(
							SELECT 		ObjectID
							FROM		LOCATION_ObjectNew							WITH (READUNCOMMITTED)
							WHERE 		ObjectID = @ObjectID
							)
			BEGIN
				SET @ErrorMsg = '##01Table LOCATION_ObjectNew - Could not find record ' + CAST(@ObjectID AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END
			
			--SELECT @Barcode  = Barcode FROM LOCATION_ObjectNew WHERE ObjectID = @ObjectID
			
			SELECT @RackLocationID = RackLocationID FROM LOCATION_ObjectNew WHERE ObjectID  = @ObjectID
			
		    IF @RackLocationID IS NOT NULL AND NOT EXISTS(SELECT RackLocationID FROM STOCKCONTROL_RackProduct WHERE RackLocationID = @RackLocationID AND Qty>0)	
			BEGIN
				BEGIN TRY
				EXEC STOCKCONTROL_usp_del_Rack @RackLocationID = @RackLocationID,
											   @Success = @RetuenSuccess OUTPUT
											   
				END TRY
				BEGIN CATCH
					SET @RackCouldNotDelete = 1
				END CATCH
			END
			ELSE IF @RackLocationID IS NOT NULL AND EXISTS(SELECT RackLocationID FROM STOCKCONTROL_RackProduct WHERE RackLocationID = @RackLocationID AND Qty>0)	
				SET @RackCouldNotDelete = 1
				
			IF @RackCouldNotDelete = 1
			BEGIN
				SET @ErrorMsg = '##02Table Location Object has an Rack, which can not be deleted. ' --+ CAST(@ObjectID  AS nvarchar(8))  
				RAISERROR(@ErrorMsg,16,1)
				RETURN -1
			END	
						
			IF @IsStepDelete = 0			
			BEGIN
				SELECT @Records = COUNT(*)
				FROM dbo.PROCEDURE_StepDetail
				WHERE	DefaultValue = @Barcode					
				
				IF @Records > 0
					BEGIN
						SET @ErrorMsg = '##04This Location is part of a procedure. Are you sure you want to Delete? '
						RAISERROR(@ErrorMsg,16,1)
						RETURN -1
					END
			END
			-- #end


			SELECT	@Records = COUNT(*)
			FROM	LOCATION_ObjectNew 
			WHERE	LocationID = @ObjectID 
			
			
			IF @Records > 0
				BEGIN
					SET @ErrorMsg = '##03You cannot delete this object, there are locations that contain this object type'
					RAISERROR(@ErrorMsg,16,1)
					RETURN -1
				END	

			--SELECT	@TypeID = TypeID,
			--		@Description = Description
			--FROM	dbo.LOCATION_Object
			--WHERE	ObjectID = @ObjectID

			BEGIN TRANSACTION
			
			--==========================
			/*
			DELETE Object Associated document
			*/
			DECLARE @DocID INT
			DECLARE @ChildDocID INT
			
			WHILE EXISTS(SELECT ID FROM PROCEDURE_Step_Associated_Document WHERE ObjectID = @ObjectID)
			BEGIN
				SET @ChildDocID = NULL
				SELECT  TOP(1) @DocID = ID FROM PROCEDURE_Step_Associated_Document WHERE ObjectID = @ObjectID
				SELECT TOP(1) @ChildDocID = ID FROM PROCEDURE_Step_Associated_Document WHERE ReferenceDocID = @DocID AND ID <> @DocID				   

				IF(@ChildDocID IS NOT NULL)
					BEGIN
						UPDATE PROCEDURE_Step_Associated_Document 
						SET DocumentContent = (SELECT DocumentContent FROM PROCEDURE_Step_Associated_Document WHERE ID = @DocID),
						ReferenceDocID = NULL, UpdatedOn = GETDATE()
						WHERE ID = @ChildDocID
						
						UPDATE PROCEDURE_Step_Associated_Document 
						SET ReferenceDocID = @ChildDocID, UpdatedOn = GETDATE() 
						WHERE ReferenceDocID = @DocID AND ID <> @ChildDocID														
					END
					
				DELETE FROM PROCEDURE_Step_Associated_Document WHERE  ID=@DocID
			END
			
			
			--========================
			
			IF ISNULL(@Barcode,'') <> ''
				BEGIN
					DELETE dbo.PROCEDURE_StepDetail
					WHERE	DefaultValue = @Barcode					
				END
						
			DELETE	LOCATION_ObjectNew		WITH (ROWLOCK)
			WHERE 	ObjectID = @ObjectID

			--DELETE dbo.RANGER_Exception WHERE TypeID = @TypeID AND ObjectID = @ObjectID		
							
			COMMIT TRANSACTION
			
			SET @Success = 1
			RETURN 1
		END
	ELSE
		BEGIN
			SET @ErrorMsg = '##02Invalid record id ' + CAST(@ObjectID AS nvarchar(8))  
			RAISERROR(@ErrorMsg,16,1)
		END
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'LOCATION_usp_del_ObjectNew',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
GO	

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LOCATION_usp_search_ObjectNew]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[LOCATION_usp_search_ObjectNew]
GO

/*
	Author:				Titu(Jr)
	Date:				30-Nov-2012
	Description:		Search records from LOCATION_ObjectNew

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
Create PROCEDURE [dbo].[LOCATION_usp_search_ObjectNew]
	-- Add the parameters for the stored procedure here
	@Keyword VARCHAR(200), 
	@ObjectTypeID VARCHAR(20)
AS
BEGIN
		DECLARE @Query NVARCHAR(MAX)

		DECLARE @Location TABLE
		(
		ObjectID INT, 
		ObjectTypeID INT, 
		IconID INT, 
		DescriptionShortName VARCHAR(200),
		LocationID INT, 
		[Level] INT, 
		FullPath VARCHAR(500),
		SequencePosition INT,
		ReviewDate datetime,
		ServiceDate datetime ,
		[Status] int,		
		CorrectiveAction nvarchar(32),
		Processed BIT
		)

		DECLARE @Condition VARCHAR(250)
		
		SET @Query = 'SELECT obj.ObjectID, obj.ObjectTypeId, otyp.IconID, obj.DescriptionShortName, obj.LocationID, obj.[Level], obj.FullPath, obj.SequencePosition,obj.ReviewDate, obj.ServiceDate,obj.[Status],llc.Name as CorrectiveAction, 0
					FROM	LOCATION_ObjectNew obj
					INNER JOIN LOCATION_ObjectType otyp on obj.ObjectTypeId = otyp.ObjectTypeID
		             LEFT JOIN PROCEDURE_UserDefinedList llc on obj.CorrectiveActionID = llc.ListID'
		SET @Condition = ' WHERE obj.DescriptionShortName LIKE ''%' + @Keyword + '%'''
		IF @ObjectTypeID>0
			SET @Condition = @Condition + ' AND obj.ObjectTypeId = ' + CAST(@ObjectTypeID AS NVARCHAR)
		ELSE
			SET @Condition = @Condition + ' AND obj.ObjectTypeId > 100'
		
		SET @Condition = @Condition + ' ORDER BY obj.SequencePosition'	
			
		
		INSERT INTO @Location EXECUTE (@Query + @Condition)


		DECLARE @ObjectID INT
		DECLARE @ParentID INT
		DECLARE @Temp INT

		WHILE (SELECT COUNT(ObjectID) FROM @Location WHERE Processed =0) > 0
		BEGIN
			 SELECT TOP 1 @ObjectID = ObjectID FROM @Location WHERE Processed = 0
			 
			 SELECT @ParentID = LocationID FROM @Location WHERE ObjectID = @ObjectID
			 PRINT @ParentID
			 WHILE @ParentID  > 0
			 BEGIN
			 
				IF NOT EXISTS (SELECT ObjectID FROM @Location WHERE ObjectID = @ParentID)
				BEGIN
					INSERT INTO @Location
					SELECT obj.ObjectID, obj.ObjectTypeId, otyp.IconID, obj.DescriptionShortName, obj.LocationID, obj.[Level], obj.FullPath, obj.SequencePosition,obj.ReviewDate, obj.ServiceDate,obj.[Status],llc.Name as CorrectiveAction, 1
					FROM	LOCATION_ObjectNew obj
					INNER JOIN LOCATION_ObjectType otyp on obj.ObjectTypeId = otyp.ObjectTypeID
					LEFT JOIN PROCEDURE_UserDefinedList llc on obj.CorrectiveActionID = llc.ListID
					WHERE obj.ObjectID = @ParentID
					
					--PRINT @ParentID
				END
				SET @Temp = @ParentID
				SELECT @ParentID = LocationID FROM @Location WHERE ObjectID = @Temp
				
			 END
			 
			 UPDATE @Location SET Processed = 1 WHERE ObjectID = @ObjectID
		END
		
				
		SELECT ObjectID, ObjectTypeID, IconID, DescriptionShortName, LocationID, [Level], FullPath, SequencePosition, [Status], CorrectiveAction, ReviewDate, ServiceDate FROM @Location ORDER BY SequencePosition ASC
		
		
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LOCATION_usp_sel_LocationNew_By_Level]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[LOCATION_usp_sel_LocationNew_By_Level]
GO

/*
	Author:				Titu(Jr)
	Date:				10-Dec-2012
	Description:		Select LocationDesc from LOCATION_ObjectNew by lavel

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
Create PROCEDURE [dbo].[LOCATION_usp_sel_LocationNew_By_Level]

---------Parameters----------
@ObjectID INT,
@Level INT,
@Description NVARCHAR(50) OUTPUT


AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)

DECLARE @Data VARCHAR(2048)
DECLARE @LocationID VARCHAR(10)
SET @Description = ''

BEGIN TRY

	SELECT @Data = FullPath FROM [dbo].[LOCATION_ObjectNew] WHERE ObjectID=@ObjectID
  
	SELECT @LocationID = FieldValue FROM
   (SELECT ROW_NUMBER()  OVER (ORDER BY FieldNo ASC) AS rownumber
   ,fieldValue
   FROM
   dbo.fnsplit('\',@Data)
   ) AS value
   WHERE rownumber = @Level
  
  SELECT @Description = DescriptionShortName FROM [dbo].[LOCATION_ObjectNew] WHERE ObjectID = @LocationID				
		
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) <> '##'
		BEGIN	
			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[LOCATION_usp_sel_LocationNew_By_Level]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1
GO	

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LOCATION_usp_ins_ObjectComment]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[LOCATION_usp_ins_ObjectComment]
GO

/*
	Author:				Titu(Jr)
	Date:				06-Dec-2012

	Description:		Insert record in LOCATION_ObjectComment

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[LOCATION_usp_ins_ObjectComment]
---------Parameters----------
@ObjectID INT,
@Comment nvarchar(250),
@CommentedBy nvarchar(16),
@CommentedDate DATETIME,
@RecordID int OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int

DECLARE @ErrorParamsData nvarchar (1024) 

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RecordID = 0
	SET @Success = 0
	SET @ErrorMsg = ''

	/************
	INSERT RECORD
	************/
	INSERT INTO	LOCATION_ObjectComment					WITH (ROWLOCK)
			(
			ObjectID, Comment, CommentedBy, CommentedDate,UpdatedOn
			)
	VALUES
			(
			@ObjectID, @Comment, @CommentedBy, @CommentedDate,GETDATE()
			)

		SET @RecordID = SCOPE_IDENTITY()
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'LOCATION_usp_ins_ObjectComment',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1
GO	

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LOCATION_usp_sel_ObjectComment]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[LOCATION_usp_sel_ObjectComment]
GO

/*
	Author:				Titu(Jr)
	Date:				06-Dec-2012

	Description:		SELECT record from LOCATION_ObjectComment

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[LOCATION_usp_sel_ObjectComment]
---------Parameters----------	
@ObjectId INT = 0

AS

IF @ObjectId<>0
	SELECT ObjectCommentID, ObjectID, Comment, CommentedBy, CommentedDate 
	FROM LOCATION_ObjectComment 
	WHERE ObjectID = @ObjectId
	ORDER BY CommentedDate DESC
ELSE
	SELECT ObjectCommentID,ObjectID, Comment, CommentedBy, CommentedDate 
	FROM LOCATION_ObjectComment 
	--WHERE ObjectID = @ObjectId
	ORDER BY CommentedDate DESC	
GO		


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[REPORT_usp_LocationNew_Barcodes]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[REPORT_usp_LocationNew_Barcodes]
GO

/*
	Author:				Titu(Jr)
	Date:				10-Dec-2012

	Description:		SELECT Object Desc and Barcodes of a Location

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
Create PROCEDURE [dbo].[REPORT_usp_LocationNew_Barcodes]

---------Parameters----------
@LocationID int

AS

/*SQL Server errors*/
DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024)

BEGIN TRY
	SET @ErrorMsg = ''
	
	SELECT Barcode, DescriptionShortName 
	FROM LOCATION_ObjectNew 
	WHERE LocationID = @LocationID AND ObjectTypeId > 100
	
	
	RETURN 1
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)								
			GOTO ERR_HANDLER													
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)										
		END			
END CATCH		
	
ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/	
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION
				
	IF LEFT(@ErrorMsg,2) <> '##'
		BEGIN	
			EXEC	[APP_usp_ins_SQL_Error_Log_Entry]	@Source = '[REPORT_usp_LocationNew_Barcodes]',
														@Msg = @ErrorMsg,
														@ParamsData = @ErrorParamsData 	
		END	
										
	RETURN -1
GO	


/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_Product]    Script Date: 12/07/2012 17:01:30 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Report_usp_sel_Product]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[Report_usp_sel_Product]
GO


/****** Object:  StoredProcedure [dbo].[STOCKCONTROL_usp_sel_Product]    Script Date: 12/07/2012 17:01:30 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				TR
	Date:				01/05/2012 19:06

	Description:		Select records from STOCKCONTROL_Product

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[Report_usp_sel_Product]
---------Parameters----------
@SQL_WHERE nvarchar(4000) = NULL

AS
DECLARE @SQL_STRING nvarchar(4000)

SET @SQL_STRING = NULL

IF ISNULL(@SQL_WHERE,'') <> '' 
		/*********************************************
			SELECT RECORDS ACCORDING TO WHERE CRITERIA
		*********************************************/
		BEGIN
			SET @SQL_STRING = 'SELECT DISTINCT scp.ProductID, ProductCode, scp.Description, scp.CategoryID, Type, StockBy, CostPrice, SalePrice, MinimumStockLevel, Barcode1, Barcode2, BatchNumberItem, QuarantineItem, scp.Comments, scp.Active, NumberSold, TotalSalePrice, Beef, sc.Description AS CategoryDescrip,  dbo.fnGetSuppliersOfProduct(scp.ProductID) AS SupplierName,ActualMargin,RequiredMargin,IsSundriesProduct,IsCustomeProduct, PieceQuantity ,DisplayUntil,BestBefore,scp.MinTemp,scp.MaxTemp,scp.QtyInStock,scp.QtyInStock*CostPrice AS TotalCostPrice,dbo.[fnGetRacksOfProduct](scp.ProductID) AS RackLocation,IsSerialProduct '
			SET @SQL_STRING = @SQL_STRING + 'FROM		STOCKCONTROL_Product scp '
			SET @SQL_STRING = @SQL_STRING + 'LEFT JOIN	dbo.STOCKCONTROL_Category sc ON scp.CategoryID = sc.CategoryID '
			SET @SQL_STRING = @SQL_STRING + 'LEFT JOIN	dbo.STOCKCONTROL_SupplierProduct spp ON scp.ProductID = spp.ProductID ';
			--SET @SQL_STRING = @SQL_STRING + 'INNER JOIN	dbo.STOCKCONTROL_Supplier sp ON scp.SupplierID = sp.SupplierID '
									
			SET @SQL_STRING = @SQL_STRING + @SQL_WHERE

			EXEC(@SQL_STRING)

			RETURN
		END
		
		SELECT		DISTINCT scp.ProductID, ProductCode, scp.Description, scp.CategoryID, Type, StockBy, CostPrice, SalePrice, MinimumStockLevel, Barcode1, Barcode2, BatchNumberItem, QuarantineItem, scp.Comments, scp.Active, NumberSold, TotalSalePrice, Beef, sc.Description AS CategoryDescrip,  dbo.fnGetSuppliersOfProduct(scp.ProductID) AS SupplierName,ActualMargin,RequiredMargin,IsSundriesProduct,IsCustomeProduct, PieceQuantity ,DisplayUntil,BestBefore,scp.MinTemp,scp.MaxTemp,scp.QtyInStock,scp.QtyInStock*CostPrice AS TotalCostPrice,dbo.[fnGetRacksOfProduct](scp.ProductID) AS RackLocation,IsSerialProduct

			FROM		STOCKCONTROL_Product scp								WITH (READUNCOMMITTED)
			LEFT JOIN	dbo.STOCKCONTROL_Category sc ON scp.CategoryID = sc.CategoryID
			--LEFT JOIN	dbo.STOCKCONTROL_SupplierProduct spp ON scp.ProductID = spp.ProductID 
			--INNER JOIN	dbo.STOCKCONTROL_Supplier sp ON scp.SupplierID = sp.SupplierID

			ORDER BY 	sc.Description ASC

			RETURN
			
GO



/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_ins_AutomaitcReport]    Script Date: 10/08/2013 20:07:04 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_ins_AutomaitcReport]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_ins_AutomaitcReport]
GO



/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_ins_AutomaitcReport]    Script Date: 10/08/2013 20:07:04 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*
	Author:				MSH
	Date:				29/10/2011 15:00

	Description:		Insert record in Procedure_AutomaitcReport

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[PROCEDURE_usp_ins_AutomaitcReport]
---------Parameters----------
@StepID int,
@Frequency nvarchar(50),
@UserIDList nvarchar(512) = NULL,

@RecordID bigint OUTPUT,
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 
DECLARE @ID int

SET NOCOUNT ON
SET DATEFORMAT dmy

BEGIN TRY
	SET @RecordID = 0
	SET @Success = 0
    SET @ID = 0
	
	/************
	INSERT RECORD
	************/
	SELECT @ID =ID FROM Procedure_AutomaitcReport WHERE StepID = @StepID 	
	IF @ID=0
	
		BEGIN
			INSERT INTO	dbo.Procedure_AutomaitcReport											WITH (ROWLOCK)
					(
						StepID, Frequency, UserIDList
					)
			VALUES
					(
						@StepID, @Frequency, @UserIDList
					)

			SET @RecordID = SCOPE_IDENTITY()
		END
		BEGIN
		    update dbo.Procedure_AutomaitcReport	WITH (ROWLOCK)
				set Frequency=@Frequency,
				    UserIDList= @UserIDList
				where ID=@ID
			SET @RecordID = @ID
	    END
	SET @Success = 1
	RETURN 1
	
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_ins_AutomaitcReport',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1






GO


 
/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_del_AutomaitcReport]    Script Date: 03/21/2014 21:14:55 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_del_AutomaitcReport]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_del_AutomaitcReport]
GO
 
 
/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_del_AutomaitcReport]    Script Date: 03/21/2014 21:14:55 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

 
/*
	Author:				Delowar
	Date:				21/03/2014 15:00

	Description:		Delete record in Procedure_AutomaitcReport

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
Create PROCEDURE [dbo].[PROCEDURE_usp_del_AutomaitcReport]
---------Parameters----------
@StepID int,

@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @ErrorParamsData nvarchar (1024) 
 

SET NOCOUNT ON
SET DATEFORMAT dmy

SET @ErrorMsg =''
BEGIN TRY
	
	SET @Success = 0
 
	 DELETE FROM dbo.Procedure_AutomaitcReport WHERE StepID= @StepID
	SET @Success = 1
	RETURN 1
	
END TRY
BEGIN CATCH
	IF @ErrorMsg =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = 'PROCEDURE_usp_ins_AutomaitcReport',
												@Msg = @ErrorMsg,
												@ParamsData = @ErrorParamsData 

	RETURN -1

 

GO



/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_sel_AutomaitcReport]    Script Date: 09/12/2013 19:05:04 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_sel_AutomaitcReport]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_sel_AutomaitcReport]
GO

/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_sel_AutomaitcReport]    Script Date: 09/12/2013 19:05:04 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[PROCEDURE_usp_sel_AutomaitcReport]

---------Parameters----------

AS


BEGIN
	
	SELECT ps.StepID,ps.Name,isnull(par.Frequency,'') Frequency,isnull(par.UserIDList,'') UserIDList 
    FROM PROCEDURE_Step ps left join Procedure_AutomaitcReport par on par.StepID=ps.StepID
	
END

GO


/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_sel_AllAutomaitcReport]    Script Date: 10/08/2013 20:08:35 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROCEDURE_usp_sel_AllAutomaitcReport]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROCEDURE_usp_sel_AllAutomaitcReport]
GO


/****** Object:  StoredProcedure [dbo].[PROCEDURE_usp_sel_AllAutomaitcReport]    Script Date: 10/08/2013 20:08:35 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[PROCEDURE_usp_sel_AllAutomaitcReport]

---------Parameters----------

AS

BEGIN
	
	SELECT StepID, ISNULL(Frequency,'') Frequency, ISNULL(UserIDList,'') UserIDList 
    FROM Procedure_AutomaitcReport
	
END
GO

-------------------------------------------------Trigger--------------------------------------------------------
IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[rackProductDeleteTrigger]'))
DROP TRIGGER [dbo].[rackProductDeleteTrigger]
GO

/****** Object:  Trigger [dbo].[rackProductDeleteTrigger]    Script Date: 12/03/2013 21:12:58 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[rackProductDeleteTrigger]
    ON [dbo].[STOCKCONTROL_RackProduct]
     AFTER DELETE
AS
               
    INSERT INTO RANGER_DeletedEntity (TableName,DeletedID, DeletedOn)
 
    SELECT 'STOCKCONTROL_RackProduct', ID, getdate() FROM deleted

GO

IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[stepDetailDeleteTrigger]'))
DROP TRIGGER [dbo].[stepDetailDeleteTrigger]
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[stepDetailDeleteTrigger]
    ON [dbo].[PROCEDURE_StepDetail]
     AFTER DELETE
AS
               
    INSERT INTO RANGER_DeletedEntity (TableName,DeletedID, DeletedOn)
 
    SELECT 'PROCEDURE_StepDetail', StepDetailID, getdate() FROM deleted

GO


IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[locationObjectDeleteTrigger]'))
DROP TRIGGER [dbo].[locationObjectDeleteTrigger]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[locationObjectDeleteTrigger]
    ON [dbo].[LOCATION_ObjectNew]
     AFTER DELETE
AS
               
    INSERT INTO RANGER_DeletedEntity (TableName,DeletedID, DeletedOn)
    SELECT 'LOCATION_ObjectNew', ObjectID, getdate() FROM deleted
GO


--~~~~~~~~~~
IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[ProcedureJobDeleteTrigger]'))
DROP TRIGGER [dbo].[ProcedureJobDeleteTrigger]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[ProcedureJobDeleteTrigger]
    ON [dbo].[PROCEDURE_Job]
     AFTER DELETE
AS
               
    INSERT INTO RANGER_DeletedEntity (TableName,DeletedID, DeletedOn)
    SELECT 'PROCEDURE_Job', JobID, getdate() FROM deleted
GO


IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[locationObjectTypeDeleteTrigger]'))
DROP TRIGGER [dbo].[locationObjectTypeDeleteTrigger]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[locationObjectTypeDeleteTrigger]
    ON [dbo].[LOCATION_ObjectType]
     AFTER DELETE
AS
               
    INSERT INTO RANGER_DeletedEntity (TableName,DeletedID, DeletedOn)
    SELECT 'LOCATION_ObjectType', ObjectTypeID, getdate() FROM deleted
GO


IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[locationObjectCommentDeleteTrigger]'))
DROP TRIGGER [dbo].[locationObjectCommentDeleteTrigger]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[locationObjectCommentDeleteTrigger]
    ON [dbo].[LOCATION_ObjectComment]
     AFTER DELETE
AS
               
    INSERT INTO RANGER_DeletedEntity (TableName,DeletedID, DeletedOn)
    SELECT 'LOCATION_ObjectComment', ObjectCommentID, getdate() FROM deleted
GO


IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[userDeleteTrigger]'))
DROP TRIGGER [dbo].[userDeleteTrigger]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[userDeleteTrigger]
    ON [dbo].[USER_User]
     AFTER DELETE
AS
               
    INSERT INTO RANGER_DeletedEntity (TableName,DeletedID, DeletedOn)
    SELECT 'USER_User', UserID, getdate() FROM deleted
GO


IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[roleDeleteTrigger]'))
DROP TRIGGER [dbo].[roleDeleteTrigger]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[roleDeleteTrigger]
    ON [dbo].[USER_Role]
     AFTER DELETE
AS
               
    INSERT INTO RANGER_DeletedEntity (TableName,DeletedID, DeletedOn)
    SELECT 'USER_Role', RoleID, getdate() FROM deleted
GO


IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[procedureDeleteTrigger]'))
DROP TRIGGER [dbo].[procedureDeleteTrigger]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[procedureDeleteTrigger]
    ON [dbo].[PROCEDURE_Step]
     AFTER DELETE
AS
               
    INSERT INTO RANGER_DeletedEntity (TableName,DeletedID, DeletedOn)
    SELECT 'PROCEDURE_Step', StepID, getdate() FROM deleted
GO



IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[udListDeleteTrigger]'))
DROP TRIGGER [dbo].[udListDeleteTrigger]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[udListDeleteTrigger]
    ON [dbo].[PROCEDURE_UserDefinedList]
     AFTER DELETE
AS
               
    INSERT INTO RANGER_DeletedEntity (TableName,DeletedID, DeletedOn)
    SELECT 'PROCEDURE_UserDefinedList', ListID, getdate() FROM deleted
GO


IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[udListDetailDeleteTrigger]'))
DROP TRIGGER [dbo].[udListDetailDeleteTrigger]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[udListDetailDeleteTrigger]
    ON [dbo].[PROCEDURE_UserDefinedListDetail]
     AFTER DELETE
AS
               
    INSERT INTO RANGER_DeletedEntity (TableName,DeletedID, DeletedOn)
    SELECT 'PROCEDURE_UserDefinedListDetail', ListDetailID, getdate() FROM deleted
GO


IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[alertDeleteTrigger]'))
DROP TRIGGER [dbo].[alertDeleteTrigger]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[alertDeleteTrigger]
    ON [dbo].[Procedure_Alert]
     AFTER DELETE
AS
               
    INSERT INTO RANGER_DeletedEntity (TableName,DeletedID, DeletedOn)
    SELECT 'Procedure_Alert', ID, getdate() FROM deleted
GO


IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[messageDeleteTrigger]'))
DROP TRIGGER [dbo].[messageDeleteTrigger]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[messageDeleteTrigger]
    ON [dbo].[PDA_MessageAlert]
     AFTER DELETE
AS
               
    INSERT INTO RANGER_DeletedEntity (TableName,DeletedID, DeletedOn)
    SELECT 'PDA_MessageAlert', MessageID, getdate() FROM deleted
GO

IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[messageDetlDeleteTrigger]'))
DROP TRIGGER [dbo].[messageDetlDeleteTrigger]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[messageDetlDeleteTrigger]
    ON [dbo].[PDA_MessageAlertDetail]
     AFTER DELETE
AS
               
    INSERT INTO RANGER_DeletedEntity (TableName,DeletedID, DeletedOn)
    SELECT 'PDA_MessageAlertDetail', MessageDetailID, getdate() FROM deleted
GO

IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[supplierDeleteTrigger]'))
DROP TRIGGER [dbo].[supplierDeleteTrigger]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[supplierDeleteTrigger]
    ON [dbo].[STOCKCONTROL_Supplier]
     AFTER DELETE
AS
               
    INSERT INTO RANGER_DeletedEntity (TableName,DeletedID, DeletedOn)
    SELECT 'STOCKCONTROL_Supplier', SupplierID, getdate() FROM deleted
GO

IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[supplierProductDeleteTrigger]'))
DROP TRIGGER [dbo].[supplierProductDeleteTrigger]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[supplierProductDeleteTrigger]
    ON [dbo].[STOCKCONTROL_SupplierProduct]
     AFTER DELETE
AS
               
    INSERT INTO RANGER_DeletedEntity (TableName,DeletedID, DeletedOn)
    SELECT 'STOCKCONTROL_SupplierProduct', Id, getdate() FROM deleted
GO


IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[productDeleteTrigger]'))
DROP TRIGGER [dbo].[productDeleteTrigger]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[productDeleteTrigger]
    ON [dbo].[STOCKCONTROL_Product]
     AFTER DELETE
AS
               
    INSERT INTO RANGER_DeletedEntity (TableName,DeletedID, DeletedOn)
    SELECT 'STOCKCONTROL_Product', ProductID, getdate() FROM deleted
GO


IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[categoryDeleteTrigger]'))
DROP TRIGGER [dbo].[categoryDeleteTrigger]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[categoryDeleteTrigger]
    ON [dbo].[STOCKCONTROL_Category]
     AFTER DELETE
AS
               
    INSERT INTO RANGER_DeletedEntity (TableName,DeletedID, DeletedOn)
    SELECT 'STOCKCONTROL_Category', CategoryID, getdate() FROM deleted
GO


IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[rackDeleteTrigger]'))
DROP TRIGGER [dbo].[rackDeleteTrigger]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[rackDeleteTrigger]
    ON [dbo].[STOCKCONTROL_Rack]
     AFTER DELETE
AS
               
    INSERT INTO RANGER_DeletedEntity (TableName,DeletedID, DeletedOn)
    SELECT 'STOCKCONTROL_Rack', RackLocationID, getdate() FROM deleted
GO


IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[salesOrderDeleteTrigger]'))
DROP TRIGGER [dbo].[salesOrderDeleteTrigger]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[salesOrderDeleteTrigger]
    ON [dbo].[STOCKCONTROL_SalesOrder]
    AFTER DELETE
AS
               
    INSERT INTO RANGER_DeletedEntity (TableName,DeletedID, DeletedOn)
    SELECT 'STOCKCONTROL_SalesOrder', OrderID, getdate() FROM deleted
GO

IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[salesDetlDeleteTrigger]'))
DROP TRIGGER [dbo].[salesDetlDeleteTrigger]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[salesDetlDeleteTrigger]
    ON [dbo].[STOCKCONTROL_SalesOrderDetail]
     AFTER DELETE
AS
               
    INSERT INTO RANGER_DeletedEntity (TableName,DeletedID, DeletedOn)
    SELECT 'STOCKCONTROL_SalesOrderDetail', OrderDetailID, getdate() FROM deleted
GO

--==========================================================================
IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[poDeleteTrigger]'))
DROP TRIGGER [dbo].[poDeleteTrigger]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[poDeleteTrigger]
    ON [dbo].[STOCKCONTROL_PurchaseOrder]
    AFTER DELETE
AS
               
    INSERT INTO RANGER_DeletedEntity (TableName,DeletedID, DeletedOn)
    SELECT 'STOCKCONTROL_PurchaseOrder', POID, getdate() FROM deleted
GO

IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[poDetlDeleteTrigger]'))
DROP TRIGGER [dbo].[poDetlDeleteTrigger]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[poDetlDeleteTrigger]
    ON [dbo].[STOCKCONTROL_PurchaseOrderDetail]
     AFTER DELETE
AS
               
    INSERT INTO RANGER_DeletedEntity (TableName,DeletedID, DeletedOn)
    SELECT 'STOCKCONTROL_PurchaseOrderDetail', PODetailID, getdate() FROM deleted
GO

---STOCKCONTROL_Customer delete trigger
IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[customerDeleteTrigger]'))
DROP TRIGGER [dbo].[customerDeleteTrigger]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[customerDeleteTrigger]
    ON [dbo].[STOCKCONTROL_Customer]
     AFTER DELETE
AS
               
    INSERT INTO RANGER_DeletedEntity (TableName,DeletedID, DeletedOn)
    SELECT 'STOCKCONTROL_Customer', CustomerID, getdate() FROM deleted
GO

--STOCKCONTROL_ForcedStockCheck delete trigger
IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[forceSCDeleteTrigger]'))
DROP TRIGGER [dbo].[forceSCDeleteTrigger]
GO
--ProductCode delete Trigger
IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[productCodeDeleteTrigger]'))
DROP TRIGGER [dbo].[productCodeDeleteTrigger]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[productCodeDeleteTrigger]
    ON [dbo].[STOCKCONTROL_ProductCode]
     AFTER DELETE
AS
               
    INSERT INTO RANGER_DeletedEntity (TableName,DeletedID, DeletedOn)
    SELECT 'STOCKCONTROL_ProductCode', ID, getdate() FROM deleted
GO

--STOCKCONTROL_ForcedStockCheck delete trigger
IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[forceSCDeleteTrigger]'))
DROP TRIGGER [dbo].[forceSCDeleteTrigger]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[forceSCDeleteTrigger]
    ON [dbo].[STOCKCONTROL_ForcedStockCheck]
     AFTER DELETE
AS
               
    INSERT INTO RANGER_DeletedEntity (TableName,DeletedID, DeletedOn)
    SELECT 'STOCKCONTROL_ForcedStockCheck', ForcedStockCheckID, getdate() FROM deleted
GO

--STOCKCONTROL_ForcedStockChkRack delete trigger
IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[forceSCRackDeleteTrigger]'))
DROP TRIGGER [dbo].[forceSCRackDeleteTrigger]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[forceSCRackDeleteTrigger]
    ON [dbo].[STOCKCONTROL_ForcedStockChkRack]
    AFTER DELETE
AS
               
    INSERT INTO RANGER_DeletedEntity (TableName,DeletedID, DeletedOn)
    SELECT 'STOCKCONTROL_ForcedStockChkRack', StockCheckRackID, getdate() FROM deleted
GO




--STOCKCONTROL_ForcedStockChkProduct delete trigger
IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[forceSCProductDeleteTrigger]'))
DROP TRIGGER [dbo].[forceSCProductDeleteTrigger]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[forceSCProductDeleteTrigger]
    ON [dbo].[STOCKCONTROL_ForcedStockChkProduct]
    AFTER DELETE
AS
               
    INSERT INTO RANGER_DeletedEntity (TableName,DeletedID, DeletedOn)
    SELECT 'STOCKCONTROL_ForcedStockChkProduct', StockCheckProductID, getdate() FROM deleted
GO

IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[documentDeleteTrigger]'))
DROP TRIGGER [dbo].[documentDeleteTrigger]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[documentDeleteTrigger]
    ON [dbo].[PROCEDURE_Step_Associated_Document]
    AFTER DELETE
AS
               
    INSERT INTO RANGER_DeletedEntity (TableName,DeletedID, DeletedOn)
    SELECT 'PROCEDURE_Step_Associated_Document', ID, getdate() FROM deleted
GO

IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[exceptionDeleteTrigger]'))
DROP TRIGGER [dbo].[exceptionDeleteTrigger]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE TRIGGER [dbo].[exceptionDeleteTrigger]
    ON [dbo].[RANGER_Exception]
    AFTER DELETE
AS
               
    INSERT INTO RANGER_DeletedEntity (TableName,DeletedID, DeletedOn)
    SELECT 'RANGER_Exception', ExceptionID, getdate() FROM deleted
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RANGER_usp_DBBackcup]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RANGER_usp_DBBackcup]
GO

/****** Object:  StoredProcedure [dbo].[RANGER_usp_DBBackcup]    Script Date: 12/10/2014 4:18:04 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*
	Author:				Titu
	Date:				11/19/2014 02:13

	Description:		Create a Database Backup

	History		Name		Date		Mod		
	=============================================================================================================================================



	=============================================================================================================================================
*/
CREATE PROCEDURE [dbo].[RANGER_usp_DBBackcup]
---------Parameters----------
@Path Nvarchar(500),
@DBName Nvarchar(500),
@Success bit OUTPUT

AS

DECLARE @ErrorMsg nvarchar (4000)
DECLARE @SQLErrorCode int
DECLARE @CurrentDate DateTime
DECLARE @sqlScript nvarchar(MAX)

SET NOCOUNT ON 
SET DATEFORMAT dmy


BEGIN TRY
	SET @Success = 0
	SET @ErrorMsg = ''
	
	BEGIN
    
	SET @sqlScript = N'BACKUP DATABASE ['
    + @DBName
    + '] TO  DISK = N'''
    + @path
    + ''' WITH NOFORMAT, INIT, NAME = N'''
    + @DBName
    + '-Full Database Backup'', SKIP, NOREWIND, NOUNLOAD, STATS = 10'

	PRINT(@sqlScript)

	EXECUTE (@sqlScript)
	END
		
		SET @Success = 1
		RETURN 1
END TRY
BEGIN CATCH
	PRINT('catch')
	Print('Msg1='+ERROR_MESSAGE())
	IF ISNULL(@ErrorMsg,'') =''
		BEGIN
			/*SQL SERVER ERROR*/
			SELECT TOP(1)	@ErrorMsg = 'ERROR_PROCEDURE:' + ERROR_PROCEDURE() + CHAR(13) + 
								'ERROR_STATE:' + CAST(ERROR_STATE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_SEVERITY:' + CAST(ERROR_SEVERITY() AS nvarchar(8)) + CHAR(13) +
								'ERROR_NUMBER:' + CAST(ERROR_NUMBER() AS nvarchar(8)) + CHAR(13) +
								'ERROR_LINE:' + CAST(ERROR_LINE() AS nvarchar(8)) + CHAR(13) + 
								'ERROR_MESSAGE:' + ERROR_MESSAGE() + CHAR(13) +
								'ERROR_DATE:'  + CAST(GETDATE() AS nvarchar(20))  
			RAISERROR(@ErrorMsg,16,1)
		END
	ELSE
		BEGIN
			/*APPLICATION GENERATED EXCEPTION*/
			RAISERROR(@ErrorMsg,16,1)
		END
END CATCH

ERR_HANDLER:
	/********************
	GENERIC ERROR HANDLER
	********************/
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION 

	SET @Success = 0

	EXEC APP_usp_ins_SQL_Error_Log_Entry		@Source = '[RANGER_usp_DBBackcup]',
												@Msg = @ErrorMsg

	RETURN -1

GO




--UPDATE APP_System SET UpdateInfo=  'Ranger_4.11.1.0.zip|http://bizstall.com/ranger/Ranger_4.11.1.0.zip|4.11.1.0'

---Update Timetaken column
--SELECT * FROM PROCEDURE_StepReading 
--WHERE CreateDate BETWEEN '2013-07-11' AND '2013-08-22' AND TimeTaken > (CONVERT(TIME,EndDateTime-StartDateTime)) ---  DATEADD( SECOND, UnScheduleDownTime,  ScheduleDownTime)

--UPDATE PROCEDURE_StepReading SET TimeTaken = CONVERT(TIME,EndDateTime-StartDateTime) --- UnScheduleDownTime - ScheduleDownTime
--WHERE CreateDate BETWEEN '2013-07-11' AND '2013-08-22' AND TimeTaken > CONVERT(TIME,EndDateTime-StartDateTime) --- UnScheduleDownTime - ScheduleDownTime

--UPDATE PROCEDURE_JobDetail SET CaptureValue = Comments, Comments = '' WHERE Description = 'Comments' AND SequencePosition = 1024 AND CaptureValue = ''
--Update PROCEDURE_Step set CorrespondingProcedureID = NULL


